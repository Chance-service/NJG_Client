// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SysProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HPDataWarpper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPDataWarpper_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPKeyExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPKeyExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPErrorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPTimeZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPTimeZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPTimeZoneRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPTimeZoneRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SysProtocol_2eproto() {
  protobuf_AddDesc_SysProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SysProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  HPDataWarpper_descriptor_ = file->message_type(0);
  static const int HPDataWarpper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataWarpper, data_),
  };
  HPDataWarpper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPDataWarpper_descriptor_,
      HPDataWarpper::default_instance_,
      HPDataWarpper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataWarpper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataWarpper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPDataWarpper));
  HPKeyExchange_descriptor_ = file->message_type(1);
  static const int HPKeyExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPKeyExchange, keys_),
  };
  HPKeyExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPKeyExchange_descriptor_,
      HPKeyExchange::default_instance_,
      HPKeyExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPKeyExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPKeyExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPKeyExchange));
  HPHeartBeat_descriptor_ = file->message_type(2);
  static const int HPHeartBeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPHeartBeat, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPHeartBeat, data_),
  };
  HPHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPHeartBeat_descriptor_,
      HPHeartBeat::default_instance_,
      HPHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPHeartBeat));
  HPErrorCode_descriptor_ = file->message_type(3);
  static const int HPErrorCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPErrorCode, hpcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPErrorCode, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPErrorCode, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPErrorCode, errflag_),
  };
  HPErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPErrorCode_descriptor_,
      HPErrorCode::default_instance_,
      HPErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPErrorCode));
  HPTimeZone_descriptor_ = file->message_type(4);
  static const int HPTimeZone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPTimeZone, id_),
  };
  HPTimeZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPTimeZone_descriptor_,
      HPTimeZone::default_instance_,
      HPTimeZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPTimeZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPTimeZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPTimeZone));
  HPTimeZoneRet_descriptor_ = file->message_type(5);
  static const int HPTimeZoneRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPTimeZoneRet, timezone_),
  };
  HPTimeZoneRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPTimeZoneRet_descriptor_,
      HPTimeZoneRet::default_instance_,
      HPTimeZoneRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPTimeZoneRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPTimeZoneRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPTimeZoneRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SysProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPDataWarpper_descriptor_, &HPDataWarpper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPKeyExchange_descriptor_, &HPKeyExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPHeartBeat_descriptor_, &HPHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPErrorCode_descriptor_, &HPErrorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPTimeZone_descriptor_, &HPTimeZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPTimeZoneRet_descriptor_, &HPTimeZoneRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SysProtocol_2eproto() {
  delete HPDataWarpper::default_instance_;
  delete HPDataWarpper_reflection_;
  delete HPKeyExchange::default_instance_;
  delete HPKeyExchange_reflection_;
  delete HPHeartBeat::default_instance_;
  delete HPHeartBeat_reflection_;
  delete HPErrorCode::default_instance_;
  delete HPErrorCode_reflection_;
  delete HPTimeZone::default_instance_;
  delete HPTimeZone_reflection_;
  delete HPTimeZoneRet::default_instance_;
  delete HPTimeZoneRet_reflection_;
}

void protobuf_AddDesc_SysProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SysProtocol.proto\"\035\n\rHPDataWarpper\022\014\n\004"
    "data\030\001 \001(\014\"\035\n\rHPKeyExchange\022\014\n\004keys\030\001 \001("
    "\014\".\n\013HPHeartBeat\022\021\n\ttimeStamp\030\001 \001(\005\022\014\n\004d"
    "ata\030\002 \001(\014\"R\n\013HPErrorCode\022\016\n\006hpCode\030\001 \002(\005"
    "\022\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \001(\t\022\022\n\007err"
    "Flag\030\004 \001(\005:\0010\"\030\n\nHPTimeZone\022\n\n\002id\030\001 \001(\005\""
    "!\n\rHPTimeZoneRet\022\020\n\010timezone\030\001 \001(\005B\030\n\026co"
    "m.hawk.game.protocol", 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SysProtocol.proto", &protobuf_RegisterTypes);
  HPDataWarpper::default_instance_ = new HPDataWarpper();
  HPKeyExchange::default_instance_ = new HPKeyExchange();
  HPHeartBeat::default_instance_ = new HPHeartBeat();
  HPErrorCode::default_instance_ = new HPErrorCode();
  HPTimeZone::default_instance_ = new HPTimeZone();
  HPTimeZoneRet::default_instance_ = new HPTimeZoneRet();
  HPDataWarpper::default_instance_->InitAsDefaultInstance();
  HPKeyExchange::default_instance_->InitAsDefaultInstance();
  HPHeartBeat::default_instance_->InitAsDefaultInstance();
  HPErrorCode::default_instance_->InitAsDefaultInstance();
  HPTimeZone::default_instance_->InitAsDefaultInstance();
  HPTimeZoneRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SysProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SysProtocol_2eproto {
  StaticDescriptorInitializer_SysProtocol_2eproto() {
    protobuf_AddDesc_SysProtocol_2eproto();
  }
} static_descriptor_initializer_SysProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HPDataWarpper::kDataFieldNumber;
#endif  // !_MSC_VER

HPDataWarpper::HPDataWarpper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPDataWarpper::InitAsDefaultInstance() {
}

HPDataWarpper::HPDataWarpper(const HPDataWarpper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPDataWarpper::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPDataWarpper::~HPDataWarpper() {
  SharedDtor();
}

void HPDataWarpper::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void HPDataWarpper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPDataWarpper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPDataWarpper_descriptor_;
}

const HPDataWarpper& HPDataWarpper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

HPDataWarpper* HPDataWarpper::default_instance_ = NULL;

HPDataWarpper* HPDataWarpper::New() const {
  return new HPDataWarpper;
}

void HPDataWarpper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPDataWarpper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPDataWarpper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPDataWarpper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPDataWarpper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPDataWarpper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPDataWarpper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPDataWarpper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPDataWarpper::MergeFrom(const HPDataWarpper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPDataWarpper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPDataWarpper::CopyFrom(const HPDataWarpper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPDataWarpper::IsInitialized() const {

  return true;
}

void HPDataWarpper::Swap(HPDataWarpper* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPDataWarpper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPDataWarpper_descriptor_;
  metadata.reflection = HPDataWarpper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPKeyExchange::kKeysFieldNumber;
#endif  // !_MSC_VER

HPKeyExchange::HPKeyExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPKeyExchange::InitAsDefaultInstance() {
}

HPKeyExchange::HPKeyExchange(const HPKeyExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPKeyExchange::SharedCtor() {
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPKeyExchange::~HPKeyExchange() {
  SharedDtor();
}

void HPKeyExchange::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void HPKeyExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPKeyExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPKeyExchange_descriptor_;
}

const HPKeyExchange& HPKeyExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

HPKeyExchange* HPKeyExchange::default_instance_ = NULL;

HPKeyExchange* HPKeyExchange::New() const {
  return new HPKeyExchange;
}

void HPKeyExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keys()) {
      if (keys_ != &::google::protobuf::internal::kEmptyString) {
        keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPKeyExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPKeyExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPKeyExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes keys = 1;
  if (has_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPKeyExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 1;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPKeyExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPKeyExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPKeyExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPKeyExchange::MergeFrom(const HPKeyExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPKeyExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPKeyExchange::CopyFrom(const HPKeyExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPKeyExchange::IsInitialized() const {

  return true;
}

void HPKeyExchange::Swap(HPKeyExchange* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPKeyExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPKeyExchange_descriptor_;
  metadata.reflection = HPKeyExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPHeartBeat::kTimeStampFieldNumber;
const int HPHeartBeat::kDataFieldNumber;
#endif  // !_MSC_VER

HPHeartBeat::HPHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPHeartBeat::InitAsDefaultInstance() {
}

HPHeartBeat::HPHeartBeat(const HPHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPHeartBeat::~HPHeartBeat() {
  SharedDtor();
}

void HPHeartBeat::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void HPHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPHeartBeat_descriptor_;
}

const HPHeartBeat& HPHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

HPHeartBeat* HPHeartBeat::default_instance_ = NULL;

HPHeartBeat* HPHeartBeat::New() const {
  return new HPHeartBeat;
}

void HPHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeStamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPHeartBeat::MergeFrom(const HPHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPHeartBeat::CopyFrom(const HPHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPHeartBeat::IsInitialized() const {

  return true;
}

void HPHeartBeat::Swap(HPHeartBeat* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPHeartBeat_descriptor_;
  metadata.reflection = HPHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPErrorCode::kHpCodeFieldNumber;
const int HPErrorCode::kErrCodeFieldNumber;
const int HPErrorCode::kErrMsgFieldNumber;
const int HPErrorCode::kErrFlagFieldNumber;
#endif  // !_MSC_VER

HPErrorCode::HPErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPErrorCode::InitAsDefaultInstance() {
}

HPErrorCode::HPErrorCode(const HPErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPErrorCode::SharedCtor() {
  _cached_size_ = 0;
  hpcode_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPErrorCode::~HPErrorCode() {
  SharedDtor();
}

void HPErrorCode::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void HPErrorCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPErrorCode_descriptor_;
}

const HPErrorCode& HPErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

HPErrorCode* HPErrorCode::default_instance_ = NULL;

HPErrorCode* HPErrorCode::New() const {
  return new HPErrorCode;
}

void HPErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hpcode_ = 0;
    errcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
    errflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hpCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpcode_)));
          set_has_hpcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errCode;
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errFlag;
        break;
      }

      // optional int32 errFlag = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errflag_)));
          set_has_errflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hpCode = 1;
  if (has_hpcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hpcode(), output);
  }

  // required int32 errCode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // optional string errMsg = 3;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->errmsg(), output);
  }

  // optional int32 errFlag = 4 [default = 0];
  if (has_errflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hpCode = 1;
  if (has_hpcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hpcode(), target);
  }

  // required int32 errCode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // optional string errMsg = 3;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional int32 errFlag = 4 [default = 0];
  if (has_errflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPErrorCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hpCode = 1;
    if (has_hpcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpcode());
    }

    // required int32 errCode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 3;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional int32 errFlag = 4 [default = 0];
    if (has_errflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPErrorCode::MergeFrom(const HPErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hpcode()) {
      set_hpcode(from.hpcode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_errflag()) {
      set_errflag(from.errflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPErrorCode::CopyFrom(const HPErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPErrorCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPErrorCode::Swap(HPErrorCode* other) {
  if (other != this) {
    std::swap(hpcode_, other->hpcode_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(errflag_, other->errflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPErrorCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPErrorCode_descriptor_;
  metadata.reflection = HPErrorCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPTimeZone::kIdFieldNumber;
#endif  // !_MSC_VER

HPTimeZone::HPTimeZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPTimeZone::InitAsDefaultInstance() {
}

HPTimeZone::HPTimeZone(const HPTimeZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPTimeZone::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPTimeZone::~HPTimeZone() {
  SharedDtor();
}

void HPTimeZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPTimeZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPTimeZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPTimeZone_descriptor_;
}

const HPTimeZone& HPTimeZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

HPTimeZone* HPTimeZone::default_instance_ = NULL;

HPTimeZone* HPTimeZone::New() const {
  return new HPTimeZone;
}

void HPTimeZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPTimeZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPTimeZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPTimeZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPTimeZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPTimeZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPTimeZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPTimeZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPTimeZone::MergeFrom(const HPTimeZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPTimeZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPTimeZone::CopyFrom(const HPTimeZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPTimeZone::IsInitialized() const {

  return true;
}

void HPTimeZone::Swap(HPTimeZone* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPTimeZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPTimeZone_descriptor_;
  metadata.reflection = HPTimeZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPTimeZoneRet::kTimezoneFieldNumber;
#endif  // !_MSC_VER

HPTimeZoneRet::HPTimeZoneRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPTimeZoneRet::InitAsDefaultInstance() {
}

HPTimeZoneRet::HPTimeZoneRet(const HPTimeZoneRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPTimeZoneRet::SharedCtor() {
  _cached_size_ = 0;
  timezone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPTimeZoneRet::~HPTimeZoneRet() {
  SharedDtor();
}

void HPTimeZoneRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPTimeZoneRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPTimeZoneRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPTimeZoneRet_descriptor_;
}

const HPTimeZoneRet& HPTimeZoneRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SysProtocol_2eproto();
  return *default_instance_;
}

HPTimeZoneRet* HPTimeZoneRet::default_instance_ = NULL;

HPTimeZoneRet* HPTimeZoneRet::New() const {
  return new HPTimeZoneRet;
}

void HPTimeZoneRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timezone_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPTimeZoneRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timezone = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
          set_has_timezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPTimeZoneRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timezone = 1;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timezone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPTimeZoneRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timezone = 1;
  if (has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timezone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPTimeZoneRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timezone = 1;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPTimeZoneRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPTimeZoneRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPTimeZoneRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPTimeZoneRet::MergeFrom(const HPTimeZoneRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPTimeZoneRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPTimeZoneRet::CopyFrom(const HPTimeZoneRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPTimeZoneRet::IsInitialized() const {

  return true;
}

void HPTimeZoneRet::Swap(HPTimeZoneRet* other) {
  if (other != this) {
    std::swap(timezone_, other->timezone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPTimeZoneRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPTimeZoneRet_descriptor_;
  metadata.reflection = HPTimeZoneRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
