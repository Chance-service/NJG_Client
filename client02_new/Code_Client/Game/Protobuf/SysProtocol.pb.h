// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SysProtocol.proto

#ifndef PROTOBUF_SysProtocol_2eproto__INCLUDED
#define PROTOBUF_SysProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SysProtocol_2eproto();
void protobuf_AssignDesc_SysProtocol_2eproto();
void protobuf_ShutdownFile_SysProtocol_2eproto();

class HPDataWarpper;
class HPKeyExchange;
class HPHeartBeat;
class HPErrorCode;
class HPTimeZone;
class HPTimeZoneRet;

// ===================================================================

class HPDataWarpper : public ::google::protobuf::Message {
 public:
  HPDataWarpper();
  virtual ~HPDataWarpper();

  HPDataWarpper(const HPDataWarpper& from);

  inline HPDataWarpper& operator=(const HPDataWarpper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPDataWarpper& default_instance();

  void Swap(HPDataWarpper* other);

  // implements Message ----------------------------------------------

  HPDataWarpper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPDataWarpper& from);
  void MergeFrom(const HPDataWarpper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:HPDataWarpper)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static HPDataWarpper* default_instance_;
};
// -------------------------------------------------------------------

class HPKeyExchange : public ::google::protobuf::Message {
 public:
  HPKeyExchange();
  virtual ~HPKeyExchange();

  HPKeyExchange(const HPKeyExchange& from);

  inline HPKeyExchange& operator=(const HPKeyExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPKeyExchange& default_instance();

  void Swap(HPKeyExchange* other);

  // implements Message ----------------------------------------------

  HPKeyExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPKeyExchange& from);
  void MergeFrom(const HPKeyExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes keys = 1;
  inline bool has_keys() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::std::string& keys() const;
  inline void set_keys(const ::std::string& value);
  inline void set_keys(const char* value);
  inline void set_keys(const void* value, size_t size);
  inline ::std::string* mutable_keys();
  inline ::std::string* release_keys();
  inline void set_allocated_keys(::std::string* keys);

  // @@protoc_insertion_point(class_scope:HPKeyExchange)
 private:
  inline void set_has_keys();
  inline void clear_has_keys();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* keys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static HPKeyExchange* default_instance_;
};
// -------------------------------------------------------------------

class HPHeartBeat : public ::google::protobuf::Message {
 public:
  HPHeartBeat();
  virtual ~HPHeartBeat();

  HPHeartBeat(const HPHeartBeat& from);

  inline HPHeartBeat& operator=(const HPHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPHeartBeat& default_instance();

  void Swap(HPHeartBeat* other);

  // implements Message ----------------------------------------------

  HPHeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPHeartBeat& from);
  void MergeFrom(const HPHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timeStamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:HPHeartBeat)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static HPHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class HPErrorCode : public ::google::protobuf::Message {
 public:
  HPErrorCode();
  virtual ~HPErrorCode();

  HPErrorCode(const HPErrorCode& from);

  inline HPErrorCode& operator=(const HPErrorCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPErrorCode& default_instance();

  void Swap(HPErrorCode* other);

  // implements Message ----------------------------------------------

  HPErrorCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPErrorCode& from);
  void MergeFrom(const HPErrorCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hpCode = 1;
  inline bool has_hpcode() const;
  inline void clear_hpcode();
  static const int kHpCodeFieldNumber = 1;
  inline ::google::protobuf::int32 hpcode() const;
  inline void set_hpcode(::google::protobuf::int32 value);

  // required int32 errCode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 3;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // optional int32 errFlag = 4 [default = 0];
  inline bool has_errflag() const;
  inline void clear_errflag();
  static const int kErrFlagFieldNumber = 4;
  inline ::google::protobuf::int32 errflag() const;
  inline void set_errflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HPErrorCode)
 private:
  inline void set_has_hpcode();
  inline void clear_has_hpcode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_errflag();
  inline void clear_has_errflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hpcode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  ::google::protobuf::int32 errflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static HPErrorCode* default_instance_;
};
// -------------------------------------------------------------------

class HPTimeZone : public ::google::protobuf::Message {
 public:
  HPTimeZone();
  virtual ~HPTimeZone();

  HPTimeZone(const HPTimeZone& from);

  inline HPTimeZone& operator=(const HPTimeZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPTimeZone& default_instance();

  void Swap(HPTimeZone* other);

  // implements Message ----------------------------------------------

  HPTimeZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPTimeZone& from);
  void MergeFrom(const HPTimeZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HPTimeZone)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static HPTimeZone* default_instance_;
};
// -------------------------------------------------------------------

class HPTimeZoneRet : public ::google::protobuf::Message {
 public:
  HPTimeZoneRet();
  virtual ~HPTimeZoneRet();

  HPTimeZoneRet(const HPTimeZoneRet& from);

  inline HPTimeZoneRet& operator=(const HPTimeZoneRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPTimeZoneRet& default_instance();

  void Swap(HPTimeZoneRet* other);

  // implements Message ----------------------------------------------

  HPTimeZoneRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPTimeZoneRet& from);
  void MergeFrom(const HPTimeZoneRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timezone = 1;
  inline bool has_timezone() const;
  inline void clear_timezone();
  static const int kTimezoneFieldNumber = 1;
  inline ::google::protobuf::int32 timezone() const;
  inline void set_timezone(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HPTimeZoneRet)
 private:
  inline void set_has_timezone();
  inline void clear_has_timezone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timezone_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SysProtocol_2eproto();
  friend void protobuf_AssignDesc_SysProtocol_2eproto();
  friend void protobuf_ShutdownFile_SysProtocol_2eproto();

  void InitAsDefaultInstance();
  static HPTimeZoneRet* default_instance_;
};
// ===================================================================


// ===================================================================

// HPDataWarpper

// optional bytes data = 1;
inline bool HPDataWarpper::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPDataWarpper::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPDataWarpper::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPDataWarpper::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& HPDataWarpper::data() const {
  return *data_;
}
inline void HPDataWarpper::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void HPDataWarpper::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void HPDataWarpper::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPDataWarpper::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* HPDataWarpper::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPDataWarpper::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HPKeyExchange

// optional bytes keys = 1;
inline bool HPKeyExchange::has_keys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPKeyExchange::set_has_keys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPKeyExchange::clear_has_keys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPKeyExchange::clear_keys() {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    keys_->clear();
  }
  clear_has_keys();
}
inline const ::std::string& HPKeyExchange::keys() const {
  return *keys_;
}
inline void HPKeyExchange::set_keys(const ::std::string& value) {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  keys_->assign(value);
}
inline void HPKeyExchange::set_keys(const char* value) {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  keys_->assign(value);
}
inline void HPKeyExchange::set_keys(const void* value, size_t size) {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  keys_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPKeyExchange::mutable_keys() {
  set_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    keys_ = new ::std::string;
  }
  return keys_;
}
inline ::std::string* HPKeyExchange::release_keys() {
  clear_has_keys();
  if (keys_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keys_;
    keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPKeyExchange::set_allocated_keys(::std::string* keys) {
  if (keys_ != &::google::protobuf::internal::kEmptyString) {
    delete keys_;
  }
  if (keys) {
    set_has_keys();
    keys_ = keys;
  } else {
    clear_has_keys();
    keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HPHeartBeat

// optional int32 timeStamp = 1;
inline bool HPHeartBeat::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPHeartBeat::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPHeartBeat::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPHeartBeat::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 HPHeartBeat::timestamp() const {
  return timestamp_;
}
inline void HPHeartBeat::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bytes data = 2;
inline bool HPHeartBeat::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPHeartBeat::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPHeartBeat::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPHeartBeat::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& HPHeartBeat::data() const {
  return *data_;
}
inline void HPHeartBeat::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void HPHeartBeat::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void HPHeartBeat::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPHeartBeat::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* HPHeartBeat::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPHeartBeat::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HPErrorCode

// required int32 hpCode = 1;
inline bool HPErrorCode::has_hpcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPErrorCode::set_has_hpcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPErrorCode::clear_has_hpcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPErrorCode::clear_hpcode() {
  hpcode_ = 0;
  clear_has_hpcode();
}
inline ::google::protobuf::int32 HPErrorCode::hpcode() const {
  return hpcode_;
}
inline void HPErrorCode::set_hpcode(::google::protobuf::int32 value) {
  set_has_hpcode();
  hpcode_ = value;
}

// required int32 errCode = 2;
inline bool HPErrorCode::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPErrorCode::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPErrorCode::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPErrorCode::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 HPErrorCode::errcode() const {
  return errcode_;
}
inline void HPErrorCode::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional string errMsg = 3;
inline bool HPErrorCode::has_errmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HPErrorCode::set_has_errmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HPErrorCode::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HPErrorCode::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& HPErrorCode::errmsg() const {
  return *errmsg_;
}
inline void HPErrorCode::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void HPErrorCode::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void HPErrorCode::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPErrorCode::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  return errmsg_;
}
inline ::std::string* HPErrorCode::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPErrorCode::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 errFlag = 4 [default = 0];
inline bool HPErrorCode::has_errflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HPErrorCode::set_has_errflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HPErrorCode::clear_has_errflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HPErrorCode::clear_errflag() {
  errflag_ = 0;
  clear_has_errflag();
}
inline ::google::protobuf::int32 HPErrorCode::errflag() const {
  return errflag_;
}
inline void HPErrorCode::set_errflag(::google::protobuf::int32 value) {
  set_has_errflag();
  errflag_ = value;
}

// -------------------------------------------------------------------

// HPTimeZone

// optional int32 id = 1;
inline bool HPTimeZone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPTimeZone::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPTimeZone::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPTimeZone::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HPTimeZone::id() const {
  return id_;
}
inline void HPTimeZone::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// HPTimeZoneRet

// optional int32 timezone = 1;
inline bool HPTimeZoneRet::has_timezone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPTimeZoneRet::set_has_timezone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPTimeZoneRet::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPTimeZoneRet::clear_timezone() {
  timezone_ = 0;
  clear_has_timezone();
}
inline ::google::protobuf::int32 HPTimeZoneRet::timezone() const {
  return timezone_;
}
inline void HPTimeZoneRet::set_timezone(::google::protobuf::int32 value) {
  set_has_timezone();
  timezone_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SysProtocol_2eproto__INCLUDED
