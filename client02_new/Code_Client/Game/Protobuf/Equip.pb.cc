// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Equip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Equip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPEquipInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPEquipInfoSync_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Equip_2eproto() {
  protobuf_AddDesc_Equip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Equip.proto");
  GOOGLE_CHECK(file != NULL);
  EquipAttr_descriptor_ = file->message_type(0);
  static const int EquipAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, attrgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, attrdata_),
  };
  EquipAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipAttr_descriptor_,
      EquipAttr::default_instance_,
      EquipAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipAttr));
  GemInfo_descriptor_ = file->message_type(1);
  static const int GemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInfo, gemitemid_),
  };
  GemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemInfo_descriptor_,
      GemInfo::default_instance_,
      GemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemInfo));
  EquipInfo_descriptor_ = file->message_type(2);
  static const int EquipInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, starexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, godlyattrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, geminfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, attrinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, starlevel2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, starexp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, godlyattrid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, relatesuitid_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  HPEquipInfoSync_descriptor_ = file->message_type(3);
  static const int HPEquipInfoSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipInfoSync, equipinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipInfoSync, isreward_),
  };
  HPEquipInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPEquipInfoSync_descriptor_,
      HPEquipInfoSync::default_instance_,
      HPEquipInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPEquipInfoSync));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Equip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipAttr_descriptor_, &EquipAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemInfo_descriptor_, &GemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPEquipInfoSync_descriptor_, &HPEquipInfoSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Equip_2eproto() {
  delete EquipAttr::default_instance_;
  delete EquipAttr_reflection_;
  delete GemInfo::default_instance_;
  delete GemInfo_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete HPEquipInfoSync::default_instance_;
  delete HPEquipInfoSync_reflection_;
}

void protobuf_AddDesc_Equip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Attribute_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Equip.proto\032\017Attribute.proto\"7\n\tEquipA"
    "ttr\022\021\n\tattrGrade\030\001 \002(\005\022\027\n\010attrData\030\002 \002(\013"
    "2\005.Attr\")\n\007GemInfo\022\013\n\003pos\030\001 \002(\005\022\021\n\tgemIt"
    "emId\030\002 \001(\005\"\255\002\n\tEquipInfo\022\n\n\002id\030\001 \002(\003\022\017\n\007"
    "equipId\030\002 \002(\005\022\020\n\010strength\030\003 \002(\005\022\021\n\tstarL"
    "evel\030\004 \002(\005\022\017\n\007starExp\030\005 \002(\005\022\023\n\013godlyAttr"
    "Id\030\006 \002(\005\022\032\n\010gemInfos\030\007 \003(\0132\010.GemInfo\022\035\n\t"
    "attrInfos\030\010 \003(\0132\n.EquipAttr\022\016\n\006status\030\t "
    "\002(\005\022\r\n\005score\030\n \002(\005\022\014\n\004lock\030\013 \001(\010\022\022\n\nstar"
    "Level2\030\014 \001(\005\022\020\n\010starExp2\030\r \001(\005\022\024\n\014godlyA"
    "ttrId2\030\016 \001(\005\022\024\n\014relateSuitId\030\017 \001(\005\"C\n\017HP"
    "EquipInfoSync\022\036\n\nequipInfos\030\001 \003(\0132\n.Equi"
    "pInfo\022\020\n\010isReward\030\002 \001(\010B\030\n\026com.hawk.game"
    ".protocol", 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Equip.proto", &protobuf_RegisterTypes);
  EquipAttr::default_instance_ = new EquipAttr();
  GemInfo::default_instance_ = new GemInfo();
  EquipInfo::default_instance_ = new EquipInfo();
  HPEquipInfoSync::default_instance_ = new HPEquipInfoSync();
  EquipAttr::default_instance_->InitAsDefaultInstance();
  GemInfo::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  HPEquipInfoSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Equip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Equip_2eproto {
  StaticDescriptorInitializer_Equip_2eproto() {
    protobuf_AddDesc_Equip_2eproto();
  }
} static_descriptor_initializer_Equip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipAttr::kAttrGradeFieldNumber;
const int EquipAttr::kAttrDataFieldNumber;
#endif  // !_MSC_VER

EquipAttr::EquipAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipAttr::InitAsDefaultInstance() {
  attrdata_ = const_cast< ::Attr*>(&::Attr::default_instance());
}

EquipAttr::EquipAttr(const EquipAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipAttr::SharedCtor() {
  _cached_size_ = 0;
  attrgrade_ = 0;
  attrdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipAttr::~EquipAttr() {
  SharedDtor();
}

void EquipAttr::SharedDtor() {
  if (this != default_instance_) {
    delete attrdata_;
  }
}

void EquipAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipAttr_descriptor_;
}

const EquipAttr& EquipAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Equip_2eproto();
  return *default_instance_;
}

EquipAttr* EquipAttr::default_instance_ = NULL;

EquipAttr* EquipAttr::New() const {
  return new EquipAttr;
}

void EquipAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrgrade_ = 0;
    if (has_attrdata()) {
      if (attrdata_ != NULL) attrdata_->::Attr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 attrGrade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrgrade_)));
          set_has_attrgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attrData;
        break;
      }

      // required .Attr attrData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 attrGrade = 1;
  if (has_attrgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrgrade(), output);
  }

  // required .Attr attrData = 2;
  if (has_attrdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 attrGrade = 1;
  if (has_attrgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrgrade(), target);
  }

  // required .Attr attrData = 2;
  if (has_attrdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 attrGrade = 1;
    if (has_attrgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrgrade());
    }

    // required .Attr attrData = 2;
    if (has_attrdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipAttr::MergeFrom(const EquipAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrgrade()) {
      set_attrgrade(from.attrgrade());
    }
    if (from.has_attrdata()) {
      mutable_attrdata()->::Attr::MergeFrom(from.attrdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipAttr::CopyFrom(const EquipAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attrdata()) {
    if (!this->attrdata().IsInitialized()) return false;
  }
  return true;
}

void EquipAttr::Swap(EquipAttr* other) {
  if (other != this) {
    std::swap(attrgrade_, other->attrgrade_);
    std::swap(attrdata_, other->attrdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipAttr_descriptor_;
  metadata.reflection = EquipAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemInfo::kPosFieldNumber;
const int GemInfo::kGemItemIdFieldNumber;
#endif  // !_MSC_VER

GemInfo::GemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemInfo::InitAsDefaultInstance() {
}

GemInfo::GemInfo(const GemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  gemitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemInfo::~GemInfo() {
  SharedDtor();
}

void GemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemInfo_descriptor_;
}

const GemInfo& GemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Equip_2eproto();
  return *default_instance_;
}

GemInfo* GemInfo::default_instance_ = NULL;

GemInfo* GemInfo::New() const {
  return new GemInfo;
}

void GemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    gemitemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gemItemId;
        break;
      }

      // optional int32 gemItemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemitemid_)));
          set_has_gemitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 gemItemId = 2;
  if (has_gemitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gemitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 gemItemId = 2;
  if (has_gemitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gemitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 gemItemId = 2;
    if (has_gemitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemInfo::MergeFrom(const GemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_gemitemid()) {
      set_gemitemid(from.gemitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemInfo::CopyFrom(const GemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GemInfo::Swap(GemInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(gemitemid_, other->gemitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemInfo_descriptor_;
  metadata.reflection = GemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kIdFieldNumber;
const int EquipInfo::kEquipIdFieldNumber;
const int EquipInfo::kStrengthFieldNumber;
const int EquipInfo::kStarLevelFieldNumber;
const int EquipInfo::kStarExpFieldNumber;
const int EquipInfo::kGodlyAttrIdFieldNumber;
const int EquipInfo::kGemInfosFieldNumber;
const int EquipInfo::kAttrInfosFieldNumber;
const int EquipInfo::kStatusFieldNumber;
const int EquipInfo::kScoreFieldNumber;
const int EquipInfo::kLockFieldNumber;
const int EquipInfo::kStarLevel2FieldNumber;
const int EquipInfo::kStarExp2FieldNumber;
const int EquipInfo::kGodlyAttrId2FieldNumber;
const int EquipInfo::kRelateSuitIdFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInfo::InitAsDefaultInstance() {
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  equipid_ = 0;
  strength_ = 0;
  starlevel_ = 0;
  starexp_ = 0;
  godlyattrid_ = 0;
  status_ = 0;
  score_ = 0;
  lock_ = false;
  starlevel2_ = 0;
  starexp2_ = 0;
  godlyattrid2_ = 0;
  relatesuitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Equip_2eproto();
  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    equipid_ = 0;
    strength_ = 0;
    starlevel_ = 0;
    starexp_ = 0;
    godlyattrid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
    score_ = 0;
    lock_ = false;
    starlevel2_ = 0;
    starexp2_ = 0;
    godlyattrid2_ = 0;
    relatesuitid_ = 0;
  }
  geminfos_.Clear();
  attrinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipId;
        break;
      }

      // required int32 equipId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strength;
        break;
      }

      // required int32 strength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starLevel;
        break;
      }

      // required int32 starLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_starExp;
        break;
      }

      // required int32 starExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starexp_)));
          set_has_starexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_godlyAttrId;
        break;
      }

      // required int32 godlyAttrId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godlyAttrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godlyattrid_)));
          set_has_godlyattrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gemInfos;
        break;
      }

      // repeated .GemInfo gemInfos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gemInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geminfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gemInfos;
        if (input->ExpectTag(66)) goto parse_attrInfos;
        break;
      }

      // repeated .EquipAttr attrInfos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attrInfos;
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // required int32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_score;
        break;
      }

      // required int32 score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lock;
        break;
      }

      // optional bool lock = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_starLevel2;
        break;
      }

      // optional int32 starLevel2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLevel2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlevel2_)));
          set_has_starlevel2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_starExp2;
        break;
      }

      // optional int32 starExp2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starExp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starexp2_)));
          set_has_starexp2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_godlyAttrId2;
        break;
      }

      // optional int32 godlyAttrId2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godlyAttrId2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godlyattrid2_)));
          set_has_godlyattrid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_relateSuitId;
        break;
      }

      // optional int32 relateSuitId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relateSuitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relatesuitid_)));
          set_has_relatesuitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 equipId = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipid(), output);
  }

  // required int32 strength = 3;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->strength(), output);
  }

  // required int32 starLevel = 4;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starlevel(), output);
  }

  // required int32 starExp = 5;
  if (has_starexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starexp(), output);
  }

  // required int32 godlyAttrId = 6;
  if (has_godlyattrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->godlyattrid(), output);
  }

  // repeated .GemInfo gemInfos = 7;
  for (int i = 0; i < this->geminfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geminfos(i), output);
  }

  // repeated .EquipAttr attrInfos = 8;
  for (int i = 0; i < this->attrinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attrinfos(i), output);
  }

  // required int32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }

  // required int32 score = 10;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->score(), output);
  }

  // optional bool lock = 11;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->lock(), output);
  }

  // optional int32 starLevel2 = 12;
  if (has_starlevel2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->starlevel2(), output);
  }

  // optional int32 starExp2 = 13;
  if (has_starexp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->starexp2(), output);
  }

  // optional int32 godlyAttrId2 = 14;
  if (has_godlyattrid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->godlyattrid2(), output);
  }

  // optional int32 relateSuitId = 15;
  if (has_relatesuitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relatesuitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 equipId = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipid(), target);
  }

  // required int32 strength = 3;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->strength(), target);
  }

  // required int32 starLevel = 4;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starlevel(), target);
  }

  // required int32 starExp = 5;
  if (has_starexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starexp(), target);
  }

  // required int32 godlyAttrId = 6;
  if (has_godlyattrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->godlyattrid(), target);
  }

  // repeated .GemInfo gemInfos = 7;
  for (int i = 0; i < this->geminfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geminfos(i), target);
  }

  // repeated .EquipAttr attrInfos = 8;
  for (int i = 0; i < this->attrinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attrinfos(i), target);
  }

  // required int32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }

  // required int32 score = 10;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->score(), target);
  }

  // optional bool lock = 11;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->lock(), target);
  }

  // optional int32 starLevel2 = 12;
  if (has_starlevel2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->starlevel2(), target);
  }

  // optional int32 starExp2 = 13;
  if (has_starexp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->starexp2(), target);
  }

  // optional int32 godlyAttrId2 = 14;
  if (has_godlyattrid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->godlyattrid2(), target);
  }

  // optional int32 relateSuitId = 15;
  if (has_relatesuitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relatesuitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 equipId = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }

    // required int32 strength = 3;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // required int32 starLevel = 4;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlevel());
    }

    // required int32 starExp = 5;
    if (has_starexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starexp());
    }

    // required int32 godlyAttrId = 6;
    if (has_godlyattrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godlyattrid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 score = 10;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bool lock = 11;
    if (has_lock()) {
      total_size += 1 + 1;
    }

    // optional int32 starLevel2 = 12;
    if (has_starlevel2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlevel2());
    }

    // optional int32 starExp2 = 13;
    if (has_starexp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starexp2());
    }

    // optional int32 godlyAttrId2 = 14;
    if (has_godlyattrid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godlyattrid2());
    }

    // optional int32 relateSuitId = 15;
    if (has_relatesuitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relatesuitid());
    }

  }
  // repeated .GemInfo gemInfos = 7;
  total_size += 1 * this->geminfos_size();
  for (int i = 0; i < this->geminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geminfos(i));
  }

  // repeated .EquipAttr attrInfos = 8;
  total_size += 1 * this->attrinfos_size();
  for (int i = 0; i < this->attrinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  geminfos_.MergeFrom(from.geminfos_);
  attrinfos_.MergeFrom(from.attrinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_starexp()) {
      set_starexp(from.starexp());
    }
    if (from.has_godlyattrid()) {
      set_godlyattrid(from.godlyattrid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_starlevel2()) {
      set_starlevel2(from.starlevel2());
    }
    if (from.has_starexp2()) {
      set_starexp2(from.starexp2());
    }
    if (from.has_godlyattrid2()) {
      set_godlyattrid2(from.godlyattrid2());
    }
    if (from.has_relatesuitid()) {
      set_relatesuitid(from.relatesuitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000033f) != 0x0000033f) return false;

  for (int i = 0; i < geminfos_size(); i++) {
    if (!this->geminfos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attrinfos_size(); i++) {
    if (!this->attrinfos(i).IsInitialized()) return false;
  }
  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equipid_, other->equipid_);
    std::swap(strength_, other->strength_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(starexp_, other->starexp_);
    std::swap(godlyattrid_, other->godlyattrid_);
    geminfos_.Swap(&other->geminfos_);
    attrinfos_.Swap(&other->attrinfos_);
    std::swap(status_, other->status_);
    std::swap(score_, other->score_);
    std::swap(lock_, other->lock_);
    std::swap(starlevel2_, other->starlevel2_);
    std::swap(starexp2_, other->starexp2_);
    std::swap(godlyattrid2_, other->godlyattrid2_);
    std::swap(relatesuitid_, other->relatesuitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPEquipInfoSync::kEquipInfosFieldNumber;
const int HPEquipInfoSync::kIsRewardFieldNumber;
#endif  // !_MSC_VER

HPEquipInfoSync::HPEquipInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPEquipInfoSync::InitAsDefaultInstance() {
}

HPEquipInfoSync::HPEquipInfoSync(const HPEquipInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPEquipInfoSync::SharedCtor() {
  _cached_size_ = 0;
  isreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPEquipInfoSync::~HPEquipInfoSync() {
  SharedDtor();
}

void HPEquipInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPEquipInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPEquipInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPEquipInfoSync_descriptor_;
}

const HPEquipInfoSync& HPEquipInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Equip_2eproto();
  return *default_instance_;
}

HPEquipInfoSync* HPEquipInfoSync::default_instance_ = NULL;

HPEquipInfoSync* HPEquipInfoSync::New() const {
  return new HPEquipInfoSync;
}

void HPEquipInfoSync::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isreward_ = false;
  }
  equipinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPEquipInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipInfo equipInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipInfos;
        if (input->ExpectTag(16)) goto parse_isReward;
        break;
      }

      // optional bool isReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPEquipInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipInfo equipInfos = 1;
  for (int i = 0; i < this->equipinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipinfos(i), output);
  }

  // optional bool isReward = 2;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPEquipInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipInfo equipInfos = 1;
  for (int i = 0; i < this->equipinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipinfos(i), target);
  }

  // optional bool isReward = 2;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPEquipInfoSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool isReward = 2;
    if (has_isreward()) {
      total_size += 1 + 1;
    }

  }
  // repeated .EquipInfo equipInfos = 1;
  total_size += 1 * this->equipinfos_size();
  for (int i = 0; i < this->equipinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPEquipInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPEquipInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPEquipInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPEquipInfoSync::MergeFrom(const HPEquipInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipinfos_.MergeFrom(from.equipinfos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPEquipInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPEquipInfoSync::CopyFrom(const HPEquipInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPEquipInfoSync::IsInitialized() const {

  for (int i = 0; i < equipinfos_size(); i++) {
    if (!this->equipinfos(i).IsInitialized()) return false;
  }
  return true;
}

void HPEquipInfoSync::Swap(HPEquipInfoSync* other) {
  if (other != this) {
    equipinfos_.Swap(&other->equipinfos_);
    std::swap(isreward_, other->isreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPEquipInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPEquipInfoSync_descriptor_;
  metadata.reflection = HPEquipInfoSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
