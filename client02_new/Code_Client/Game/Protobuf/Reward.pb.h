// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Reward.proto

#ifndef PROTOBUF_Reward_2eproto__INCLUDED
#define PROTOBUF_Reward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Consume.pb.h"
#include "Item.pb.h"
#include "Equip.pb.h"
#include "Skill.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Reward_2eproto();
void protobuf_AssignDesc_Reward_2eproto();
void protobuf_ShutdownFile_Reward_2eproto();

class RewardItem;
class RewardInfo;
class HPPlayerReward;
class HPFetchGift;
class HPJPActivityStatusRet;

// ===================================================================

class RewardItem : public ::google::protobuf::Message {
 public:
  RewardItem();
  virtual ~RewardItem();

  RewardItem(const RewardItem& from);

  inline RewardItem& operator=(const RewardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardItem& default_instance();

  void Swap(RewardItem* other);

  // implements Message ----------------------------------------------

  RewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardItem& from);
  void MergeFrom(const RewardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 itemType = 2;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 2;
  inline ::google::protobuf::int32 itemtype() const;
  inline void set_itemtype(::google::protobuf::int32 value);

  // required int32 itemCount = 3;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::int32 itemcount() const;
  inline void set_itemcount(::google::protobuf::int32 value);

  // optional int32 itemStatus = 4;
  inline bool has_itemstatus() const;
  inline void clear_itemstatus();
  static const int kItemStatusFieldNumber = 4;
  inline ::google::protobuf::int32 itemstatus() const;
  inline void set_itemstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RewardItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_itemstatus();
  inline void clear_has_itemstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 itemcount_;
  ::google::protobuf::int32 itemstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Reward_2eproto();
  friend void protobuf_AssignDesc_Reward_2eproto();
  friend void protobuf_ShutdownFile_Reward_2eproto();

  void InitAsDefaultInstance();
  static RewardItem* default_instance_;
};
// -------------------------------------------------------------------

class RewardInfo : public ::google::protobuf::Message {
 public:
  RewardInfo();
  virtual ~RewardInfo();

  RewardInfo(const RewardInfo& from);

  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardInfo& default_instance();

  void Swap(RewardInfo* other);

  // implements Message ----------------------------------------------

  RewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int64 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int32 vipLevel = 5;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 5;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 smeltValue = 6;
  inline bool has_smeltvalue() const;
  inline void clear_smeltvalue();
  static const int kSmeltValueFieldNumber = 6;
  inline ::google::protobuf::int32 smeltvalue() const;
  inline void set_smeltvalue(::google::protobuf::int32 value);

  // optional int32 contribution = 7;
  inline bool has_contribution() const;
  inline void clear_contribution();
  static const int kContributionFieldNumber = 7;
  inline ::google::protobuf::int32 contribution() const;
  inline void set_contribution(::google::protobuf::int32 value);

  // optional int32 bossFightTimes = 8;
  inline bool has_bossfighttimes() const;
  inline void clear_bossfighttimes();
  static const int kBossFightTimesFieldNumber = 8;
  inline ::google::protobuf::int32 bossfighttimes() const;
  inline void set_bossfighttimes(::google::protobuf::int32 value);

  // optional int32 honorValue = 9;
  inline bool has_honorvalue() const;
  inline void clear_honorvalue();
  static const int kHonorValueFieldNumber = 9;
  inline ::google::protobuf::int32 honorvalue() const;
  inline void set_honorvalue(::google::protobuf::int32 value);

  // optional int32 reputationValue = 10;
  inline bool has_reputationvalue() const;
  inline void clear_reputationvalue();
  static const int kReputationValueFieldNumber = 10;
  inline ::google::protobuf::int32 reputationvalue() const;
  inline void set_reputationvalue(::google::protobuf::int32 value);

  // repeated .RewardItem showItems = 11;
  inline int showitems_size() const;
  inline void clear_showitems();
  static const int kShowItemsFieldNumber = 11;
  inline const ::RewardItem& showitems(int index) const;
  inline ::RewardItem* mutable_showitems(int index);
  inline ::RewardItem* add_showitems();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardItem >&
      showitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardItem >*
      mutable_showitems();

  // optional int32 crystalValue = 12;
  inline bool has_crystalvalue() const;
  inline void clear_crystalvalue();
  static const int kCrystalValueFieldNumber = 12;
  inline ::google::protobuf::int32 crystalvalue() const;
  inline void set_crystalvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RewardInfo)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_smeltvalue();
  inline void clear_has_smeltvalue();
  inline void set_has_contribution();
  inline void clear_has_contribution();
  inline void set_has_bossfighttimes();
  inline void clear_has_bossfighttimes();
  inline void set_has_honorvalue();
  inline void clear_has_honorvalue();
  inline void set_has_reputationvalue();
  inline void clear_has_reputationvalue();
  inline void set_has_crystalvalue();
  inline void clear_has_crystalvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 coin_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 smeltvalue_;
  ::google::protobuf::int32 contribution_;
  ::google::protobuf::int32 bossfighttimes_;
  ::google::protobuf::int32 honorvalue_;
  ::google::protobuf::int32 reputationvalue_;
  ::google::protobuf::RepeatedPtrField< ::RewardItem > showitems_;
  ::google::protobuf::int32 crystalvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Reward_2eproto();
  friend void protobuf_AssignDesc_Reward_2eproto();
  friend void protobuf_ShutdownFile_Reward_2eproto();

  void InitAsDefaultInstance();
  static RewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class HPPlayerReward : public ::google::protobuf::Message {
 public:
  HPPlayerReward();
  virtual ~HPPlayerReward();

  HPPlayerReward(const HPPlayerReward& from);

  inline HPPlayerReward& operator=(const HPPlayerReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPPlayerReward& default_instance();

  void Swap(HPPlayerReward* other);

  // implements Message ----------------------------------------------

  HPPlayerReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPPlayerReward& from);
  void MergeFrom(const HPPlayerReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional .RewardInfo rewards = 2;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::RewardInfo& rewards() const;
  inline ::RewardInfo* mutable_rewards();
  inline ::RewardInfo* release_rewards();
  inline void set_allocated_rewards(::RewardInfo* rewards);

  // @@protoc_insertion_point(class_scope:HPPlayerReward)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_rewards();
  inline void clear_has_rewards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::RewardInfo* rewards_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Reward_2eproto();
  friend void protobuf_AssignDesc_Reward_2eproto();
  friend void protobuf_ShutdownFile_Reward_2eproto();

  void InitAsDefaultInstance();
  static HPPlayerReward* default_instance_;
};
// -------------------------------------------------------------------

class HPFetchGift : public ::google::protobuf::Message {
 public:
  HPFetchGift();
  virtual ~HPFetchGift();

  HPFetchGift(const HPFetchGift& from);

  inline HPFetchGift& operator=(const HPFetchGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPFetchGift& default_instance();

  void Swap(HPFetchGift* other);

  // implements Message ----------------------------------------------

  HPFetchGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPFetchGift& from);
  void MergeFrom(const HPFetchGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 giftId = 1;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIdFieldNumber = 1;
  inline ::google::protobuf::int32 giftid() const;
  inline void set_giftid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HPFetchGift)
 private:
  inline void set_has_giftid();
  inline void clear_has_giftid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 giftid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Reward_2eproto();
  friend void protobuf_AssignDesc_Reward_2eproto();
  friend void protobuf_ShutdownFile_Reward_2eproto();

  void InitAsDefaultInstance();
  static HPFetchGift* default_instance_;
};
// -------------------------------------------------------------------

class HPJPActivityStatusRet : public ::google::protobuf::Message {
 public:
  HPJPActivityStatusRet();
  virtual ~HPJPActivityStatusRet();

  HPJPActivityStatusRet(const HPJPActivityStatusRet& from);

  inline HPJPActivityStatusRet& operator=(const HPJPActivityStatusRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPJPActivityStatusRet& default_instance();

  void Swap(HPJPActivityStatusRet* other);

  // implements Message ----------------------------------------------

  HPJPActivityStatusRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPJPActivityStatusRet& from);
  void MergeFrom(const HPJPActivityStatusRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 jPActivityStatus = 1;
  inline bool has_jpactivitystatus() const;
  inline void clear_jpactivitystatus();
  static const int kJPActivityStatusFieldNumber = 1;
  inline ::google::protobuf::int32 jpactivitystatus() const;
  inline void set_jpactivitystatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HPJPActivityStatusRet)
 private:
  inline void set_has_jpactivitystatus();
  inline void clear_has_jpactivitystatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 jpactivitystatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Reward_2eproto();
  friend void protobuf_AssignDesc_Reward_2eproto();
  friend void protobuf_ShutdownFile_Reward_2eproto();

  void InitAsDefaultInstance();
  static HPJPActivityStatusRet* default_instance_;
};
// ===================================================================


// ===================================================================

// RewardItem

// required int32 itemId = 1;
inline bool RewardItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 RewardItem::itemid() const {
  return itemid_;
}
inline void RewardItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 itemType = 2;
inline bool RewardItem::has_itemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardItem::set_has_itemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardItem::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardItem::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 RewardItem::itemtype() const {
  return itemtype_;
}
inline void RewardItem::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
}

// required int32 itemCount = 3;
inline bool RewardItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardItem::clear_itemcount() {
  itemcount_ = 0;
  clear_has_itemcount();
}
inline ::google::protobuf::int32 RewardItem::itemcount() const {
  return itemcount_;
}
inline void RewardItem::set_itemcount(::google::protobuf::int32 value) {
  set_has_itemcount();
  itemcount_ = value;
}

// optional int32 itemStatus = 4;
inline bool RewardItem::has_itemstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RewardItem::set_has_itemstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RewardItem::clear_has_itemstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RewardItem::clear_itemstatus() {
  itemstatus_ = 0;
  clear_has_itemstatus();
}
inline ::google::protobuf::int32 RewardItem::itemstatus() const {
  return itemstatus_;
}
inline void RewardItem::set_itemstatus(::google::protobuf::int32 value) {
  set_has_itemstatus();
  itemstatus_ = value;
}

// -------------------------------------------------------------------

// RewardInfo

// optional int32 gold = 1;
inline bool RewardInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 RewardInfo::gold() const {
  return gold_;
}
inline void RewardInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 coin = 2;
inline bool RewardInfo::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardInfo::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardInfo::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardInfo::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 RewardInfo::coin() const {
  return coin_;
}
inline void RewardInfo::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int32 level = 3;
inline bool RewardInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RewardInfo::level() const {
  return level_;
}
inline void RewardInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 exp = 4;
inline bool RewardInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RewardInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RewardInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RewardInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 RewardInfo::exp() const {
  return exp_;
}
inline void RewardInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 vipLevel = 5;
inline bool RewardInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RewardInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RewardInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RewardInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 RewardInfo::viplevel() const {
  return viplevel_;
}
inline void RewardInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 smeltValue = 6;
inline bool RewardInfo::has_smeltvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RewardInfo::set_has_smeltvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RewardInfo::clear_has_smeltvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RewardInfo::clear_smeltvalue() {
  smeltvalue_ = 0;
  clear_has_smeltvalue();
}
inline ::google::protobuf::int32 RewardInfo::smeltvalue() const {
  return smeltvalue_;
}
inline void RewardInfo::set_smeltvalue(::google::protobuf::int32 value) {
  set_has_smeltvalue();
  smeltvalue_ = value;
}

// optional int32 contribution = 7;
inline bool RewardInfo::has_contribution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RewardInfo::set_has_contribution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RewardInfo::clear_has_contribution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RewardInfo::clear_contribution() {
  contribution_ = 0;
  clear_has_contribution();
}
inline ::google::protobuf::int32 RewardInfo::contribution() const {
  return contribution_;
}
inline void RewardInfo::set_contribution(::google::protobuf::int32 value) {
  set_has_contribution();
  contribution_ = value;
}

// optional int32 bossFightTimes = 8;
inline bool RewardInfo::has_bossfighttimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RewardInfo::set_has_bossfighttimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RewardInfo::clear_has_bossfighttimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RewardInfo::clear_bossfighttimes() {
  bossfighttimes_ = 0;
  clear_has_bossfighttimes();
}
inline ::google::protobuf::int32 RewardInfo::bossfighttimes() const {
  return bossfighttimes_;
}
inline void RewardInfo::set_bossfighttimes(::google::protobuf::int32 value) {
  set_has_bossfighttimes();
  bossfighttimes_ = value;
}

// optional int32 honorValue = 9;
inline bool RewardInfo::has_honorvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RewardInfo::set_has_honorvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RewardInfo::clear_has_honorvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RewardInfo::clear_honorvalue() {
  honorvalue_ = 0;
  clear_has_honorvalue();
}
inline ::google::protobuf::int32 RewardInfo::honorvalue() const {
  return honorvalue_;
}
inline void RewardInfo::set_honorvalue(::google::protobuf::int32 value) {
  set_has_honorvalue();
  honorvalue_ = value;
}

// optional int32 reputationValue = 10;
inline bool RewardInfo::has_reputationvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RewardInfo::set_has_reputationvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RewardInfo::clear_has_reputationvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RewardInfo::clear_reputationvalue() {
  reputationvalue_ = 0;
  clear_has_reputationvalue();
}
inline ::google::protobuf::int32 RewardInfo::reputationvalue() const {
  return reputationvalue_;
}
inline void RewardInfo::set_reputationvalue(::google::protobuf::int32 value) {
  set_has_reputationvalue();
  reputationvalue_ = value;
}

// repeated .RewardItem showItems = 11;
inline int RewardInfo::showitems_size() const {
  return showitems_.size();
}
inline void RewardInfo::clear_showitems() {
  showitems_.Clear();
}
inline const ::RewardItem& RewardInfo::showitems(int index) const {
  return showitems_.Get(index);
}
inline ::RewardItem* RewardInfo::mutable_showitems(int index) {
  return showitems_.Mutable(index);
}
inline ::RewardItem* RewardInfo::add_showitems() {
  return showitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardItem >&
RewardInfo::showitems() const {
  return showitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardItem >*
RewardInfo::mutable_showitems() {
  return &showitems_;
}

// optional int32 crystalValue = 12;
inline bool RewardInfo::has_crystalvalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RewardInfo::set_has_crystalvalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RewardInfo::clear_has_crystalvalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RewardInfo::clear_crystalvalue() {
  crystalvalue_ = 0;
  clear_has_crystalvalue();
}
inline ::google::protobuf::int32 RewardInfo::crystalvalue() const {
  return crystalvalue_;
}
inline void RewardInfo::set_crystalvalue(::google::protobuf::int32 value) {
  set_has_crystalvalue();
  crystalvalue_ = value;
}

// -------------------------------------------------------------------

// HPPlayerReward

// optional int32 flag = 1;
inline bool HPPlayerReward::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPPlayerReward::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPPlayerReward::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPPlayerReward::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 HPPlayerReward::flag() const {
  return flag_;
}
inline void HPPlayerReward::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional .RewardInfo rewards = 2;
inline bool HPPlayerReward::has_rewards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPPlayerReward::set_has_rewards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPPlayerReward::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPPlayerReward::clear_rewards() {
  if (rewards_ != NULL) rewards_->::RewardInfo::Clear();
  clear_has_rewards();
}
inline const ::RewardInfo& HPPlayerReward::rewards() const {
  return rewards_ != NULL ? *rewards_ : *default_instance_->rewards_;
}
inline ::RewardInfo* HPPlayerReward::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) rewards_ = new ::RewardInfo;
  return rewards_;
}
inline ::RewardInfo* HPPlayerReward::release_rewards() {
  clear_has_rewards();
  ::RewardInfo* temp = rewards_;
  rewards_ = NULL;
  return temp;
}
inline void HPPlayerReward::set_allocated_rewards(::RewardInfo* rewards) {
  delete rewards_;
  rewards_ = rewards;
  if (rewards) {
    set_has_rewards();
  } else {
    clear_has_rewards();
  }
}

// -------------------------------------------------------------------

// HPFetchGift

// required int32 giftId = 1;
inline bool HPFetchGift::has_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPFetchGift::set_has_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPFetchGift::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPFetchGift::clear_giftid() {
  giftid_ = 0;
  clear_has_giftid();
}
inline ::google::protobuf::int32 HPFetchGift::giftid() const {
  return giftid_;
}
inline void HPFetchGift::set_giftid(::google::protobuf::int32 value) {
  set_has_giftid();
  giftid_ = value;
}

// -------------------------------------------------------------------

// HPJPActivityStatusRet

// required int32 jPActivityStatus = 1;
inline bool HPJPActivityStatusRet::has_jpactivitystatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPJPActivityStatusRet::set_has_jpactivitystatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPJPActivityStatusRet::clear_has_jpactivitystatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPJPActivityStatusRet::clear_jpactivitystatus() {
  jpactivitystatus_ = 0;
  clear_has_jpactivitystatus();
}
inline ::google::protobuf::int32 HPJPActivityStatusRet::jpactivitystatus() const {
  return jpactivitystatus_;
}
inline void HPJPActivityStatusRet::set_jpactivitystatus(::google::protobuf::int32 value) {
  set_has_jpactivitystatus();
  jpactivitystatus_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Reward_2eproto__INCLUDED
