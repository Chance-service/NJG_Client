// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_Login_2eproto__INCLUDED
#define PROTOBUF_Login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Login_2eproto();
void protobuf_AssignDesc_Login_2eproto();
void protobuf_ShutdownFile_Login_2eproto();

class HPLogin;
class HPLoginRet;

// ===================================================================

class HPLogin : public ::google::protobuf::Message {
 public:
  HPLogin();
  virtual ~HPLogin();

  HPLogin(const HPLogin& from);

  inline HPLogin& operator=(const HPLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPLogin& default_instance();

  void Swap(HPLogin* other);

  // implements Message ----------------------------------------------

  HPLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPLogin& from);
  void MergeFrom(const HPLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string puid = 1;
  inline bool has_puid() const;
  inline void clear_puid();
  static const int kPuidFieldNumber = 1;
  inline const ::std::string& puid() const;
  inline void set_puid(const ::std::string& value);
  inline void set_puid(const char* value);
  inline void set_puid(const char* value, size_t size);
  inline ::std::string* mutable_puid();
  inline ::std::string* release_puid();
  inline void set_allocated_puid(::std::string* puid);

  // required string deviceId = 2 [default = "0"];
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // required string platform = 3 [default = "0"];
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string version = 4 [default = "0.0.1"];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string langArea = 6;
  inline bool has_langarea() const;
  inline void clear_langarea();
  static const int kLangAreaFieldNumber = 6;
  inline const ::std::string& langarea() const;
  inline void set_langarea(const ::std::string& value);
  inline void set_langarea(const char* value);
  inline void set_langarea(const char* value, size_t size);
  inline ::std::string* mutable_langarea();
  inline ::std::string* release_langarea();
  inline void set_allocated_langarea(::std::string* langarea);

  // required int32 serverId = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required bool isReLogin = 8;
  inline bool has_isrelogin() const;
  inline void clear_isrelogin();
  static const int kIsReLoginFieldNumber = 8;
  inline bool isrelogin() const;
  inline void set_isrelogin(bool value);

  // optional string passwd = 9 [default = "888888"];
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 9;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // optional bool registed = 10;
  inline bool has_registed() const;
  inline void clear_registed();
  static const int kRegistedFieldNumber = 10;
  inline bool registed() const;
  inline void set_registed(bool value);

  // optional int32 isGuest = 11;
  inline bool has_isguest() const;
  inline void clear_isguest();
  static const int kIsGuestFieldNumber = 11;
  inline ::google::protobuf::int32 isguest() const;
  inline void set_isguest(::google::protobuf::int32 value);

  // optional string wallet = 12 [default = ""];
  inline bool has_wallet() const;
  inline void clear_wallet();
  static const int kWalletFieldNumber = 12;
  inline const ::std::string& wallet() const;
  inline void set_wallet(const ::std::string& value);
  inline void set_wallet(const char* value);
  inline void set_wallet(const char* value, size_t size);
  inline ::std::string* mutable_wallet();
  inline ::std::string* release_wallet();
  inline void set_allocated_wallet(::std::string* wallet);

  // @@protoc_insertion_point(class_scope:HPLogin)
 private:
  inline void set_has_puid();
  inline void clear_has_puid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_langarea();
  inline void clear_has_langarea();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_isrelogin();
  inline void clear_has_isrelogin();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_registed();
  inline void clear_has_registed();
  inline void set_has_isguest();
  inline void clear_has_isguest();
  inline void set_has_wallet();
  inline void clear_has_wallet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* puid_;
  ::std::string* deviceid_;
  static ::std::string* _default_deviceid_;
  ::std::string* platform_;
  static ::std::string* _default_platform_;
  ::std::string* version_;
  static ::std::string* _default_version_;
  ::std::string* token_;
  ::std::string* langarea_;
  ::google::protobuf::int32 serverid_;
  bool isrelogin_;
  bool registed_;
  ::std::string* passwd_;
  static ::std::string* _default_passwd_;
  ::std::string* wallet_;
  ::google::protobuf::int32 isguest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static HPLogin* default_instance_;
};
// -------------------------------------------------------------------

class HPLoginRet : public ::google::protobuf::Message {
 public:
  HPLoginRet();
  virtual ~HPLoginRet();

  HPLoginRet(const HPLoginRet& from);

  inline HPLoginRet& operator=(const HPLoginRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPLoginRet& default_instance();

  void Swap(HPLoginRet* other);

  // implements Message ----------------------------------------------

  HPLoginRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPLoginRet& from);
  void MergeFrom(const HPLoginRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int32 roleItemId = 2;
  inline bool has_roleitemid() const;
  inline void clear_roleitemid();
  static const int kRoleItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 roleitemid() const;
  inline void set_roleitemid(::google::protobuf::int32 value);

  // required int32 timeStamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string area = 5;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 5;
  inline const ::std::string& area() const;
  inline void set_area(const ::std::string& value);
  inline void set_area(const char* value);
  inline void set_area(const char* value, size_t size);
  inline ::std::string* mutable_area();
  inline ::std::string* release_area();
  inline void set_allocated_area(::std::string* area);

  // optional int32 isGuest = 6;
  inline bool has_isguest() const;
  inline void clear_isguest();
  static const int kIsGuestFieldNumber = 6;
  inline ::google::protobuf::int32 isguest() const;
  inline void set_isguest(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HPLoginRet)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_roleitemid();
  inline void clear_has_roleitemid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_isguest();
  inline void clear_has_isguest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 roleitemid_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 status_;
  ::std::string* area_;
  ::google::protobuf::int32 isguest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static HPLoginRet* default_instance_;
};
// ===================================================================


// ===================================================================

// HPLogin

// required string puid = 1;
inline bool HPLogin::has_puid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPLogin::set_has_puid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPLogin::clear_has_puid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPLogin::clear_puid() {
  if (puid_ != &::google::protobuf::internal::kEmptyString) {
    puid_->clear();
  }
  clear_has_puid();
}
inline const ::std::string& HPLogin::puid() const {
  return *puid_;
}
inline void HPLogin::set_puid(const ::std::string& value) {
  set_has_puid();
  if (puid_ == &::google::protobuf::internal::kEmptyString) {
    puid_ = new ::std::string;
  }
  puid_->assign(value);
}
inline void HPLogin::set_puid(const char* value) {
  set_has_puid();
  if (puid_ == &::google::protobuf::internal::kEmptyString) {
    puid_ = new ::std::string;
  }
  puid_->assign(value);
}
inline void HPLogin::set_puid(const char* value, size_t size) {
  set_has_puid();
  if (puid_ == &::google::protobuf::internal::kEmptyString) {
    puid_ = new ::std::string;
  }
  puid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_puid() {
  set_has_puid();
  if (puid_ == &::google::protobuf::internal::kEmptyString) {
    puid_ = new ::std::string;
  }
  return puid_;
}
inline ::std::string* HPLogin::release_puid() {
  clear_has_puid();
  if (puid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = puid_;
    puid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPLogin::set_allocated_puid(::std::string* puid) {
  if (puid_ != &::google::protobuf::internal::kEmptyString) {
    delete puid_;
  }
  if (puid) {
    set_has_puid();
    puid_ = puid;
  } else {
    clear_has_puid();
    puid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string deviceId = 2 [default = "0"];
inline bool HPLogin::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPLogin::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPLogin::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPLogin::clear_deviceid() {
  if (deviceid_ != _default_deviceid_) {
    deviceid_->assign(*_default_deviceid_);
  }
  clear_has_deviceid();
}
inline const ::std::string& HPLogin::deviceid() const {
  return *deviceid_;
}
inline void HPLogin::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void HPLogin::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void HPLogin::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    deviceid_ = new ::std::string(*_default_deviceid_);
  }
  return deviceid_;
}
inline ::std::string* HPLogin::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == _default_deviceid_) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
    return temp;
  }
}
inline void HPLogin::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  }
}

// required string platform = 3 [default = "0"];
inline bool HPLogin::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HPLogin::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HPLogin::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HPLogin::clear_platform() {
  if (platform_ != _default_platform_) {
    platform_->assign(*_default_platform_);
  }
  clear_has_platform();
}
inline const ::std::string& HPLogin::platform() const {
  return *platform_;
}
inline void HPLogin::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == _default_platform_) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void HPLogin::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == _default_platform_) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void HPLogin::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == _default_platform_) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_platform() {
  set_has_platform();
  if (platform_ == _default_platform_) {
    platform_ = new ::std::string(*_default_platform_);
  }
  return platform_;
}
inline ::std::string* HPLogin::release_platform() {
  clear_has_platform();
  if (platform_ == _default_platform_) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(_default_platform_);
    return temp;
  }
}
inline void HPLogin::set_allocated_platform(::std::string* platform) {
  if (platform_ != _default_platform_) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(_default_platform_);
  }
}

// optional string version = 4 [default = "0.0.1"];
inline bool HPLogin::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HPLogin::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HPLogin::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HPLogin::clear_version() {
  if (version_ != _default_version_) {
    version_->assign(*_default_version_);
  }
  clear_has_version();
}
inline const ::std::string& HPLogin::version() const {
  return *version_;
}
inline void HPLogin::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void HPLogin::set_version(const char* value) {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void HPLogin::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_version() {
  set_has_version();
  if (version_ == _default_version_) {
    version_ = new ::std::string(*_default_version_);
  }
  return version_;
}
inline ::std::string* HPLogin::release_version() {
  clear_has_version();
  if (version_ == _default_version_) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(_default_version_);
    return temp;
  }
}
inline void HPLogin::set_allocated_version(::std::string* version) {
  if (version_ != _default_version_) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(_default_version_);
  }
}

// optional string token = 5;
inline bool HPLogin::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HPLogin::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HPLogin::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HPLogin::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& HPLogin::token() const {
  return *token_;
}
inline void HPLogin::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void HPLogin::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void HPLogin::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* HPLogin::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPLogin::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string langArea = 6;
inline bool HPLogin::has_langarea() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HPLogin::set_has_langarea() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HPLogin::clear_has_langarea() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HPLogin::clear_langarea() {
  if (langarea_ != &::google::protobuf::internal::kEmptyString) {
    langarea_->clear();
  }
  clear_has_langarea();
}
inline const ::std::string& HPLogin::langarea() const {
  return *langarea_;
}
inline void HPLogin::set_langarea(const ::std::string& value) {
  set_has_langarea();
  if (langarea_ == &::google::protobuf::internal::kEmptyString) {
    langarea_ = new ::std::string;
  }
  langarea_->assign(value);
}
inline void HPLogin::set_langarea(const char* value) {
  set_has_langarea();
  if (langarea_ == &::google::protobuf::internal::kEmptyString) {
    langarea_ = new ::std::string;
  }
  langarea_->assign(value);
}
inline void HPLogin::set_langarea(const char* value, size_t size) {
  set_has_langarea();
  if (langarea_ == &::google::protobuf::internal::kEmptyString) {
    langarea_ = new ::std::string;
  }
  langarea_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_langarea() {
  set_has_langarea();
  if (langarea_ == &::google::protobuf::internal::kEmptyString) {
    langarea_ = new ::std::string;
  }
  return langarea_;
}
inline ::std::string* HPLogin::release_langarea() {
  clear_has_langarea();
  if (langarea_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = langarea_;
    langarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPLogin::set_allocated_langarea(::std::string* langarea) {
  if (langarea_ != &::google::protobuf::internal::kEmptyString) {
    delete langarea_;
  }
  if (langarea) {
    set_has_langarea();
    langarea_ = langarea;
  } else {
    clear_has_langarea();
    langarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 serverId = 7;
inline bool HPLogin::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HPLogin::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HPLogin::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HPLogin::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 HPLogin::serverid() const {
  return serverid_;
}
inline void HPLogin::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required bool isReLogin = 8;
inline bool HPLogin::has_isrelogin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HPLogin::set_has_isrelogin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HPLogin::clear_has_isrelogin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HPLogin::clear_isrelogin() {
  isrelogin_ = false;
  clear_has_isrelogin();
}
inline bool HPLogin::isrelogin() const {
  return isrelogin_;
}
inline void HPLogin::set_isrelogin(bool value) {
  set_has_isrelogin();
  isrelogin_ = value;
}

// optional string passwd = 9 [default = "888888"];
inline bool HPLogin::has_passwd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HPLogin::set_has_passwd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HPLogin::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HPLogin::clear_passwd() {
  if (passwd_ != _default_passwd_) {
    passwd_->assign(*_default_passwd_);
  }
  clear_has_passwd();
}
inline const ::std::string& HPLogin::passwd() const {
  return *passwd_;
}
inline void HPLogin::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void HPLogin::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void HPLogin::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string(*_default_passwd_);
  }
  return passwd_;
}
inline ::std::string* HPLogin::release_passwd() {
  clear_has_passwd();
  if (passwd_ == _default_passwd_) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(_default_passwd_);
    return temp;
  }
}
inline void HPLogin::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != _default_passwd_) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(_default_passwd_);
  }
}

// optional bool registed = 10;
inline bool HPLogin::has_registed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HPLogin::set_has_registed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HPLogin::clear_has_registed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HPLogin::clear_registed() {
  registed_ = false;
  clear_has_registed();
}
inline bool HPLogin::registed() const {
  return registed_;
}
inline void HPLogin::set_registed(bool value) {
  set_has_registed();
  registed_ = value;
}

// optional int32 isGuest = 11;
inline bool HPLogin::has_isguest() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HPLogin::set_has_isguest() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HPLogin::clear_has_isguest() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HPLogin::clear_isguest() {
  isguest_ = 0;
  clear_has_isguest();
}
inline ::google::protobuf::int32 HPLogin::isguest() const {
  return isguest_;
}
inline void HPLogin::set_isguest(::google::protobuf::int32 value) {
  set_has_isguest();
  isguest_ = value;
}

// optional string wallet = 12 [default = ""];
inline bool HPLogin::has_wallet() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HPLogin::set_has_wallet() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HPLogin::clear_has_wallet() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HPLogin::clear_wallet() {
  if (wallet_ != &::google::protobuf::internal::kEmptyString) {
    wallet_->clear();
  }
  clear_has_wallet();
}
inline const ::std::string& HPLogin::wallet() const {
  return *wallet_;
}
inline void HPLogin::set_wallet(const ::std::string& value) {
  set_has_wallet();
  if (wallet_ == &::google::protobuf::internal::kEmptyString) {
    wallet_ = new ::std::string;
  }
  wallet_->assign(value);
}
inline void HPLogin::set_wallet(const char* value) {
  set_has_wallet();
  if (wallet_ == &::google::protobuf::internal::kEmptyString) {
    wallet_ = new ::std::string;
  }
  wallet_->assign(value);
}
inline void HPLogin::set_wallet(const char* value, size_t size) {
  set_has_wallet();
  if (wallet_ == &::google::protobuf::internal::kEmptyString) {
    wallet_ = new ::std::string;
  }
  wallet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLogin::mutable_wallet() {
  set_has_wallet();
  if (wallet_ == &::google::protobuf::internal::kEmptyString) {
    wallet_ = new ::std::string;
  }
  return wallet_;
}
inline ::std::string* HPLogin::release_wallet() {
  clear_has_wallet();
  if (wallet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wallet_;
    wallet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPLogin::set_allocated_wallet(::std::string* wallet) {
  if (wallet_ != &::google::protobuf::internal::kEmptyString) {
    delete wallet_;
  }
  if (wallet) {
    set_has_wallet();
    wallet_ = wallet;
  } else {
    clear_has_wallet();
    wallet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HPLoginRet

// required int32 playerId = 1;
inline bool HPLoginRet::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPLoginRet::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPLoginRet::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPLoginRet::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 HPLoginRet::playerid() const {
  return playerid_;
}
inline void HPLoginRet::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 roleItemId = 2;
inline bool HPLoginRet::has_roleitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPLoginRet::set_has_roleitemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPLoginRet::clear_has_roleitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPLoginRet::clear_roleitemid() {
  roleitemid_ = 0;
  clear_has_roleitemid();
}
inline ::google::protobuf::int32 HPLoginRet::roleitemid() const {
  return roleitemid_;
}
inline void HPLoginRet::set_roleitemid(::google::protobuf::int32 value) {
  set_has_roleitemid();
  roleitemid_ = value;
}

// required int32 timeStamp = 3;
inline bool HPLoginRet::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HPLoginRet::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HPLoginRet::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HPLoginRet::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 HPLoginRet::timestamp() const {
  return timestamp_;
}
inline void HPLoginRet::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 status = 4;
inline bool HPLoginRet::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HPLoginRet::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HPLoginRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HPLoginRet::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 HPLoginRet::status() const {
  return status_;
}
inline void HPLoginRet::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string area = 5;
inline bool HPLoginRet::has_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HPLoginRet::set_has_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HPLoginRet::clear_has_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HPLoginRet::clear_area() {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    area_->clear();
  }
  clear_has_area();
}
inline const ::std::string& HPLoginRet::area() const {
  return *area_;
}
inline void HPLoginRet::set_area(const ::std::string& value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void HPLoginRet::set_area(const char* value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void HPLoginRet::set_area(const char* value, size_t size) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HPLoginRet::mutable_area() {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  return area_;
}
inline ::std::string* HPLoginRet::release_area() {
  clear_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_;
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HPLoginRet::set_allocated_area(::std::string* area) {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (area) {
    set_has_area();
    area_ = area;
  } else {
    clear_has_area();
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isGuest = 6;
inline bool HPLoginRet::has_isguest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HPLoginRet::set_has_isguest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HPLoginRet::clear_has_isguest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HPLoginRet::clear_isguest() {
  isguest_ = 0;
  clear_has_isguest();
}
inline ::google::protobuf::int32 HPLoginRet::isguest() const {
  return isguest_;
}
inline void HPLoginRet::set_isguest(::google::protobuf::int32 value) {
  set_has_isguest();
  isguest_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Login_2eproto__INCLUDED
