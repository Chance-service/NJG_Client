// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Reward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Reward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFetchGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFetchGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPJPActivityStatusRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPJPActivityStatusRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Reward_2eproto() {
  protobuf_AddDesc_Reward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Reward.proto");
  GOOGLE_CHECK(file != NULL);
  RewardItem_descriptor_ = file->message_type(0);
  static const int RewardItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, itemstatus_),
  };
  RewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItem_descriptor_,
      RewardItem::default_instance_,
      RewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItem));
  RewardInfo_descriptor_ = file->message_type(1);
  static const int RewardInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, smeltvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, bossfighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, honorvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, reputationvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, showitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, crystalvalue_),
  };
  RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardInfo_descriptor_,
      RewardInfo::default_instance_,
      RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardInfo));
  HPPlayerReward_descriptor_ = file->message_type(2);
  static const int HPPlayerReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerReward, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerReward, rewards_),
  };
  HPPlayerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerReward_descriptor_,
      HPPlayerReward::default_instance_,
      HPPlayerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerReward));
  HPFetchGift_descriptor_ = file->message_type(3);
  static const int HPFetchGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFetchGift, giftid_),
  };
  HPFetchGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFetchGift_descriptor_,
      HPFetchGift::default_instance_,
      HPFetchGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFetchGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFetchGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFetchGift));
  HPJPActivityStatusRet_descriptor_ = file->message_type(4);
  static const int HPJPActivityStatusRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPJPActivityStatusRet, jpactivitystatus_),
  };
  HPJPActivityStatusRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPJPActivityStatusRet_descriptor_,
      HPJPActivityStatusRet::default_instance_,
      HPJPActivityStatusRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPJPActivityStatusRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPJPActivityStatusRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPJPActivityStatusRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Reward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItem_descriptor_, &RewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardInfo_descriptor_, &RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerReward_descriptor_, &HPPlayerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFetchGift_descriptor_, &HPFetchGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPJPActivityStatusRet_descriptor_, &HPJPActivityStatusRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Reward_2eproto() {
  delete RewardItem::default_instance_;
  delete RewardItem_reflection_;
  delete RewardInfo::default_instance_;
  delete RewardInfo_reflection_;
  delete HPPlayerReward::default_instance_;
  delete HPPlayerReward_reflection_;
  delete HPFetchGift::default_instance_;
  delete HPFetchGift_reflection_;
  delete HPJPActivityStatusRet::default_instance_;
  delete HPJPActivityStatusRet_reflection_;
}

void protobuf_AddDesc_Reward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Consume_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_Equip_2eproto();
  ::protobuf_AddDesc_Skill_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Reward.proto\032\rConsume.proto\032\nItem.prot"
    "o\032\013Equip.proto\032\013Skill.proto\"U\n\nRewardIte"
    "m\022\016\n\006itemId\030\001 \002(\005\022\020\n\010itemType\030\002 \002(\005\022\021\n\ti"
    "temCount\030\003 \002(\005\022\022\n\nitemStatus\030\004 \001(\005\"\373\001\n\nR"
    "ewardInfo\022\014\n\004gold\030\001 \001(\005\022\014\n\004coin\030\002 \001(\003\022\r\n"
    "\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001(\003\022\020\n\010vipLevel\030\005 "
    "\001(\005\022\022\n\nsmeltValue\030\006 \001(\005\022\024\n\014contribution\030"
    "\007 \001(\005\022\026\n\016bossFightTimes\030\010 \001(\005\022\022\n\nhonorVa"
    "lue\030\t \001(\005\022\027\n\017reputationValue\030\n \001(\005\022\036\n\tsh"
    "owItems\030\013 \003(\0132\013.RewardItem\022\024\n\014crystalVal"
    "ue\030\014 \001(\005\"<\n\016HPPlayerReward\022\014\n\004flag\030\001 \001(\005"
    "\022\034\n\007rewards\030\002 \001(\0132\013.RewardInfo\"\035\n\013HPFetc"
    "hGift\022\016\n\006giftId\030\001 \002(\005\"1\n\025HPJPActivitySta"
    "tusRet\022\030\n\020jPActivityStatus\030\001 \002(\005B\030\n\026com."
    "hawk.game.protocol", 578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Reward.proto", &protobuf_RegisterTypes);
  RewardItem::default_instance_ = new RewardItem();
  RewardInfo::default_instance_ = new RewardInfo();
  HPPlayerReward::default_instance_ = new HPPlayerReward();
  HPFetchGift::default_instance_ = new HPFetchGift();
  HPJPActivityStatusRet::default_instance_ = new HPJPActivityStatusRet();
  RewardItem::default_instance_->InitAsDefaultInstance();
  RewardInfo::default_instance_->InitAsDefaultInstance();
  HPPlayerReward::default_instance_->InitAsDefaultInstance();
  HPFetchGift::default_instance_->InitAsDefaultInstance();
  HPJPActivityStatusRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Reward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Reward_2eproto {
  StaticDescriptorInitializer_Reward_2eproto() {
    protobuf_AddDesc_Reward_2eproto();
  }
} static_descriptor_initializer_Reward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RewardItem::kItemIdFieldNumber;
const int RewardItem::kItemTypeFieldNumber;
const int RewardItem::kItemCountFieldNumber;
const int RewardItem::kItemStatusFieldNumber;
#endif  // !_MSC_VER

RewardItem::RewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardItem::InitAsDefaultInstance() {
}

RewardItem::RewardItem(const RewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemtype_ = 0;
  itemcount_ = 0;
  itemstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItem::~RewardItem() {
  SharedDtor();
}

void RewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItem_descriptor_;
}

const RewardItem& RewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reward_2eproto();
  return *default_instance_;
}

RewardItem* RewardItem::default_instance_ = NULL;

RewardItem* RewardItem::New() const {
  return new RewardItem;
}

void RewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemtype_ = 0;
    itemcount_ = 0;
    itemstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // required int32 itemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }

      // required int32 itemCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemStatus;
        break;
      }

      // optional int32 itemStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemstatus_)));
          set_has_itemstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  // required int32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemcount(), output);
  }

  // optional int32 itemStatus = 4;
  if (has_itemstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 itemType = 2;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemtype(), target);
  }

  // required int32 itemCount = 3;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemcount(), target);
  }

  // optional int32 itemStatus = 4;
  if (has_itemstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // required int32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }

    // optional int32 itemStatus = 4;
    if (has_itemstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItem::MergeFrom(const RewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_itemstatus()) {
      set_itemstatus(from.itemstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItem::CopyFrom(const RewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RewardItem::Swap(RewardItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(itemstatus_, other->itemstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItem_descriptor_;
  metadata.reflection = RewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardInfo::kGoldFieldNumber;
const int RewardInfo::kCoinFieldNumber;
const int RewardInfo::kLevelFieldNumber;
const int RewardInfo::kExpFieldNumber;
const int RewardInfo::kVipLevelFieldNumber;
const int RewardInfo::kSmeltValueFieldNumber;
const int RewardInfo::kContributionFieldNumber;
const int RewardInfo::kBossFightTimesFieldNumber;
const int RewardInfo::kHonorValueFieldNumber;
const int RewardInfo::kReputationValueFieldNumber;
const int RewardInfo::kShowItemsFieldNumber;
const int RewardInfo::kCrystalValueFieldNumber;
#endif  // !_MSC_VER

RewardInfo::RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardInfo::InitAsDefaultInstance() {
}

RewardInfo::RewardInfo(const RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  coin_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  smeltvalue_ = 0;
  contribution_ = 0;
  bossfighttimes_ = 0;
  honorvalue_ = 0;
  reputationvalue_ = 0;
  crystalvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardInfo::~RewardInfo() {
  SharedDtor();
}

void RewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardInfo_descriptor_;
}

const RewardInfo& RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reward_2eproto();
  return *default_instance_;
}

RewardInfo* RewardInfo::default_instance_ = NULL;

RewardInfo* RewardInfo::New() const {
  return new RewardInfo;
}

void RewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    coin_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    viplevel_ = 0;
    smeltvalue_ = 0;
    contribution_ = 0;
    bossfighttimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    honorvalue_ = 0;
    reputationvalue_ = 0;
    crystalvalue_ = 0;
  }
  showitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional int64 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_smeltValue;
        break;
      }

      // optional int32 smeltValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smeltValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smeltvalue_)));
          set_has_smeltvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_contribution;
        break;
      }

      // optional int32 contribution = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bossFightTimes;
        break;
      }

      // optional int32 bossFightTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossFightTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossfighttimes_)));
          set_has_bossfighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_honorValue;
        break;
      }

      // optional int32 honorValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honorValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honorvalue_)));
          set_has_honorvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reputationValue;
        break;
      }

      // optional int32 reputationValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputationValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputationvalue_)));
          set_has_reputationvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_showItems;
        break;
      }

      // repeated .RewardItem showItems = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_showItems;
        if (input->ExpectTag(96)) goto parse_crystalValue;
        break;
      }

      // optional int32 crystalValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crystalvalue_)));
          set_has_crystalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->coin(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }

  // optional int32 vipLevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viplevel(), output);
  }

  // optional int32 smeltValue = 6;
  if (has_smeltvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smeltvalue(), output);
  }

  // optional int32 contribution = 7;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->contribution(), output);
  }

  // optional int32 bossFightTimes = 8;
  if (has_bossfighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bossfighttimes(), output);
  }

  // optional int32 honorValue = 9;
  if (has_honorvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->honorvalue(), output);
  }

  // optional int32 reputationValue = 10;
  if (has_reputationvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reputationvalue(), output);
  }

  // repeated .RewardItem showItems = 11;
  for (int i = 0; i < this->showitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->showitems(i), output);
  }

  // optional int32 crystalValue = 12;
  if (has_crystalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->crystalvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->coin(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }

  // optional int32 vipLevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viplevel(), target);
  }

  // optional int32 smeltValue = 6;
  if (has_smeltvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->smeltvalue(), target);
  }

  // optional int32 contribution = 7;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->contribution(), target);
  }

  // optional int32 bossFightTimes = 8;
  if (has_bossfighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bossfighttimes(), target);
  }

  // optional int32 honorValue = 9;
  if (has_honorvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->honorvalue(), target);
  }

  // optional int32 reputationValue = 10;
  if (has_reputationvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reputationvalue(), target);
  }

  // repeated .RewardItem showItems = 11;
  for (int i = 0; i < this->showitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->showitems(i), target);
  }

  // optional int32 crystalValue = 12;
  if (has_crystalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->crystalvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int64 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 vipLevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 smeltValue = 6;
    if (has_smeltvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smeltvalue());
    }

    // optional int32 contribution = 7;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribution());
    }

    // optional int32 bossFightTimes = 8;
    if (has_bossfighttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossfighttimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 honorValue = 9;
    if (has_honorvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honorvalue());
    }

    // optional int32 reputationValue = 10;
    if (has_reputationvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputationvalue());
    }

    // optional int32 crystalValue = 12;
    if (has_crystalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crystalvalue());
    }

  }
  // repeated .RewardItem showItems = 11;
  total_size += 1 * this->showitems_size();
  for (int i = 0; i < this->showitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  showitems_.MergeFrom(from.showitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_smeltvalue()) {
      set_smeltvalue(from.smeltvalue());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
    if (from.has_bossfighttimes()) {
      set_bossfighttimes(from.bossfighttimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_honorvalue()) {
      set_honorvalue(from.honorvalue());
    }
    if (from.has_reputationvalue()) {
      set_reputationvalue(from.reputationvalue());
    }
    if (from.has_crystalvalue()) {
      set_crystalvalue(from.crystalvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {

  for (int i = 0; i < showitems_size(); i++) {
    if (!this->showitems(i).IsInitialized()) return false;
  }
  return true;
}

void RewardInfo::Swap(RewardInfo* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(coin_, other->coin_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(smeltvalue_, other->smeltvalue_);
    std::swap(contribution_, other->contribution_);
    std::swap(bossfighttimes_, other->bossfighttimes_);
    std::swap(honorvalue_, other->honorvalue_);
    std::swap(reputationvalue_, other->reputationvalue_);
    showitems_.Swap(&other->showitems_);
    std::swap(crystalvalue_, other->crystalvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardInfo_descriptor_;
  metadata.reflection = RewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPPlayerReward::kFlagFieldNumber;
const int HPPlayerReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

HPPlayerReward::HPPlayerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerReward::InitAsDefaultInstance() {
  rewards_ = const_cast< ::RewardInfo*>(&::RewardInfo::default_instance());
}

HPPlayerReward::HPPlayerReward(const HPPlayerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerReward::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerReward::~HPPlayerReward() {
  SharedDtor();
}

void HPPlayerReward::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void HPPlayerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerReward_descriptor_;
}

const HPPlayerReward& HPPlayerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reward_2eproto();
  return *default_instance_;
}

HPPlayerReward* HPPlayerReward::default_instance_ = NULL;

HPPlayerReward* HPPlayerReward::New() const {
  return new HPPlayerReward;
}

void HPPlayerReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::RewardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // optional .RewardInfo rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPPlayerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .RewardInfo rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .RewardInfo rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .RewardInfo rewards = 2;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerReward::MergeFrom(const HPPlayerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::RewardInfo::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerReward::CopyFrom(const HPPlayerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerReward::IsInitialized() const {

  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void HPPlayerReward::Swap(HPPlayerReward* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerReward_descriptor_;
  metadata.reflection = HPPlayerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPFetchGift::kGiftIdFieldNumber;
#endif  // !_MSC_VER

HPFetchGift::HPFetchGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPFetchGift::InitAsDefaultInstance() {
}

HPFetchGift::HPFetchGift(const HPFetchGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPFetchGift::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFetchGift::~HPFetchGift() {
  SharedDtor();
}

void HPFetchGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFetchGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFetchGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFetchGift_descriptor_;
}

const HPFetchGift& HPFetchGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reward_2eproto();
  return *default_instance_;
}

HPFetchGift* HPFetchGift::default_instance_ = NULL;

HPFetchGift* HPFetchGift::New() const {
  return new HPFetchGift;
}

void HPFetchGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giftid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFetchGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 giftId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPFetchGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->giftid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPFetchGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 giftId = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->giftid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPFetchGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFetchGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFetchGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFetchGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFetchGift::MergeFrom(const HPFetchGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFetchGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFetchGift::CopyFrom(const HPFetchGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFetchGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPFetchGift::Swap(HPFetchGift* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFetchGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFetchGift_descriptor_;
  metadata.reflection = HPFetchGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPJPActivityStatusRet::kJPActivityStatusFieldNumber;
#endif  // !_MSC_VER

HPJPActivityStatusRet::HPJPActivityStatusRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPJPActivityStatusRet::InitAsDefaultInstance() {
}

HPJPActivityStatusRet::HPJPActivityStatusRet(const HPJPActivityStatusRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPJPActivityStatusRet::SharedCtor() {
  _cached_size_ = 0;
  jpactivitystatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPJPActivityStatusRet::~HPJPActivityStatusRet() {
  SharedDtor();
}

void HPJPActivityStatusRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPJPActivityStatusRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPJPActivityStatusRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPJPActivityStatusRet_descriptor_;
}

const HPJPActivityStatusRet& HPJPActivityStatusRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reward_2eproto();
  return *default_instance_;
}

HPJPActivityStatusRet* HPJPActivityStatusRet::default_instance_ = NULL;

HPJPActivityStatusRet* HPJPActivityStatusRet::New() const {
  return new HPJPActivityStatusRet;
}

void HPJPActivityStatusRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jpactivitystatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPJPActivityStatusRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jPActivityStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpactivitystatus_)));
          set_has_jpactivitystatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPJPActivityStatusRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jPActivityStatus = 1;
  if (has_jpactivitystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jpactivitystatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPJPActivityStatusRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 jPActivityStatus = 1;
  if (has_jpactivitystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jpactivitystatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPJPActivityStatusRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jPActivityStatus = 1;
    if (has_jpactivitystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jpactivitystatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPJPActivityStatusRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPJPActivityStatusRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPJPActivityStatusRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPJPActivityStatusRet::MergeFrom(const HPJPActivityStatusRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jpactivitystatus()) {
      set_jpactivitystatus(from.jpactivitystatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPJPActivityStatusRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPJPActivityStatusRet::CopyFrom(const HPJPActivityStatusRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPJPActivityStatusRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPJPActivityStatusRet::Swap(HPJPActivityStatusRet* other) {
  if (other != this) {
    std::swap(jpactivitystatus_, other->jpactivitystatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPJPActivityStatusRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPJPActivityStatusRet_descriptor_;
  metadata.reflection = HPJPActivityStatusRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
