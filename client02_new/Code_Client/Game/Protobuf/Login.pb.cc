// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HPLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPLoginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPLoginRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  HPLogin_descriptor_ = file->message_type(0);
  static const int HPLogin_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, puid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, langarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, isrelogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, registed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, isguest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, wallet_),
  };
  HPLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPLogin_descriptor_,
      HPLogin::default_instance_,
      HPLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPLogin));
  HPLoginRet_descriptor_ = file->message_type(1);
  static const int HPLoginRet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, roleitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, isguest_),
  };
  HPLoginRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPLoginRet_descriptor_,
      HPLoginRet::default_instance_,
      HPLoginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPLoginRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPLoginRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPLogin_descriptor_, &HPLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPLoginRet_descriptor_, &HPLoginRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  delete HPLogin::default_instance_;
  delete HPLogin_reflection_;
  delete HPLogin::_default_deviceid_;
  delete HPLogin::_default_platform_;
  delete HPLogin::_default_version_;
  delete HPLogin::_default_passwd_;
  delete HPLoginRet::default_instance_;
  delete HPLoginRet_reflection_;
}

void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\"\354\001\n\007HPLogin\022\014\n\004puid\030\001 \002(\t\022"
    "\023\n\010deviceId\030\002 \002(\t:\0010\022\023\n\010platform\030\003 \002(\t:\001"
    "0\022\026\n\007version\030\004 \001(\t:\0050.0.1\022\r\n\005token\030\005 \001(\t"
    "\022\020\n\010langArea\030\006 \001(\t\022\020\n\010serverId\030\007 \002(\005\022\021\n\t"
    "isReLogin\030\010 \002(\010\022\026\n\006passwd\030\t \001(\t:\006888888\022"
    "\020\n\010registed\030\n \001(\010\022\017\n\007isGuest\030\013 \001(\005\022\020\n\006wa"
    "llet\030\014 \001(\t:\000\"t\n\nHPLoginRet\022\020\n\010playerId\030\001"
    " \002(\005\022\022\n\nroleItemId\030\002 \001(\005\022\021\n\ttimeStamp\030\003 "
    "\002(\005\022\016\n\006status\030\004 \001(\005\022\014\n\004area\030\005 \001(\t\022\017\n\007isG"
    "uest\030\006 \001(\005B\031\n\027com.guaji.game.protocol", 397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  HPLogin::_default_deviceid_ =
      new ::std::string("0", 1);
  HPLogin::_default_platform_ =
      new ::std::string("0", 1);
  HPLogin::_default_version_ =
      new ::std::string("0.0.1", 5);
  HPLogin::_default_passwd_ =
      new ::std::string("888888", 6);
  HPLogin::default_instance_ = new HPLogin();
  HPLoginRet::default_instance_ = new HPLoginRet();
  HPLogin::default_instance_->InitAsDefaultInstance();
  HPLoginRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;

// ===================================================================

::std::string* HPLogin::_default_deviceid_ = NULL;
::std::string* HPLogin::_default_platform_ = NULL;
::std::string* HPLogin::_default_version_ = NULL;
::std::string* HPLogin::_default_passwd_ = NULL;
#ifndef _MSC_VER
const int HPLogin::kPuidFieldNumber;
const int HPLogin::kDeviceIdFieldNumber;
const int HPLogin::kPlatformFieldNumber;
const int HPLogin::kVersionFieldNumber;
const int HPLogin::kTokenFieldNumber;
const int HPLogin::kLangAreaFieldNumber;
const int HPLogin::kServerIdFieldNumber;
const int HPLogin::kIsReLoginFieldNumber;
const int HPLogin::kPasswdFieldNumber;
const int HPLogin::kRegistedFieldNumber;
const int HPLogin::kIsGuestFieldNumber;
const int HPLogin::kWalletFieldNumber;
#endif  // !_MSC_VER

HPLogin::HPLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPLogin::InitAsDefaultInstance() {
}

HPLogin::HPLogin(const HPLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPLogin::SharedCtor() {
  _cached_size_ = 0;
  puid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(_default_deviceid_);
  platform_ = const_cast< ::std::string*>(_default_platform_);
  version_ = const_cast< ::std::string*>(_default_version_);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  langarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  isrelogin_ = false;
  passwd_ = const_cast< ::std::string*>(_default_passwd_);
  registed_ = false;
  isguest_ = 0;
  wallet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPLogin::~HPLogin() {
  SharedDtor();
}

void HPLogin::SharedDtor() {
  if (puid_ != &::google::protobuf::internal::kEmptyString) {
    delete puid_;
  }
  if (deviceid_ != _default_deviceid_) {
    delete deviceid_;
  }
  if (platform_ != _default_platform_) {
    delete platform_;
  }
  if (version_ != _default_version_) {
    delete version_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (langarea_ != &::google::protobuf::internal::kEmptyString) {
    delete langarea_;
  }
  if (passwd_ != _default_passwd_) {
    delete passwd_;
  }
  if (wallet_ != &::google::protobuf::internal::kEmptyString) {
    delete wallet_;
  }
  if (this != default_instance_) {
  }
}

void HPLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPLogin_descriptor_;
}

const HPLogin& HPLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

HPLogin* HPLogin::default_instance_ = NULL;

HPLogin* HPLogin::New() const {
  return new HPLogin;
}

void HPLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_puid()) {
      if (puid_ != &::google::protobuf::internal::kEmptyString) {
        puid_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != _default_deviceid_) {
        deviceid_->assign(*_default_deviceid_);
      }
    }
    if (has_platform()) {
      if (platform_ != _default_platform_) {
        platform_->assign(*_default_platform_);
      }
    }
    if (has_version()) {
      if (version_ != _default_version_) {
        version_->assign(*_default_version_);
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_langarea()) {
      if (langarea_ != &::google::protobuf::internal::kEmptyString) {
        langarea_->clear();
      }
    }
    serverid_ = 0;
    isrelogin_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_passwd()) {
      if (passwd_ != _default_passwd_) {
        passwd_->assign(*_default_passwd_);
      }
    }
    registed_ = false;
    isguest_ = 0;
    if (has_wallet()) {
      if (wallet_ != &::google::protobuf::internal::kEmptyString) {
        wallet_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string puid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_puid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->puid().data(), this->puid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceId;
        break;
      }

      // required string deviceId = 2 [default = "0"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }

      // required string platform = 3 [default = "0"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4 [default = "0.0.1"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_langArea;
        break;
      }

      // optional string langArea = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_langArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_langarea()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->langarea().data(), this->langarea().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverId;
        break;
      }

      // required int32 serverId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isReLogin;
        break;
      }

      // required bool isReLogin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrelogin_)));
          set_has_isrelogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_passwd;
        break;
      }

      // optional string passwd = 9 [default = "888888"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_registed;
        break;
      }

      // optional bool registed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registed_)));
          set_has_registed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isGuest;
        break;
      }

      // optional int32 isGuest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isguest_)));
          set_has_isguest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_wallet;
        break;
      }

      // optional string wallet = 12 [default = ""];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wallet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wallet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wallet().data(), this->wallet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string puid = 1;
  if (has_puid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->puid().data(), this->puid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->puid(), output);
  }

  // required string deviceId = 2 [default = "0"];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // required string platform = 3 [default = "0"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platform(), output);
  }

  // optional string version = 4 [default = "0.0.1"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

  // optional string langArea = 6;
  if (has_langarea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->langarea().data(), this->langarea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->langarea(), output);
  }

  // required int32 serverId = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serverid(), output);
  }

  // required bool isReLogin = 8;
  if (has_isrelogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isrelogin(), output);
  }

  // optional string passwd = 9 [default = "888888"];
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->passwd(), output);
  }

  // optional bool registed = 10;
  if (has_registed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->registed(), output);
  }

  // optional int32 isGuest = 11;
  if (has_isguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isguest(), output);
  }

  // optional string wallet = 12 [default = ""];
  if (has_wallet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wallet().data(), this->wallet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->wallet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string puid = 1;
  if (has_puid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->puid().data(), this->puid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->puid(), target);
  }

  // required string deviceId = 2 [default = "0"];
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // required string platform = 3 [default = "0"];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional string version = 4 [default = "0.0.1"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  // optional string langArea = 6;
  if (has_langarea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->langarea().data(), this->langarea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->langarea(), target);
  }

  // required int32 serverId = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serverid(), target);
  }

  // required bool isReLogin = 8;
  if (has_isrelogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isrelogin(), target);
  }

  // optional string passwd = 9 [default = "888888"];
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->passwd(), target);
  }

  // optional bool registed = 10;
  if (has_registed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->registed(), target);
  }

  // optional int32 isGuest = 11;
  if (has_isguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isguest(), target);
  }

  // optional string wallet = 12 [default = ""];
  if (has_wallet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wallet().data(), this->wallet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->wallet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string puid = 1;
    if (has_puid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->puid());
    }

    // required string deviceId = 2 [default = "0"];
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required string platform = 3 [default = "0"];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string version = 4 [default = "0.0.1"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string langArea = 6;
    if (has_langarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->langarea());
    }

    // required int32 serverId = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required bool isReLogin = 8;
    if (has_isrelogin()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string passwd = 9 [default = "888888"];
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional bool registed = 10;
    if (has_registed()) {
      total_size += 1 + 1;
    }

    // optional int32 isGuest = 11;
    if (has_isguest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isguest());
    }

    // optional string wallet = 12 [default = ""];
    if (has_wallet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wallet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPLogin::MergeFrom(const HPLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_puid()) {
      set_puid(from.puid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_langarea()) {
      set_langarea(from.langarea());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_isrelogin()) {
      set_isrelogin(from.isrelogin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_registed()) {
      set_registed(from.registed());
    }
    if (from.has_isguest()) {
      set_isguest(from.isguest());
    }
    if (from.has_wallet()) {
      set_wallet(from.wallet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPLogin::CopyFrom(const HPLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c7) != 0x000000c7) return false;

  return true;
}

void HPLogin::Swap(HPLogin* other) {
  if (other != this) {
    std::swap(puid_, other->puid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(platform_, other->platform_);
    std::swap(version_, other->version_);
    std::swap(token_, other->token_);
    std::swap(langarea_, other->langarea_);
    std::swap(serverid_, other->serverid_);
    std::swap(isrelogin_, other->isrelogin_);
    std::swap(passwd_, other->passwd_);
    std::swap(registed_, other->registed_);
    std::swap(isguest_, other->isguest_);
    std::swap(wallet_, other->wallet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPLogin_descriptor_;
  metadata.reflection = HPLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPLoginRet::kPlayerIdFieldNumber;
const int HPLoginRet::kRoleItemIdFieldNumber;
const int HPLoginRet::kTimeStampFieldNumber;
const int HPLoginRet::kStatusFieldNumber;
const int HPLoginRet::kAreaFieldNumber;
const int HPLoginRet::kIsGuestFieldNumber;
#endif  // !_MSC_VER

HPLoginRet::HPLoginRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPLoginRet::InitAsDefaultInstance() {
}

HPLoginRet::HPLoginRet(const HPLoginRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPLoginRet::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  roleitemid_ = 0;
  timestamp_ = 0;
  status_ = 0;
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isguest_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPLoginRet::~HPLoginRet() {
  SharedDtor();
}

void HPLoginRet::SharedDtor() {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (this != default_instance_) {
  }
}

void HPLoginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPLoginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPLoginRet_descriptor_;
}

const HPLoginRet& HPLoginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

HPLoginRet* HPLoginRet::default_instance_ = NULL;

HPLoginRet* HPLoginRet::New() const {
  return new HPLoginRet;
}

void HPLoginRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    roleitemid_ = 0;
    timestamp_ = 0;
    status_ = 0;
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::kEmptyString) {
        area_->clear();
      }
    }
    isguest_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPLoginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleItemId;
        break;
      }

      // optional int32 roleItemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleitemid_)));
          set_has_roleitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeStamp;
        break;
      }

      // required int32 timeStamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_area;
        break;
      }

      // optional string area = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area().data(), this->area().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isGuest;
        break;
      }

      // optional int32 isGuest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGuest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isguest_)));
          set_has_isguest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPLoginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional int32 roleItemId = 2;
  if (has_roleitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleitemid(), output);
  }

  // required int32 timeStamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestamp(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional string area = 5;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->area(), output);
  }

  // optional int32 isGuest = 6;
  if (has_isguest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isguest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPLoginRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional int32 roleItemId = 2;
  if (has_roleitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleitemid(), target);
  }

  // required int32 timeStamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestamp(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional string area = 5;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->area(), target);
  }

  // optional int32 isGuest = 6;
  if (has_isguest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isguest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPLoginRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 roleItemId = 2;
    if (has_roleitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleitemid());
    }

    // required int32 timeStamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string area = 5;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area());
    }

    // optional int32 isGuest = 6;
    if (has_isguest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isguest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPLoginRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPLoginRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPLoginRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPLoginRet::MergeFrom(const HPLoginRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_roleitemid()) {
      set_roleitemid(from.roleitemid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_isguest()) {
      set_isguest(from.isguest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPLoginRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPLoginRet::CopyFrom(const HPLoginRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPLoginRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void HPLoginRet::Swap(HPLoginRet* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(roleitemid_, other->roleitemid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(status_, other->status_);
    std::swap(area_, other->area_);
    std::swap(isguest_, other->isguest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPLoginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPLoginRet_descriptor_;
  metadata.reflection = HPLoginRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
