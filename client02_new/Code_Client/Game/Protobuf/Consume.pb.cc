// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Consume.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Consume.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SyncAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPConsumeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPConsumeInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Consume_2eproto() {
  protobuf_AddDesc_Consume_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Consume.proto");
  GOOGLE_CHECK(file != NULL);
  SyncAttrInfo_descriptor_ = file->message_type(0);
  static const int SyncAttrInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, smeltvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, honorvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, reputationvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, crystalvalue_),
  };
  SyncAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncAttrInfo_descriptor_,
      SyncAttrInfo::default_instance_,
      SyncAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncAttrInfo));
  ConsumeItem_descriptor_ = file->message_type(1);
  static const int ConsumeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeItem, count_),
  };
  ConsumeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumeItem_descriptor_,
      ConsumeItem::default_instance_,
      ConsumeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumeItem));
  HPConsumeInfo_descriptor_ = file->message_type(2);
  static const int HPConsumeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPConsumeInfo, attrinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPConsumeInfo, consumeitem_),
  };
  HPConsumeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPConsumeInfo_descriptor_,
      HPConsumeInfo::default_instance_,
      HPConsumeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPConsumeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPConsumeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPConsumeInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Consume_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncAttrInfo_descriptor_, &SyncAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumeItem_descriptor_, &ConsumeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPConsumeInfo_descriptor_, &HPConsumeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Consume_2eproto() {
  delete SyncAttrInfo::default_instance_;
  delete SyncAttrInfo_reflection_;
  delete ConsumeItem::default_instance_;
  delete ConsumeItem_reflection_;
  delete HPConsumeInfo::default_instance_;
  delete HPConsumeInfo_reflection_;
}

void protobuf_AddDesc_Consume_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rConsume.proto\"\305\001\n\014SyncAttrInfo\022\014\n\004gold"
    "\030\001 \001(\005\022\014\n\004coin\030\002 \001(\003\022\r\n\005level\030\003 \001(\005\022\013\n\003e"
    "xp\030\004 \001(\005\022\020\n\010vipLevel\030\005 \001(\005\022\022\n\nsmeltValue"
    "\030\006 \001(\005\022\024\n\014contribution\030\007 \001(\005\022\022\n\nhonorVal"
    "ue\030\010 \001(\005\022\027\n\017reputationValue\030\t \001(\005\022\024\n\014cry"
    "stalValue\030\024 \001(\005\"F\n\013ConsumeItem\022\014\n\004type\030\001"
    " \002(\005\022\n\n\002id\030\002 \002(\003\022\016\n\006itemId\030\003 \002(\005\022\r\n\005coun"
    "t\030\004 \001(\005\"S\n\rHPConsumeInfo\022\037\n\010attrInfo\030\001 \001"
    "(\0132\r.SyncAttrInfo\022!\n\013consumeItem\030\002 \003(\0132\014"
    ".ConsumeItemB\030\n\026com.hawk.game.protocol", 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Consume.proto", &protobuf_RegisterTypes);
  SyncAttrInfo::default_instance_ = new SyncAttrInfo();
  ConsumeItem::default_instance_ = new ConsumeItem();
  HPConsumeInfo::default_instance_ = new HPConsumeInfo();
  SyncAttrInfo::default_instance_->InitAsDefaultInstance();
  ConsumeItem::default_instance_->InitAsDefaultInstance();
  HPConsumeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Consume_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Consume_2eproto {
  StaticDescriptorInitializer_Consume_2eproto() {
    protobuf_AddDesc_Consume_2eproto();
  }
} static_descriptor_initializer_Consume_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SyncAttrInfo::kGoldFieldNumber;
const int SyncAttrInfo::kCoinFieldNumber;
const int SyncAttrInfo::kLevelFieldNumber;
const int SyncAttrInfo::kExpFieldNumber;
const int SyncAttrInfo::kVipLevelFieldNumber;
const int SyncAttrInfo::kSmeltValueFieldNumber;
const int SyncAttrInfo::kContributionFieldNumber;
const int SyncAttrInfo::kHonorValueFieldNumber;
const int SyncAttrInfo::kReputationValueFieldNumber;
const int SyncAttrInfo::kCrystalValueFieldNumber;
#endif  // !_MSC_VER

SyncAttrInfo::SyncAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncAttrInfo::InitAsDefaultInstance() {
}

SyncAttrInfo::SyncAttrInfo(const SyncAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  coin_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  exp_ = 0;
  viplevel_ = 0;
  smeltvalue_ = 0;
  contribution_ = 0;
  honorvalue_ = 0;
  reputationvalue_ = 0;
  crystalvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncAttrInfo::~SyncAttrInfo() {
  SharedDtor();
}

void SyncAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncAttrInfo_descriptor_;
}

const SyncAttrInfo& SyncAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Consume_2eproto();
  return *default_instance_;
}

SyncAttrInfo* SyncAttrInfo::default_instance_ = NULL;

SyncAttrInfo* SyncAttrInfo::New() const {
  return new SyncAttrInfo;
}

void SyncAttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    coin_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    exp_ = 0;
    viplevel_ = 0;
    smeltvalue_ = 0;
    contribution_ = 0;
    honorvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reputationvalue_ = 0;
    crystalvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional int64 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_smeltValue;
        break;
      }

      // optional int32 smeltValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smeltValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smeltvalue_)));
          set_has_smeltvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_contribution;
        break;
      }

      // optional int32 contribution = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_honorValue;
        break;
      }

      // optional int32 honorValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honorValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honorvalue_)));
          set_has_honorvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reputationValue;
        break;
      }

      // optional int32 reputationValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputationValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputationvalue_)));
          set_has_reputationvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_crystalValue;
        break;
      }

      // optional int32 crystalValue = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crystalvalue_)));
          set_has_crystalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->coin(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 vipLevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viplevel(), output);
  }

  // optional int32 smeltValue = 6;
  if (has_smeltvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smeltvalue(), output);
  }

  // optional int32 contribution = 7;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->contribution(), output);
  }

  // optional int32 honorValue = 8;
  if (has_honorvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->honorvalue(), output);
  }

  // optional int32 reputationValue = 9;
  if (has_reputationvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reputationvalue(), output);
  }

  // optional int32 crystalValue = 20;
  if (has_crystalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->crystalvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->coin(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 vipLevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viplevel(), target);
  }

  // optional int32 smeltValue = 6;
  if (has_smeltvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->smeltvalue(), target);
  }

  // optional int32 contribution = 7;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->contribution(), target);
  }

  // optional int32 honorValue = 8;
  if (has_honorvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->honorvalue(), target);
  }

  // optional int32 reputationValue = 9;
  if (has_reputationvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reputationvalue(), target);
  }

  // optional int32 crystalValue = 20;
  if (has_crystalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->crystalvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncAttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int64 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 vipLevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 smeltValue = 6;
    if (has_smeltvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smeltvalue());
    }

    // optional int32 contribution = 7;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribution());
    }

    // optional int32 honorValue = 8;
    if (has_honorvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honorvalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reputationValue = 9;
    if (has_reputationvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputationvalue());
    }

    // optional int32 crystalValue = 20;
    if (has_crystalvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crystalvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncAttrInfo::MergeFrom(const SyncAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_smeltvalue()) {
      set_smeltvalue(from.smeltvalue());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
    if (from.has_honorvalue()) {
      set_honorvalue(from.honorvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reputationvalue()) {
      set_reputationvalue(from.reputationvalue());
    }
    if (from.has_crystalvalue()) {
      set_crystalvalue(from.crystalvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAttrInfo::CopyFrom(const SyncAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAttrInfo::IsInitialized() const {

  return true;
}

void SyncAttrInfo::Swap(SyncAttrInfo* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(coin_, other->coin_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(smeltvalue_, other->smeltvalue_);
    std::swap(contribution_, other->contribution_);
    std::swap(honorvalue_, other->honorvalue_);
    std::swap(reputationvalue_, other->reputationvalue_);
    std::swap(crystalvalue_, other->crystalvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncAttrInfo_descriptor_;
  metadata.reflection = SyncAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeItem::kTypeFieldNumber;
const int ConsumeItem::kIdFieldNumber;
const int ConsumeItem::kItemIdFieldNumber;
const int ConsumeItem::kCountFieldNumber;
#endif  // !_MSC_VER

ConsumeItem::ConsumeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsumeItem::InitAsDefaultInstance() {
}

ConsumeItem::ConsumeItem(const ConsumeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsumeItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  itemid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeItem::~ConsumeItem() {
  SharedDtor();
}

void ConsumeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConsumeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumeItem_descriptor_;
}

const ConsumeItem& ConsumeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Consume_2eproto();
  return *default_instance_;
}

ConsumeItem* ConsumeItem::default_instance_ = NULL;

ConsumeItem* ConsumeItem::New() const {
  return new ConsumeItem;
}

void ConsumeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    itemid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsumeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsumeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsumeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumeItem::MergeFrom(const ConsumeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeItem::CopyFrom(const ConsumeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConsumeItem::Swap(ConsumeItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumeItem_descriptor_;
  metadata.reflection = ConsumeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPConsumeInfo::kAttrInfoFieldNumber;
const int HPConsumeInfo::kConsumeItemFieldNumber;
#endif  // !_MSC_VER

HPConsumeInfo::HPConsumeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPConsumeInfo::InitAsDefaultInstance() {
  attrinfo_ = const_cast< ::SyncAttrInfo*>(&::SyncAttrInfo::default_instance());
}

HPConsumeInfo::HPConsumeInfo(const HPConsumeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPConsumeInfo::SharedCtor() {
  _cached_size_ = 0;
  attrinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPConsumeInfo::~HPConsumeInfo() {
  SharedDtor();
}

void HPConsumeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete attrinfo_;
  }
}

void HPConsumeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPConsumeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPConsumeInfo_descriptor_;
}

const HPConsumeInfo& HPConsumeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Consume_2eproto();
  return *default_instance_;
}

HPConsumeInfo* HPConsumeInfo::default_instance_ = NULL;

HPConsumeInfo* HPConsumeInfo::New() const {
  return new HPConsumeInfo;
}

void HPConsumeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attrinfo()) {
      if (attrinfo_ != NULL) attrinfo_->::SyncAttrInfo::Clear();
    }
  }
  consumeitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPConsumeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SyncAttrInfo attrInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumeItem;
        break;
      }

      // repeated .ConsumeItem consumeItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumeItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumeitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumeItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPConsumeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SyncAttrInfo attrInfo = 1;
  if (has_attrinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrinfo(), output);
  }

  // repeated .ConsumeItem consumeItem = 2;
  for (int i = 0; i < this->consumeitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consumeitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPConsumeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SyncAttrInfo attrInfo = 1;
  if (has_attrinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrinfo(), target);
  }

  // repeated .ConsumeItem consumeItem = 2;
  for (int i = 0; i < this->consumeitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consumeitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPConsumeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SyncAttrInfo attrInfo = 1;
    if (has_attrinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrinfo());
    }

  }
  // repeated .ConsumeItem consumeItem = 2;
  total_size += 1 * this->consumeitem_size();
  for (int i = 0; i < this->consumeitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumeitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPConsumeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPConsumeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPConsumeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPConsumeInfo::MergeFrom(const HPConsumeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumeitem_.MergeFrom(from.consumeitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrinfo()) {
      mutable_attrinfo()->::SyncAttrInfo::MergeFrom(from.attrinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPConsumeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPConsumeInfo::CopyFrom(const HPConsumeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPConsumeInfo::IsInitialized() const {

  for (int i = 0; i < consumeitem_size(); i++) {
    if (!this->consumeitem(i).IsInitialized()) return false;
  }
  return true;
}

void HPConsumeInfo::Swap(HPConsumeInfo* other) {
  if (other != this) {
    std::swap(attrinfo_, other->attrinfo_);
    consumeitem_.Swap(&other->consumeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPConsumeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPConsumeInfo_descriptor_;
  metadata.reflection = HPConsumeInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
