// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSkillInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSkillInfoSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSkillChangeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSkillChangeOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSkillChangeOrderRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSkillChangeOrderRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSkillCarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSkillCarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSkillCarryRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSkillCarryRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSkillInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Skill_2eproto() {
  protobuf_AddDesc_Skill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Skill.proto");
  GOOGLE_CHECK(file != NULL);
  SkillInfo_descriptor_ = file->message_type(0);
  static const int SkillInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, exp_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  HPSkillInfoSync_descriptor_ = file->message_type(1);
  static const int HPSkillInfoSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfoSync, skillinfos_),
  };
  HPSkillInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSkillInfoSync_descriptor_,
      HPSkillInfoSync::default_instance_,
      HPSkillInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSkillInfoSync));
  HPSkillChangeOrder_descriptor_ = file->message_type(2);
  static const int HPSkillChangeOrder_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, srcorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, dstorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, skillbagid_),
  };
  HPSkillChangeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSkillChangeOrder_descriptor_,
      HPSkillChangeOrder::default_instance_,
      HPSkillChangeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSkillChangeOrder));
  HPSkillChangeOrderRet_descriptor_ = file->message_type(3);
  static const int HPSkillChangeOrderRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrderRet, version_),
  };
  HPSkillChangeOrderRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSkillChangeOrderRet_descriptor_,
      HPSkillChangeOrderRet::default_instance_,
      HPSkillChangeOrderRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrderRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillChangeOrderRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSkillChangeOrderRet));
  HPSkillCarry_descriptor_ = file->message_type(4);
  static const int HPSkillCarry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarry, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarry, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarry, skillbagid_),
  };
  HPSkillCarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSkillCarry_descriptor_,
      HPSkillCarry::default_instance_,
      HPSkillCarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSkillCarry));
  HPSkillCarryRet_descriptor_ = file->message_type(5);
  static const int HPSkillCarryRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarryRet, roleid_),
  };
  HPSkillCarryRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSkillCarryRet_descriptor_,
      HPSkillCarryRet::default_instance_,
      HPSkillCarryRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarryRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillCarryRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSkillCarryRet));
  HPSkillInfo_descriptor_ = file->message_type(6);
  static const int HPSkillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfo, skillid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfo, skillid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfo, skillid3_),
  };
  HPSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSkillInfo_descriptor_,
      HPSkillInfo::default_instance_,
      HPSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSkillInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Skill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSkillInfoSync_descriptor_, &HPSkillInfoSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSkillChangeOrder_descriptor_, &HPSkillChangeOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSkillChangeOrderRet_descriptor_, &HPSkillChangeOrderRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSkillCarry_descriptor_, &HPSkillCarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSkillCarryRet_descriptor_, &HPSkillCarryRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSkillInfo_descriptor_, &HPSkillInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Skill_2eproto() {
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete HPSkillInfoSync::default_instance_;
  delete HPSkillInfoSync_reflection_;
  delete HPSkillChangeOrder::default_instance_;
  delete HPSkillChangeOrder_reflection_;
  delete HPSkillChangeOrderRet::default_instance_;
  delete HPSkillChangeOrderRet_reflection_;
  delete HPSkillCarry::default_instance_;
  delete HPSkillCarry_reflection_;
  delete HPSkillCarryRet::default_instance_;
  delete HPSkillCarryRet_reflection_;
  delete HPSkillInfo::default_instance_;
  delete HPSkillInfo_reflection_;
}

void protobuf_AddDesc_Skill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Skill.proto\"h\n\tSkillInfo\022\016\n\006roleId\030\001 \002"
    "(\005\022\n\n\002id\030\002 \002(\005\022\016\n\006itemId\030\003 \002(\005\022\022\n\nskillL"
    "evel\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\013\n\003exp\030\006 \001(\005\""
    "1\n\017HPSkillInfoSync\022\036\n\nskillInfos\030\001 \003(\0132\n"
    ".SkillInfo\"m\n\022HPSkillChangeOrder\022\016\n\006role"
    "Id\030\001 \002(\005\022\017\n\007skillId\030\002 \002(\005\022\020\n\010srcOrder\030\003 "
    "\002(\005\022\020\n\010dstOrder\030\004 \002(\005\022\022\n\nskillBagId\030\005 \002("
    "\005\"+\n\025HPSkillChangeOrderRet\022\022\n\007version\030\001 "
    "\001(\005:\0011\"C\n\014HPSkillCarry\022\016\n\006roleId\030\001 \002(\005\022\017"
    "\n\007skillId\030\002 \003(\005\022\022\n\nskillBagId\030\003 \002(\005\"!\n\017H"
    "PSkillCarryRet\022\016\n\006roleId\030\001 \002(\005\"S\n\013HPSkil"
    "lInfo\022\016\n\006roleId\030\001 \002(\005\022\020\n\010skillId1\030\002 \003(\005\022"
    "\020\n\010skillId2\030\003 \003(\005\022\020\n\010skillId3\030\004 \003(\005B\030\n\026c"
    "om.hawk.game.protocol", 541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Skill.proto", &protobuf_RegisterTypes);
  SkillInfo::default_instance_ = new SkillInfo();
  HPSkillInfoSync::default_instance_ = new HPSkillInfoSync();
  HPSkillChangeOrder::default_instance_ = new HPSkillChangeOrder();
  HPSkillChangeOrderRet::default_instance_ = new HPSkillChangeOrderRet();
  HPSkillCarry::default_instance_ = new HPSkillCarry();
  HPSkillCarryRet::default_instance_ = new HPSkillCarryRet();
  HPSkillInfo::default_instance_ = new HPSkillInfo();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  HPSkillInfoSync::default_instance_->InitAsDefaultInstance();
  HPSkillChangeOrder::default_instance_->InitAsDefaultInstance();
  HPSkillChangeOrderRet::default_instance_->InitAsDefaultInstance();
  HPSkillCarry::default_instance_->InitAsDefaultInstance();
  HPSkillCarryRet::default_instance_->InitAsDefaultInstance();
  HPSkillInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Skill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Skill_2eproto {
  StaticDescriptorInitializer_Skill_2eproto() {
    protobuf_AddDesc_Skill_2eproto();
  }
} static_descriptor_initializer_Skill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kRoleIdFieldNumber;
const int SkillInfo::kIdFieldNumber;
const int SkillInfo::kItemIdFieldNumber;
const int SkillInfo::kSkillLevelFieldNumber;
const int SkillInfo::kStatusFieldNumber;
const int SkillInfo::kExpFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  id_ = 0;
  itemid_ = 0;
  skilllevel_ = 0;
  status_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    id_ = 0;
    itemid_ = 0;
    skilllevel_ = 0;
    status_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillLevel;
        break;
      }

      // optional int32 skillLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 skillLevel = 4;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skilllevel(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 skillLevel = 4;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skilllevel(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 skillLevel = 4;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(status_, other->status_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSkillInfoSync::kSkillInfosFieldNumber;
#endif  // !_MSC_VER

HPSkillInfoSync::HPSkillInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSkillInfoSync::InitAsDefaultInstance() {
}

HPSkillInfoSync::HPSkillInfoSync(const HPSkillInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSkillInfoSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSkillInfoSync::~HPSkillInfoSync() {
  SharedDtor();
}

void HPSkillInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSkillInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSkillInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSkillInfoSync_descriptor_;
}

const HPSkillInfoSync& HPSkillInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

HPSkillInfoSync* HPSkillInfoSync::default_instance_ = NULL;

HPSkillInfoSync* HPSkillInfoSync::New() const {
  return new HPSkillInfoSync;
}

void HPSkillInfoSync::Clear() {
  skillinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSkillInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillInfo skillInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSkillInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SkillInfo skillInfos = 1;
  for (int i = 0; i < this->skillinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSkillInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SkillInfo skillInfos = 1;
  for (int i = 0; i < this->skillinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSkillInfoSync::ByteSize() const {
  int total_size = 0;

  // repeated .SkillInfo skillInfos = 1;
  total_size += 1 * this->skillinfos_size();
  for (int i = 0; i < this->skillinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSkillInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSkillInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSkillInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSkillInfoSync::MergeFrom(const HPSkillInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfos_.MergeFrom(from.skillinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSkillInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSkillInfoSync::CopyFrom(const HPSkillInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSkillInfoSync::IsInitialized() const {

  for (int i = 0; i < skillinfos_size(); i++) {
    if (!this->skillinfos(i).IsInitialized()) return false;
  }
  return true;
}

void HPSkillInfoSync::Swap(HPSkillInfoSync* other) {
  if (other != this) {
    skillinfos_.Swap(&other->skillinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSkillInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSkillInfoSync_descriptor_;
  metadata.reflection = HPSkillInfoSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSkillChangeOrder::kRoleIdFieldNumber;
const int HPSkillChangeOrder::kSkillIdFieldNumber;
const int HPSkillChangeOrder::kSrcOrderFieldNumber;
const int HPSkillChangeOrder::kDstOrderFieldNumber;
const int HPSkillChangeOrder::kSkillBagIdFieldNumber;
#endif  // !_MSC_VER

HPSkillChangeOrder::HPSkillChangeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSkillChangeOrder::InitAsDefaultInstance() {
}

HPSkillChangeOrder::HPSkillChangeOrder(const HPSkillChangeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSkillChangeOrder::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  skillid_ = 0;
  srcorder_ = 0;
  dstorder_ = 0;
  skillbagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSkillChangeOrder::~HPSkillChangeOrder() {
  SharedDtor();
}

void HPSkillChangeOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSkillChangeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSkillChangeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSkillChangeOrder_descriptor_;
}

const HPSkillChangeOrder& HPSkillChangeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

HPSkillChangeOrder* HPSkillChangeOrder::default_instance_ = NULL;

HPSkillChangeOrder* HPSkillChangeOrder::New() const {
  return new HPSkillChangeOrder;
}

void HPSkillChangeOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    skillid_ = 0;
    srcorder_ = 0;
    dstorder_ = 0;
    skillbagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSkillChangeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // required int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_srcOrder;
        break;
      }

      // required int32 srcOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcorder_)));
          set_has_srcorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dstOrder;
        break;
      }

      // required int32 dstOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstorder_)));
          set_has_dstorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillBagId;
        break;
      }

      // required int32 skillBagId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillBagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillbagid_)));
          set_has_skillbagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSkillChangeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required int32 srcOrder = 3;
  if (has_srcorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcorder(), output);
  }

  // required int32 dstOrder = 4;
  if (has_dstorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dstorder(), output);
  }

  // required int32 skillBagId = 5;
  if (has_skillbagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skillbagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSkillChangeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required int32 srcOrder = 3;
  if (has_srcorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcorder(), target);
  }

  // required int32 dstOrder = 4;
  if (has_dstorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dstorder(), target);
  }

  // required int32 skillBagId = 5;
  if (has_skillbagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skillbagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSkillChangeOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 srcOrder = 3;
    if (has_srcorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcorder());
    }

    // required int32 dstOrder = 4;
    if (has_dstorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dstorder());
    }

    // required int32 skillBagId = 5;
    if (has_skillbagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillbagid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSkillChangeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSkillChangeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSkillChangeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSkillChangeOrder::MergeFrom(const HPSkillChangeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_srcorder()) {
      set_srcorder(from.srcorder());
    }
    if (from.has_dstorder()) {
      set_dstorder(from.dstorder());
    }
    if (from.has_skillbagid()) {
      set_skillbagid(from.skillbagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSkillChangeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSkillChangeOrder::CopyFrom(const HPSkillChangeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSkillChangeOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HPSkillChangeOrder::Swap(HPSkillChangeOrder* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(skillid_, other->skillid_);
    std::swap(srcorder_, other->srcorder_);
    std::swap(dstorder_, other->dstorder_);
    std::swap(skillbagid_, other->skillbagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSkillChangeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSkillChangeOrder_descriptor_;
  metadata.reflection = HPSkillChangeOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSkillChangeOrderRet::kVersionFieldNumber;
#endif  // !_MSC_VER

HPSkillChangeOrderRet::HPSkillChangeOrderRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSkillChangeOrderRet::InitAsDefaultInstance() {
}

HPSkillChangeOrderRet::HPSkillChangeOrderRet(const HPSkillChangeOrderRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSkillChangeOrderRet::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSkillChangeOrderRet::~HPSkillChangeOrderRet() {
  SharedDtor();
}

void HPSkillChangeOrderRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSkillChangeOrderRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSkillChangeOrderRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSkillChangeOrderRet_descriptor_;
}

const HPSkillChangeOrderRet& HPSkillChangeOrderRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

HPSkillChangeOrderRet* HPSkillChangeOrderRet::default_instance_ = NULL;

HPSkillChangeOrderRet* HPSkillChangeOrderRet::New() const {
  return new HPSkillChangeOrderRet;
}

void HPSkillChangeOrderRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSkillChangeOrderRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSkillChangeOrderRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSkillChangeOrderRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSkillChangeOrderRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSkillChangeOrderRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSkillChangeOrderRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSkillChangeOrderRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSkillChangeOrderRet::MergeFrom(const HPSkillChangeOrderRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSkillChangeOrderRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSkillChangeOrderRet::CopyFrom(const HPSkillChangeOrderRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSkillChangeOrderRet::IsInitialized() const {

  return true;
}

void HPSkillChangeOrderRet::Swap(HPSkillChangeOrderRet* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSkillChangeOrderRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSkillChangeOrderRet_descriptor_;
  metadata.reflection = HPSkillChangeOrderRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSkillCarry::kRoleIdFieldNumber;
const int HPSkillCarry::kSkillIdFieldNumber;
const int HPSkillCarry::kSkillBagIdFieldNumber;
#endif  // !_MSC_VER

HPSkillCarry::HPSkillCarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSkillCarry::InitAsDefaultInstance() {
}

HPSkillCarry::HPSkillCarry(const HPSkillCarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSkillCarry::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  skillbagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSkillCarry::~HPSkillCarry() {
  SharedDtor();
}

void HPSkillCarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSkillCarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSkillCarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSkillCarry_descriptor_;
}

const HPSkillCarry& HPSkillCarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

HPSkillCarry* HPSkillCarry::default_instance_ = NULL;

HPSkillCarry* HPSkillCarry::New() const {
  return new HPSkillCarry;
}

void HPSkillCarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    skillbagid_ = 0;
  }
  skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSkillCarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // repeated int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        if (input->ExpectTag(24)) goto parse_skillBagId;
        break;
      }

      // required int32 skillBagId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillBagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillbagid_)));
          set_has_skillbagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSkillCarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated int32 skillId = 2;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->skillid(i), output);
  }

  // required int32 skillBagId = 3;
  if (has_skillbagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillbagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSkillCarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated int32 skillId = 2;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->skillid(i), target);
  }

  // required int32 skillBagId = 3;
  if (has_skillbagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillbagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSkillCarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 skillBagId = 3;
    if (has_skillbagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillbagid());
    }

  }
  // repeated int32 skillId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSkillCarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSkillCarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSkillCarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSkillCarry::MergeFrom(const HPSkillCarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_skillbagid()) {
      set_skillbagid(from.skillbagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSkillCarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSkillCarry::CopyFrom(const HPSkillCarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSkillCarry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void HPSkillCarry::Swap(HPSkillCarry* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    skillid_.Swap(&other->skillid_);
    std::swap(skillbagid_, other->skillbagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSkillCarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSkillCarry_descriptor_;
  metadata.reflection = HPSkillCarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSkillCarryRet::kRoleIdFieldNumber;
#endif  // !_MSC_VER

HPSkillCarryRet::HPSkillCarryRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSkillCarryRet::InitAsDefaultInstance() {
}

HPSkillCarryRet::HPSkillCarryRet(const HPSkillCarryRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSkillCarryRet::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSkillCarryRet::~HPSkillCarryRet() {
  SharedDtor();
}

void HPSkillCarryRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSkillCarryRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSkillCarryRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSkillCarryRet_descriptor_;
}

const HPSkillCarryRet& HPSkillCarryRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

HPSkillCarryRet* HPSkillCarryRet::default_instance_ = NULL;

HPSkillCarryRet* HPSkillCarryRet::New() const {
  return new HPSkillCarryRet;
}

void HPSkillCarryRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSkillCarryRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSkillCarryRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSkillCarryRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSkillCarryRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSkillCarryRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSkillCarryRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSkillCarryRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSkillCarryRet::MergeFrom(const HPSkillCarryRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSkillCarryRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSkillCarryRet::CopyFrom(const HPSkillCarryRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSkillCarryRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPSkillCarryRet::Swap(HPSkillCarryRet* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSkillCarryRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSkillCarryRet_descriptor_;
  metadata.reflection = HPSkillCarryRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSkillInfo::kRoleIdFieldNumber;
const int HPSkillInfo::kSkillId1FieldNumber;
const int HPSkillInfo::kSkillId2FieldNumber;
const int HPSkillInfo::kSkillId3FieldNumber;
#endif  // !_MSC_VER

HPSkillInfo::HPSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSkillInfo::InitAsDefaultInstance() {
}

HPSkillInfo::HPSkillInfo(const HPSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSkillInfo::~HPSkillInfo() {
  SharedDtor();
}

void HPSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSkillInfo_descriptor_;
}

const HPSkillInfo& HPSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

HPSkillInfo* HPSkillInfo::default_instance_ = NULL;

HPSkillInfo* HPSkillInfo::New() const {
  return new HPSkillInfo;
}

void HPSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  skillid1_.Clear();
  skillid2_.Clear();
  skillid3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId1;
        break;
      }

      // repeated int32 skillId1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_skillid1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId1;
        if (input->ExpectTag(24)) goto parse_skillId2;
        break;
      }

      // repeated int32 skillId2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skillid2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillId2;
        if (input->ExpectTag(32)) goto parse_skillId3;
        break;
      }

      // repeated int32 skillId3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_skillid3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillId3;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated int32 skillId1 = 2;
  for (int i = 0; i < this->skillid1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->skillid1(i), output);
  }

  // repeated int32 skillId2 = 3;
  for (int i = 0; i < this->skillid2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skillid2(i), output);
  }

  // repeated int32 skillId3 = 4;
  for (int i = 0; i < this->skillid3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->skillid3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated int32 skillId1 = 2;
  for (int i = 0; i < this->skillid1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->skillid1(i), target);
  }

  // repeated int32 skillId2 = 3;
  for (int i = 0; i < this->skillid2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skillid2(i), target);
  }

  // repeated int32 skillId3 = 4;
  for (int i = 0; i < this->skillid3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->skillid3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated int32 skillId1 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid1(i));
    }
    total_size += 1 * this->skillid1_size() + data_size;
  }

  // repeated int32 skillId2 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid2(i));
    }
    total_size += 1 * this->skillid2_size() + data_size;
  }

  // repeated int32 skillId3 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid3(i));
    }
    total_size += 1 * this->skillid3_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSkillInfo::MergeFrom(const HPSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid1_.MergeFrom(from.skillid1_);
  skillid2_.MergeFrom(from.skillid2_);
  skillid3_.MergeFrom(from.skillid3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSkillInfo::CopyFrom(const HPSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPSkillInfo::Swap(HPSkillInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    skillid1_.Swap(&other->skillid1_);
    skillid2_.Swap(&other->skillid2_);
    skillid3_.Swap(&other->skillid3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSkillInfo_descriptor_;
  metadata.reflection = HPSkillInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
