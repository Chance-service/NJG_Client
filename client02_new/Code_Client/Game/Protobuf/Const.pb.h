// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Const.proto

#ifndef PROTOBUF_Const_2eproto__INCLUDED
#define PROTOBUF_Const_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Const_2eproto();
void protobuf_AssignDesc_Const_2eproto();
void protobuf_ShutdownFile_Const_2eproto();


enum itemType {
  PLAYER_ATTR = 1,
  ROLE = 2,
  TOOL = 3,
  EQUIP = 4,
  SKILL = 5,
  ELEMENT = 6,
  SOUL = 7
};
bool itemType_IsValid(int value);
const itemType itemType_MIN = PLAYER_ATTR;
const itemType itemType_MAX = SOUL;
const int itemType_ARRAYSIZE = itemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* itemType_descriptor();
inline const ::std::string& itemType_Name(itemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    itemType_descriptor(), value);
}
inline bool itemType_Parse(
    const ::std::string& name, itemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<itemType>(
    itemType_descriptor(), name, value);
}
enum playerAttr {
  GOLD = 1001,
  COIN = 1002,
  LEVEL = 1003,
  EXP = 1004,
  VIPLEVEL = 1005,
  SMELT_VALUE = 1006,
  CONTRIBUTION = 1007,
  ALLIANCE_EXP = 1008,
  BOSS_TIMES = 1009,
  HONOR_VALUE = 1010,
  REPUTATION_VALUE = 1011,
  ELITE_MAP_TIMES = 1012,
  MULTI_ELITE_SCORE = 1013,
  GOLD_BEAN = 1014,
  CRYSTAL_VALUE = 1020,
  ALLIANCE_VITALITY = 2001,
  FASTFIGHT_TIMES = 9999,
  ROLE_SOUL = 1021
};
bool playerAttr_IsValid(int value);
const playerAttr playerAttr_MIN = GOLD;
const playerAttr playerAttr_MAX = FASTFIGHT_TIMES;
const int playerAttr_ARRAYSIZE = playerAttr_MAX + 1;

const ::google::protobuf::EnumDescriptor* playerAttr_descriptor();
inline const ::std::string& playerAttr_Name(playerAttr value) {
  return ::google::protobuf::internal::NameOfEnum(
    playerAttr_descriptor(), value);
}
inline bool playerAttr_Parse(
    const ::std::string& name, playerAttr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<playerAttr>(
    playerAttr_descriptor(), name, value);
}
enum roleType {
  MAIN_ROLE = 1,
  MERCENARY = 2,
  MONSTER = 3
};
bool roleType_IsValid(int value);
const roleType roleType_MIN = MAIN_ROLE;
const roleType roleType_MAX = MONSTER;
const int roleType_ARRAYSIZE = roleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* roleType_descriptor();
inline const ::std::string& roleType_Name(roleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    roleType_descriptor(), value);
}
inline bool roleType_Parse(
    const ::std::string& name, roleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<roleType>(
    roleType_descriptor(), name, value);
}
enum chatType {
  CHAT_WORLD = 0,
  CHAT_ALLIANCE = 1,
  CHAT_BROADCAST = 2,
  WORLD_BROADCAST = 3,
  CHAT_PERSONAL = 4,
  CHAT_ALLIANCE_SYSTEM = 5,
  CHAT_PERSONAL_SYSTEM = 6
};
bool chatType_IsValid(int value);
const chatType chatType_MIN = CHAT_WORLD;
const chatType chatType_MAX = CHAT_PERSONAL_SYSTEM;
const int chatType_ARRAYSIZE = chatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* chatType_descriptor();
inline const ::std::string& chatType_Name(chatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    chatType_descriptor(), value);
}
inline bool chatType_Parse(
    const ::std::string& name, chatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<chatType>(
    chatType_descriptor(), name, value);
}
enum toolType {
  NORMAL = 0,
  FRAGMENT = 1,
  GEM = 2,
  HAMMER = 3,
  TREASURE = 4,
  KEY = 5,
  ELITE = 6,
  GIFT = 7,
  GEM_PACKAGE = 8,
  WORDS_EXCHANGE_NORMAL = 9,
  WORDS_EXCHANGE_SPECIAL = 10,
  BOSS_CHALLENGE_TIMES = 11,
  LUCK_TREASURE = 12,
  SOUL_STONE = 13,
  ELITE_MAP_BOOK = 14,
  ALLOANCE_VITALITY_PILL = 15,
  GOODS_COMPOUND = 16,
  COMMON_GODLY_EXP = 17,
  REPUTATION_GODLY_EXP = 18,
  SUIT_FRAGMENT = 19,
  EQUIP_EXCHANGE = 20,
  ELEMENT_EXCHANGE = 21,
  HERO_TOKEN = 22,
  FEATHER = 23,
  ELEMENT_FRAGMENT = 24,
  EXPEDITION_ARMORY_ITEM = 25,
  HOUR_PLACENENT_CARD = 26,
  EXP_REEL = 27,
  GEM_VOLUME = 35,
  SUIT_DRAWING = 36,
  RECYCLE_SEVEN_ITEM = 100,
  FASTFIGHT_TIMES_BOOK = 101
};
bool toolType_IsValid(int value);
const toolType toolType_MIN = NORMAL;
const toolType toolType_MAX = FASTFIGHT_TIMES_BOOK;
const int toolType_ARRAYSIZE = toolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* toolType_descriptor();
inline const ::std::string& toolType_Name(toolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    toolType_descriptor(), value);
}
inline bool toolType_Parse(
    const ::std::string& name, toolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<toolType>(
    toolType_descriptor(), name, value);
}
enum equipPart {
  HELMET = 1,
  RING = 2,
  BELT = 3,
  CUIRASS = 4,
  WEAPON1 = 5,
  WEAPON2 = 6,
  LEGGUARD = 7,
  SHOES = 8,
  GLOVE = 9,
  NECKLACE = 10
};
bool equipPart_IsValid(int value);
const equipPart equipPart_MIN = HELMET;
const equipPart equipPart_MAX = NECKLACE;
const int equipPart_ARRAYSIZE = equipPart_MAX + 1;

const ::google::protobuf::EnumDescriptor* equipPart_descriptor();
inline const ::std::string& equipPart_Name(equipPart value) {
  return ::google::protobuf::internal::NameOfEnum(
    equipPart_descriptor(), value);
}
inline bool equipPart_Parse(
    const ::std::string& name, equipPart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<equipPart>(
    equipPart_descriptor(), name, value);
}
enum equipQuality {
  WHITE = 1,
  GREEN = 2,
  BLUE = 3,
  PURPLE = 4,
  ORANGE = 5
};
bool equipQuality_IsValid(int value);
const equipQuality equipQuality_MIN = WHITE;
const equipQuality equipQuality_MAX = ORANGE;
const int equipQuality_ARRAYSIZE = equipQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* equipQuality_descriptor();
inline const ::std::string& equipQuality_Name(equipQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    equipQuality_descriptor(), value);
}
inline bool equipQuality_Parse(
    const ::std::string& name, equipQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<equipQuality>(
    equipQuality_descriptor(), name, value);
}
enum equipAutoSell {
  AUTO_SELL_WHITE = 1,
  AUTO_SELL_GREEN = 2,
  AUTO_SELL_BLUE = 4,
  AUTO_SELL_PURPLE = 8,
  AUTO_SELL_DIFF_PROF = 16
};
bool equipAutoSell_IsValid(int value);
const equipAutoSell equipAutoSell_MIN = AUTO_SELL_WHITE;
const equipAutoSell equipAutoSell_MAX = AUTO_SELL_DIFF_PROF;
const int equipAutoSell_ARRAYSIZE = equipAutoSell_MAX + 1;

const ::google::protobuf::EnumDescriptor* equipAutoSell_descriptor();
inline const ::std::string& equipAutoSell_Name(equipAutoSell value) {
  return ::google::protobuf::internal::NameOfEnum(
    equipAutoSell_descriptor(), value);
}
inline bool equipAutoSell_Parse(
    const ::std::string& name, equipAutoSell* value) {
  return ::google::protobuf::internal::ParseNamedEnum<equipAutoSell>(
    equipAutoSell_descriptor(), name, value);
}
enum elementQuality {
  ELEMENT_WHITE = 1,
  ELEMENT_GREEN = 2,
  ELEMENT_BLUE = 3,
  ELEMENT_PURPLE = 4,
  ELEMENT_ORANGE = 5
};
bool elementQuality_IsValid(int value);
const elementQuality elementQuality_MIN = ELEMENT_WHITE;
const elementQuality elementQuality_MAX = ELEMENT_ORANGE;
const int elementQuality_ARRAYSIZE = elementQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* elementQuality_descriptor();
inline const ::std::string& elementQuality_Name(elementQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    elementQuality_descriptor(), value);
}
inline bool elementQuality_Parse(
    const ::std::string& name, elementQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<elementQuality>(
    elementQuality_descriptor(), name, value);
}
enum elementAutoSell {
  AUTO_SELL_ELEMENT_WHITE = 1,
  AUTO_SELL_ELEMENT_GREEN = 2,
  AUTO_SELL_ELEMENT_BLUE = 4,
  AUTO_SELL_ELEMENT_PURPLE = 8,
  AUTO_SELL_ELEMENT_DIFF_PROF = 16
};
bool elementAutoSell_IsValid(int value);
const elementAutoSell elementAutoSell_MIN = AUTO_SELL_ELEMENT_WHITE;
const elementAutoSell elementAutoSell_MAX = AUTO_SELL_ELEMENT_DIFF_PROF;
const int elementAutoSell_ARRAYSIZE = elementAutoSell_MAX + 1;

const ::google::protobuf::EnumDescriptor* elementAutoSell_descriptor();
inline const ::std::string& elementAutoSell_Name(elementAutoSell value) {
  return ::google::protobuf::internal::NameOfEnum(
    elementAutoSell_descriptor(), value);
}
inline bool elementAutoSell_Parse(
    const ::std::string& name, elementAutoSell* value) {
  return ::google::protobuf::internal::ParseNamedEnum<elementAutoSell>(
    elementAutoSell_descriptor(), name, value);
}
enum prof {
  WARRIOR = 1,
  HUNTER = 2,
  MAGIC = 3,
  MERCENARY_WARRIOR = 1001,
  MERCENARY_HUNTER = 1002,
  MERCENARY_MAGIC = 1003,
  MONSTER_WARRIOR = 2001,
  MONSTER_HUNTER = 2002,
  MONSTER_MAGIC = 2003
};
bool prof_IsValid(int value);
const prof prof_MIN = WARRIOR;
const prof prof_MAX = MONSTER_MAGIC;
const int prof_ARRAYSIZE = prof_MAX + 1;

const ::google::protobuf::EnumDescriptor* prof_descriptor();
inline const ::std::string& prof_Name(prof value) {
  return ::google::protobuf::internal::NameOfEnum(
    prof_descriptor(), value);
}
inline bool prof_Parse(
    const ::std::string& name, prof* value) {
  return ::google::protobuf::internal::ParseNamedEnum<prof>(
    prof_descriptor(), name, value);
}
enum attrCond {
  ALL_EQUIP_INTENSIFY_1 = 1,
  ALL_EQUIP_INTENSIFY_2 = 2,
  ALL_EQUIP_INTENSIFY_3 = 3
};
bool attrCond_IsValid(int value);
const attrCond attrCond_MIN = ALL_EQUIP_INTENSIFY_1;
const attrCond attrCond_MAX = ALL_EQUIP_INTENSIFY_3;
const int attrCond_ARRAYSIZE = attrCond_MAX + 1;

const ::google::protobuf::EnumDescriptor* attrCond_descriptor();
inline const ::std::string& attrCond_Name(attrCond value) {
  return ::google::protobuf::internal::NameOfEnum(
    attrCond_descriptor(), value);
}
inline bool attrCond_Parse(
    const ::std::string& name, attrCond* value) {
  return ::google::protobuf::internal::ParseNamedEnum<attrCond>(
    attrCond_descriptor(), name, value);
}
enum equipAttrGrade {
  PRIMARY_ATTR = 1,
  SECONDARY_ATTR = 2,
  GODLY_ATTR = 3
};
bool equipAttrGrade_IsValid(int value);
const equipAttrGrade equipAttrGrade_MIN = PRIMARY_ATTR;
const equipAttrGrade equipAttrGrade_MAX = GODLY_ATTR;
const int equipAttrGrade_ARRAYSIZE = equipAttrGrade_MAX + 1;

const ::google::protobuf::EnumDescriptor* equipAttrGrade_descriptor();
inline const ::std::string& equipAttrGrade_Name(equipAttrGrade value) {
  return ::google::protobuf::internal::NameOfEnum(
    equipAttrGrade_descriptor(), value);
}
inline bool equipAttrGrade_Parse(
    const ::std::string& name, equipAttrGrade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<equipAttrGrade>(
    equipAttrGrade_descriptor(), name, value);
}
enum attr {
  STRENGHT = 1,
  AGILITY = 2,
  INTELLECT = 3,
  STAMINA = 4,
  HP = 101,
  MP = 102,
  MINDMG = 103,
  MAXDMG = 104,
  ARMOR = 105,
  PHYDEF = 106,
  MAGDEF = 107,
  CRITICAL = 108,
  HIT = 109,
  DODGE = 110,
  RESILIENCE = 111,
  RECOVERMP = 112,
  BUFF_COIN_DROP = 1001,
  BUFF_EXP_DROP = 1002,
  BUFF_EQUIP_DROP = 1003,
  BUFF_MAX_HP = 1004,
  BUFF_AVOID_CONTROL = 1005,
  BUFF_REVERSE_DAMAGE = 1006,
  BUFF_AVOID_ARMOR = 1007,
  BUFF_SUCK_BLOOD = 1008,
  BUFF_RETURN_BLOOD = 1009,
  BUFF_CRITICAL_DAMAGE = 1010,
  BUFF_PHYDEF_ADD = 2001,
  BUFF_MAGDEF_ADD = 2002,
  BUFF_PHYDEF_PENETRATE = 2103,
  BUFF_MAGDEF_PENETRATE = 2104,
  BUFF_CRITICAL_ADD = 2005,
  BUFF_RESILIENCE_ADD = 2006,
  BUFF_DODGE_ADD = 2007,
  BUFF_ARMOR_ADD = 2008,
  BUFF_SKILL_DAMAGE_ADD = 2009,
  BUFF_HIT_ADD = 2010,
  BUFF_WARRIOR = 3001,
  BUFF_HUNTER = 3002,
  BUFF_MAGE = 3003,
  ICE_ATTACK = 4001,
  ICE_DEFENCE = 4002,
  FIRE_ATTACK = 4003,
  FIRE_DEFENCE = 4004,
  THUNDER_ATTACK = 4005,
  THUNDER_DENFENCE = 4006,
  ICE_ATTACK_RATIO = 4007,
  ICE_DEFENCE_RATIO = 4008,
  FIRE_ATTACK_RATIO = 4009,
  FIRE_DEFENCE_RATIO = 4010,
  THUNDER_ATTACK_RATIO = 4011,
  THUNDER_DENFENCE_RATIO = 4012
};
bool attr_IsValid(int value);
const attr attr_MIN = STRENGHT;
const attr attr_MAX = THUNDER_DENFENCE_RATIO;
const int attr_ARRAYSIZE = attr_MAX + 1;

const ::google::protobuf::EnumDescriptor* attr_descriptor();
inline const ::std::string& attr_Name(attr value) {
  return ::google::protobuf::internal::NameOfEnum(
    attr_descriptor(), value);
}
inline bool attr_Parse(
    const ::std::string& name, attr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<attr>(
    attr_descriptor(), name, value);
}
enum Buff {
  DIZZINESS = 1,
  FROST = 2,
  SILENCE = 3,
  BLIND = 4,
  GUARD = 5,
  INSPIRE = 6,
  WEAKNESS = 7,
  RAGE = 8,
  POISON = 9,
  ARMOUR = 10,
  BURN = 11,
  BEEN_FROZEN = 12,
  BLEED = 13,
  MAGIC_ATTACK = 14,
  ADDITION_DMG = 15,
  CLOAKING = 16,
  MAGIC_SHIELD = 17,
  SUPPLY_ENERGY = 18,
  SNEER = 19,
  RECKLESS = 20,
  MARK = 21,
  SPELL_WARD = 22,
  BARRIER = 23,
  MISS = 24,
  HEMORRHAGE = 25,
  RAGE_DAMAGE = 100,
  WARRIOR_BUFF = 101,
  HUNTER_BUFF = 102,
  MAGIC_BUFF = 103
};
bool Buff_IsValid(int value);
const Buff Buff_MIN = DIZZINESS;
const Buff Buff_MAX = MAGIC_BUFF;
const int Buff_ARRAYSIZE = Buff_MAX + 1;

const ::google::protobuf::EnumDescriptor* Buff_descriptor();
inline const ::std::string& Buff_Name(Buff value) {
  return ::google::protobuf::internal::NameOfEnum(
    Buff_descriptor(), value);
}
inline bool Buff_Parse(
    const ::std::string& name, Buff* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Buff>(
    Buff_descriptor(), name, value);
}
enum changeType {
  CHANGE_GOLD = 1,
  CHANGE_COIN = 2,
  CHANGE_EXP = 3,
  CHANGE_LEVEL = 4,
  CHANGE_RECHARGE = 5,
  CHANGE_VIPLEVEL = 6,
  CHANGE_ROLE = 7,
  CHANGE_TOOLS = 8,
  CHANGE_EQUIP = 9,
  CHANGE_SMELT_VALUE = 10,
  CHANGE_CONTRIBUTION = 11,
  CHANGE_HONOR_VALUE = 12,
  CHANGE_REPUTATION_VALUE = 13,
  CHANGE_ELEMENT = 14,
  CHANGE_CRYSTAL = 20
};
bool changeType_IsValid(int value);
const changeType changeType_MIN = CHANGE_GOLD;
const changeType changeType_MAX = CHANGE_CRYSTAL;
const int changeType_ARRAYSIZE = changeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* changeType_descriptor();
inline const ::std::string& changeType_Name(changeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    changeType_descriptor(), value);
}
inline bool changeType_Parse(
    const ::std::string& name, changeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<changeType>(
    changeType_descriptor(), name, value);
}
enum buyMoneyType {
  MONEY_GOLD = 1,
  MONEY_COIN = 2
};
bool buyMoneyType_IsValid(int value);
const buyMoneyType buyMoneyType_MIN = MONEY_GOLD;
const buyMoneyType buyMoneyType_MAX = MONEY_COIN;
const int buyMoneyType_ARRAYSIZE = buyMoneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* buyMoneyType_descriptor();
inline const ::std::string& buyMoneyType_Name(buyMoneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    buyMoneyType_descriptor(), value);
}
inline bool buyMoneyType_Parse(
    const ::std::string& name, buyMoneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<buyMoneyType>(
    buyMoneyType_descriptor(), name, value);
}
enum shootType {
  PRIMARY = 1,
  INTERMEDIATE = 2,
  ADVANCED = 3
};
bool shootType_IsValid(int value);
const shootType shootType_MIN = PRIMARY;
const shootType shootType_MAX = ADVANCED;
const int shootType_ARRAYSIZE = shootType_MAX + 1;

const ::google::protobuf::EnumDescriptor* shootType_descriptor();
inline const ::std::string& shootType_Name(shootType value) {
  return ::google::protobuf::internal::NameOfEnum(
    shootType_descriptor(), value);
}
inline bool shootType_Parse(
    const ::std::string& name, shootType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<shootType>(
    shootType_descriptor(), name, value);
}
enum shootFreeType {
  SHOOT_FREE = 1,
  SHOOT_GOLD = 2
};
bool shootFreeType_IsValid(int value);
const shootFreeType shootFreeType_MIN = SHOOT_FREE;
const shootFreeType shootFreeType_MAX = SHOOT_GOLD;
const int shootFreeType_ARRAYSIZE = shootFreeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* shootFreeType_descriptor();
inline const ::std::string& shootFreeType_Name(shootFreeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    shootFreeType_descriptor(), value);
}
inline bool shootFreeType_Parse(
    const ::std::string& name, shootFreeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<shootFreeType>(
    shootFreeType_descriptor(), name, value);
}
enum shootRewardState {
  SHOOT_A = 1,
  SHOOT_B = 2
};
bool shootRewardState_IsValid(int value);
const shootRewardState shootRewardState_MIN = SHOOT_A;
const shootRewardState shootRewardState_MAX = SHOOT_B;
const int shootRewardState_ARRAYSIZE = shootRewardState_MAX + 1;

const ::google::protobuf::EnumDescriptor* shootRewardState_descriptor();
inline const ::std::string& shootRewardState_Name(shootRewardState value) {
  return ::google::protobuf::internal::NameOfEnum(
    shootRewardState_descriptor(), value);
}
inline bool shootRewardState_Parse(
    const ::std::string& name, shootRewardState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<shootRewardState>(
    shootRewardState_descriptor(), name, value);
}
enum equipStatus {
  EQUIP_FREE = 0,
  EQUIP_MAIN_ROLE = 1,
  EQUIP_MERCENARY = 2
};
bool equipStatus_IsValid(int value);
const equipStatus equipStatus_MIN = EQUIP_FREE;
const equipStatus equipStatus_MAX = EQUIP_MERCENARY;
const int equipStatus_ARRAYSIZE = equipStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* equipStatus_descriptor();
inline const ::std::string& equipStatus_Name(equipStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    equipStatus_descriptor(), value);
}
inline bool equipStatus_Parse(
    const ::std::string& name, equipStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<equipStatus>(
    equipStatus_descriptor(), name, value);
}
enum monsterType {
  DOGFACE = 1,
  BOSS = 2,
  ROBOT = 3
};
bool monsterType_IsValid(int value);
const monsterType monsterType_MIN = DOGFACE;
const monsterType monsterType_MAX = ROBOT;
const int monsterType_ARRAYSIZE = monsterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* monsterType_descriptor();
inline const ::std::string& monsterType_Name(monsterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    monsterType_descriptor(), value);
}
inline bool monsterType_Parse(
    const ::std::string& name, monsterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<monsterType>(
    monsterType_descriptor(), name, value);
}
enum RoleStatus {
  FIGHTING_1 = 1,
  FIGHTING_2 = 2,
  RESTTING = 3,
  EXPEDITION = 4
};
bool RoleStatus_IsValid(int value);
const RoleStatus RoleStatus_MIN = FIGHTING_1;
const RoleStatus RoleStatus_MAX = EXPEDITION;
const int RoleStatus_ARRAYSIZE = RoleStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleStatus_descriptor();
inline const ::std::string& RoleStatus_Name(RoleStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleStatus_descriptor(), value);
}
inline bool RoleStatus_Parse(
    const ::std::string& name, RoleStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleStatus>(
    RoleStatus_descriptor(), name, value);
}
enum NoticeType {
  NEW_MAIL = 1,
  NEW_MSG = 2,
  GIFT_NEW_MSG = 3,
  ALLIANCE_BOSS_OPEN = 4,
  TEAM_BATTLE_SIGNUP = 5,
  ARENA_ALL_SIGNUP = 6,
  MULTI_ELITE_AVALIABLE = 7,
  ACHIEVEMENT_POINT = 8
};
bool NoticeType_IsValid(int value);
const NoticeType NoticeType_MIN = NEW_MAIL;
const NoticeType NoticeType_MAX = ACHIEVEMENT_POINT;
const int NoticeType_ARRAYSIZE = NoticeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoticeType_descriptor();
inline const ::std::string& NoticeType_Name(NoticeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoticeType_descriptor(), value);
}
inline bool NoticeType_Parse(
    const ::std::string& name, NoticeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoticeType>(
    NoticeType_descriptor(), name, value);
}
enum OpenLevelType {
  ALLIANCE_OPEN_LEVEL = 12
};
bool OpenLevelType_IsValid(int value);
const OpenLevelType OpenLevelType_MIN = ALLIANCE_OPEN_LEVEL;
const OpenLevelType OpenLevelType_MAX = ALLIANCE_OPEN_LEVEL;
const int OpenLevelType_ARRAYSIZE = OpenLevelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenLevelType_descriptor();
inline const ::std::string& OpenLevelType_Name(OpenLevelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenLevelType_descriptor(), value);
}
inline bool OpenLevelType_Parse(
    const ::std::string& name, OpenLevelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenLevelType>(
    OpenLevelType_descriptor(), name, value);
}
enum kickReason {
  DUPLICATE_LOGIN = 1,
  SERVER_SHUTDOWN = 2,
  LOGIN_FORBIDEN = 3,
  KICKED_OUT = 4,
  SERVER_RESTART = 5
};
bool kickReason_IsValid(int value);
const kickReason kickReason_MIN = DUPLICATE_LOGIN;
const kickReason kickReason_MAX = SERVER_RESTART;
const int kickReason_ARRAYSIZE = kickReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* kickReason_descriptor();
inline const ::std::string& kickReason_Name(kickReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    kickReason_descriptor(), value);
}
inline bool kickReason_Parse(
    const ::std::string& name, kickReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<kickReason>(
    kickReason_descriptor(), name, value);
}
enum ActivityId {
  MONTH_CARD = 83,
  ACCUMULATIVE_RECHARGE = 2,
  CONTINUE_RECHARGE = 3,
  RECHARGE_RATIO = 4,
  WECHAT = 5,
  ACCUMULATIVE_CONSUME = 6,
  WORDS_EXCHANGE = 7,
  MAP_DROP_REWARD = 8,
  DOUBLE_RECHARGE = 9,
  HOLIDAY_TREASURE = 10,
  BETA_TEST_WORDS = 11,
  COINS_MAP_DROP_RATIO = 12,
  EXP_MAP_DROP_RATIO = 13,
  ARENA_REWARD_RATIO = 14,
  EQUIP_MAP_DROP_RATIO = 15,
  QUICK_REWARD_RATIO = 16,
  SMELT_VALUE_RATIO = 17,
  EQUIP_SELL_RATIO = 18,
  QUICK_COST_RATIO = 19,
  REGISTER_CYCLE = 20,
  SINGLE_RECHARGE = 21,
  RECHARGE_REBATE = 22,
  VIP_WELFARE = 23,
  WEEK_CARD = 24,
  EXPEDITION_ARMORY = 25,
  TIME_LIMIT_PURCHASE = 26,
  ACCUMULATIVE_LOGIN = 27,
  RECHARGE_REBATE2 = 28,
  GEM_COMPOUND = 29,
  CRAZY_ROULETTE = 30,
  LUCK_BOX = 31,
  STAR_EVALUATION = 32,
  FRIEND_INVITE = 33,
  TAXI_CODE = 34,
  SNOWFIELD_TREASURE = 35,
  TREASURE_RAIDER = 36,
  COMMENDATION_TRIBE = 37,
  FORTUNE = 38,
  SHOP_REFRESH_PRICE_RATIO = 39,
  FIND_TREASURE = 40,
  GOLD_CLUB = 41,
  GRAB_RED_ENVELOPE = 42,
  CHAT_LUCK = 43,
  RANK_GIFT = 44,
  FOREVER_CARD = 45,
  SALE_PACKET = 82,
  HOUR_CARD = 51,
  FIRST_GIFTPACK = 84,
  MYSTERY_SHOP = 81,
  HERO_TOKEN_SHOP = 82,
  LIMIT_RECHARGE = 85,
  EXCHANGE_DOUBLE_SEVEN = 86,
  DAILY_QUEST = 87,
  GOLD_FISH = 88,
  GODEQUIP_FORGING = 89,
  SHOOT_ACTIVITY = 90,
  PRINCE_DEVILS = 91
};
bool ActivityId_IsValid(int value);
const ActivityId ActivityId_MIN = ACCUMULATIVE_RECHARGE;
const ActivityId ActivityId_MAX = PRINCE_DEVILS;
const int ActivityId_ARRAYSIZE = ActivityId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityId_descriptor();
inline const ::std::string& ActivityId_Name(ActivityId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityId_descriptor(), value);
}
inline bool ActivityId_Parse(
    const ::std::string& name, ActivityId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityId>(
    ActivityId_descriptor(), name, value);
}
enum FriendChatMsgType {
  LEAVE_MSG = 0,
  SYSTEM_MSG = 2,
  PLAYER_MSG = 3
};
bool FriendChatMsgType_IsValid(int value);
const FriendChatMsgType FriendChatMsgType_MIN = LEAVE_MSG;
const FriendChatMsgType FriendChatMsgType_MAX = PLAYER_MSG;
const int FriendChatMsgType_ARRAYSIZE = FriendChatMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendChatMsgType_descriptor();
inline const ::std::string& FriendChatMsgType_Name(FriendChatMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendChatMsgType_descriptor(), value);
}
inline bool FriendChatMsgType_Parse(
    const ::std::string& name, FriendChatMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendChatMsgType>(
    FriendChatMsgType_descriptor(), name, value);
}
enum notifyType {
  NOTIFY_RECHARGE = 1
};
bool notifyType_IsValid(int value);
const notifyType notifyType_MIN = NOTIFY_RECHARGE;
const notifyType notifyType_MAX = NOTIFY_RECHARGE;
const int notifyType_ARRAYSIZE = notifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* notifyType_descriptor();
inline const ::std::string& notifyType_Name(notifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    notifyType_descriptor(), value);
}
inline bool notifyType_Parse(
    const ::std::string& name, notifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<notifyType>(
    notifyType_descriptor(), name, value);
}
enum dailyRefreshType {
  SHOP_ITEM_REFRESH = 1,
  ALLIANCE_SIGN = 2,
  EQUIP_CREATE_REFRESH = 3,
  ARENA_CHALLENGE = 4,
  FAST_FIGHT = 5,
  BOSS_FIGHT = 6,
  ELITE_MAP = 7,
  STAR_STONE = 8,
  ROLE_RING_LVLUP = 9,
  FB_FRIEND_ASKTICK = 10,
  MYSTERY_SHOP_ITEM_REFRESH = 11,
  SHOP_ITEM_REFRESH_2 = 102,
  SHOP_ITEM_REFRESH_3 = 103,
  SHOP_ITEM_REFRESH_4 = 104,
  CRYSTAL_SHOP_ITEM_REFRESH = 111,
  CRYSTAL_SHOP_ITEM_REFRESH_2 = 112,
  CRYSTAL_SHOP_ITEM_REFRESH_3 = 113,
  CRYSTAL_SHOP_ITEM_REFRESH_4 = 114
};
bool dailyRefreshType_IsValid(int value);
const dailyRefreshType dailyRefreshType_MIN = SHOP_ITEM_REFRESH;
const dailyRefreshType dailyRefreshType_MAX = CRYSTAL_SHOP_ITEM_REFRESH_4;
const int dailyRefreshType_ARRAYSIZE = dailyRefreshType_MAX + 1;

const ::google::protobuf::EnumDescriptor* dailyRefreshType_descriptor();
inline const ::std::string& dailyRefreshType_Name(dailyRefreshType value) {
  return ::google::protobuf::internal::NameOfEnum(
    dailyRefreshType_descriptor(), value);
}
inline bool dailyRefreshType_Parse(
    const ::std::string& name, dailyRefreshType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dailyRefreshType>(
    dailyRefreshType_descriptor(), name, value);
}
enum QuestState {
  UNACTIVE = 0,
  ING = 1,
  FINISHED = 2,
  REWARD = 3
};
bool QuestState_IsValid(int value);
const QuestState QuestState_MIN = UNACTIVE;
const QuestState QuestState_MAX = REWARD;
const int QuestState_ARRAYSIZE = QuestState_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestState_descriptor();
inline const ::std::string& QuestState_Name(QuestState value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestState_descriptor(), value);
}
inline bool QuestState_Parse(
    const ::std::string& name, QuestState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestState>(
    QuestState_descriptor(), name, value);
}
enum QuestStep {
  FIRST = 1,
  SECOND = 2,
  THIRD = 3,
  FOURTH = 4,
  FIFTH = 5,
  SIXTH = 6,
  SEVENTH = 7,
  EIGHTH = 8,
  NINTH = 9,
  TENTH = 10,
  ELEVENTH = 11
};
bool QuestStep_IsValid(int value);
const QuestStep QuestStep_MIN = FIRST;
const QuestStep QuestStep_MAX = ELEVENTH;
const int QuestStep_ARRAYSIZE = QuestStep_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestStep_descriptor();
inline const ::std::string& QuestStep_Name(QuestStep value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestStep_descriptor(), value);
}
inline bool QuestStep_Parse(
    const ::std::string& name, QuestStep* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestStep>(
    QuestStep_descriptor(), name, value);
}
enum QuestEventType {
  KILL_BOSS = 1,
  ADD_FRIEND = 2,
  JOIN_ALLIANCE = 3,
  MODIFY_SIN = 4,
  MAKE_EQUIP = 5,
  QUICK_BATTLE = 6,
  SMELT_EQUIP = 7,
  WORLD_SPEAK = 8,
  ARENA_BATTLE = 9,
  HERO_FOSTER = 10,
  ELITE_STATE = 11,
  GU_BAO_SHAN = 12,
  JI_LIU_GU = 13,
  MO_HUA_RU_QIN = 14,
  DUO_REN_FU_BEN = 15,
  GONG_HUI_ZHENG_BA = 16,
  GONG_HUI_BOSS = 17,
  HERO_LEVEL = 18,
  GEM_LEVEL = 19,
  EQUIP_ENHANCE_LEVEL = 20,
  COMMON_GOD_EQUIP_LEVEL = 21,
  HOUNOR_GOD_EQUIP_LEVEL = 22,
  SKILL_ENHANCE_LEVEL = 23,
  MAIN_ROLE_LEVEL = 24,
  TOTAL_LOGIN_TIMES = 25,
  EQUIP_ENHANCE_TIMES = 26,
  CROSS_MISSION_NUMBER = 27,
  FIGHT_POINT_UP = 28,
  EQUIP_ENHANCE_ALL_LEVEL = 29,
  HERO_EXPEND_TIMES = 30,
  HOUNOR_MAKE_TIMES = 31,
  BAPTIZE_EQUIP_TIMES = 32,
  SMELT_EQUIP_COUNT = 33,
  COMMON_GOD_EQUIP_SWALLOW_TIMES = 34,
  HOUNOR_GOD_EQUIP_WALLOW_TIMES = 35,
  GOD_EQUIP_COMPOUND_TIMES = 36,
  GOD_EQUIP_EXTEND_TIMES = 37,
  GEM_DRESS_TIMES = 38,
  COMMON_SHOP_BUY_TIMES = 39,
  SUIT_FRAGMENT_TIMES = 40,
  SUIT_DECOMPOSE_TIMES = 41,
  EXCHANGE_CRYSTAL_TIMES = 42,
  JING_JI_CHANG_TIMES = 43,
  VIP_LEVEL_UP = 44,
  JING_JI_CHANG_RANK = 45,
  E_MO_RU_QIN_RANK = 46,
  CROSS_MISSION_TIMES = 47,
  TOTAL_GAIN_COIN_COUNT = 48,
  HERO_COUNT = 49,
  DRESS_COMMON_GOD_EQUIP_STAR_LEVEL = 50,
  DRESS_HOUNOR_GOD_EQUIP_STAR_LEVEL = 51,
  DRESS_R_SUIT_COUNT = 52,
  DRESS_SR_SUIT_COUNT = 53,
  DRESS_SSR_SUIT_COUNT = 54,
  DRESS_UR_SUIT_COUNT = 55,
  PURPLE_HERO_COUNT = 56,
  GOLD_HERO_COUNT = 57,
  E_MO_RU_QIN_LAST_ATTACK_COUNT = 58
};
bool QuestEventType_IsValid(int value);
const QuestEventType QuestEventType_MIN = KILL_BOSS;
const QuestEventType QuestEventType_MAX = E_MO_RU_QIN_LAST_ATTACK_COUNT;
const int QuestEventType_ARRAYSIZE = QuestEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestEventType_descriptor();
inline const ::std::string& QuestEventType_Name(QuestEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestEventType_descriptor(), value);
}
inline bool QuestEventType_Parse(
    const ::std::string& name, QuestEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestEventType>(
    QuestEventType_descriptor(), name, value);
}
enum QuestType {
  COUNT = 1,
  STATEFUL = 2,
  LESS_THAN_COUNT = 3,
  LESS_THAN_STATEFUL = 4
};
bool QuestType_IsValid(int value);
const QuestType QuestType_MIN = COUNT;
const QuestType QuestType_MAX = LESS_THAN_STATEFUL;
const int QuestType_ARRAYSIZE = QuestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestType_descriptor();
inline const ::std::string& QuestType_Name(QuestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestType_descriptor(), value);
}
inline bool QuestType_Parse(
    const ::std::string& name, QuestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestType>(
    QuestType_descriptor(), name, value);
}
enum YaYaMsgType {
  GET_TYPE = 1,
  PUSH_TYPE = 2
};
bool YaYaMsgType_IsValid(int value);
const YaYaMsgType YaYaMsgType_MIN = GET_TYPE;
const YaYaMsgType YaYaMsgType_MAX = PUSH_TYPE;
const int YaYaMsgType_ARRAYSIZE = YaYaMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaYaMsgType_descriptor();
inline const ::std::string& YaYaMsgType_Name(YaYaMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaYaMsgType_descriptor(), value);
}
inline bool YaYaMsgType_Parse(
    const ::std::string& name, YaYaMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaYaMsgType>(
    YaYaMsgType_descriptor(), name, value);
}
enum ElementType {
  ALL = 1,
  ICE = 2,
  FIRE = 3,
  THUNDER = 4
};
bool ElementType_IsValid(int value);
const ElementType ElementType_MIN = ALL;
const ElementType ElementType_MAX = THUNDER;
const int ElementType_ARRAYSIZE = ElementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElementType_descriptor();
inline const ::std::string& ElementType_Name(ElementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElementType_descriptor(), value);
}
inline bool ElementType_Parse(
    const ::std::string& name, ElementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElementType>(
    ElementType_descriptor(), name, value);
}
enum HeroTokenMsgType {
  CONSUME_ITEM = 1,
  GET_TASK = 2
};
bool HeroTokenMsgType_IsValid(int value);
const HeroTokenMsgType HeroTokenMsgType_MIN = CONSUME_ITEM;
const HeroTokenMsgType HeroTokenMsgType_MAX = GET_TASK;
const int HeroTokenMsgType_ARRAYSIZE = HeroTokenMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroTokenMsgType_descriptor();
inline const ::std::string& HeroTokenMsgType_Name(HeroTokenMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroTokenMsgType_descriptor(), value);
}
inline bool HeroTokenMsgType_Parse(
    const ::std::string& name, HeroTokenMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroTokenMsgType>(
    HeroTokenMsgType_descriptor(), name, value);
}
enum RankType {
  WING_WHITE_TIME_RANK = 1,
  WING_GREEN_TIME_RANK = 2,
  WING_BLUE_TIME_RANK = 3,
  WING_PURPLE_TIME_RANK = 4,
  WING_ORANGE_TIME_RANK = 5
};
bool RankType_IsValid(int value);
const RankType RankType_MIN = WING_WHITE_TIME_RANK;
const RankType RankType_MAX = WING_ORANGE_TIME_RANK;
const int RankType_ARRAYSIZE = RankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankType_descriptor();
inline const ::std::string& RankType_Name(RankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankType_descriptor(), value);
}
inline bool RankType_Parse(
    const ::std::string& name, RankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankType>(
    RankType_descriptor(), name, value);
}
enum WingsConstant {
  MAX_LUCKY_NUM = 100,
  WINGS_OPEN_LEVEL = 40
};
bool WingsConstant_IsValid(int value);
const WingsConstant WingsConstant_MIN = WINGS_OPEN_LEVEL;
const WingsConstant WingsConstant_MAX = MAX_LUCKY_NUM;
const int WingsConstant_ARRAYSIZE = WingsConstant_MAX + 1;

const ::google::protobuf::EnumDescriptor* WingsConstant_descriptor();
inline const ::std::string& WingsConstant_Name(WingsConstant value) {
  return ::google::protobuf::internal::NameOfEnum(
    WingsConstant_descriptor(), value);
}
inline bool WingsConstant_Parse(
    const ::std::string& name, WingsConstant* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WingsConstant>(
    WingsConstant_descriptor(), name, value);
}
enum BattleUseItemType {
  NONE = 0,
  USE_ITEM = 1
};
bool BattleUseItemType_IsValid(int value);
const BattleUseItemType BattleUseItemType_MIN = NONE;
const BattleUseItemType BattleUseItemType_MAX = USE_ITEM;
const int BattleUseItemType_ARRAYSIZE = BattleUseItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleUseItemType_descriptor();
inline const ::std::string& BattleUseItemType_Name(BattleUseItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleUseItemType_descriptor(), value);
}
inline bool BattleUseItemType_Parse(
    const ::std::string& name, BattleUseItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleUseItemType>(
    BattleUseItemType_descriptor(), name, value);
}
enum GemShopBuy {
  GOLDBUY = 1,
  GEMVOLUMEBUY = 2
};
bool GemShopBuy_IsValid(int value);
const GemShopBuy GemShopBuy_MIN = GOLDBUY;
const GemShopBuy GemShopBuy_MAX = GEMVOLUMEBUY;
const int GemShopBuy_ARRAYSIZE = GemShopBuy_MAX + 1;

const ::google::protobuf::EnumDescriptor* GemShopBuy_descriptor();
inline const ::std::string& GemShopBuy_Name(GemShopBuy value) {
  return ::google::protobuf::internal::NameOfEnum(
    GemShopBuy_descriptor(), value);
}
inline bool GemShopBuy_Parse(
    const ::std::string& name, GemShopBuy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GemShopBuy>(
    GemShopBuy_descriptor(), name, value);
}
enum AllianCheckButton {
  CHECK_BUTTON_TYPE_1 = 0,
  CHECK_BUTTON_TYPE_2 = 1
};
bool AllianCheckButton_IsValid(int value);
const AllianCheckButton AllianCheckButton_MIN = CHECK_BUTTON_TYPE_1;
const AllianCheckButton AllianCheckButton_MAX = CHECK_BUTTON_TYPE_2;
const int AllianCheckButton_ARRAYSIZE = AllianCheckButton_MAX + 1;

const ::google::protobuf::EnumDescriptor* AllianCheckButton_descriptor();
inline const ::std::string& AllianCheckButton_Name(AllianCheckButton value) {
  return ::google::protobuf::internal::NameOfEnum(
    AllianCheckButton_descriptor(), value);
}
inline bool AllianCheckButton_Parse(
    const ::std::string& name, AllianCheckButton* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AllianCheckButton>(
    AllianCheckButton_descriptor(), name, value);
}
enum ApplyState {
  APPLY_STATE_1 = 1,
  APPLY_STATE_2 = 2
};
bool ApplyState_IsValid(int value);
const ApplyState ApplyState_MIN = APPLY_STATE_1;
const ApplyState ApplyState_MAX = APPLY_STATE_2;
const int ApplyState_ARRAYSIZE = ApplyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplyState_descriptor();
inline const ::std::string& ApplyState_Name(ApplyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplyState_descriptor(), value);
}
inline bool ApplyState_Parse(
    const ::std::string& name, ApplyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplyState>(
    ApplyState_descriptor(), name, value);
}
enum AllianOperState {
  Refused_TYPE_2 = 0,
  APPROVAL_TYPE_1 = 1
};
bool AllianOperState_IsValid(int value);
const AllianOperState AllianOperState_MIN = Refused_TYPE_2;
const AllianOperState AllianOperState_MAX = APPROVAL_TYPE_1;
const int AllianOperState_ARRAYSIZE = AllianOperState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AllianOperState_descriptor();
inline const ::std::string& AllianOperState_Name(AllianOperState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AllianOperState_descriptor(), value);
}
inline bool AllianOperState_Parse(
    const ::std::string& name, AllianOperState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AllianOperState>(
    AllianOperState_descriptor(), name, value);
}
enum ApplyAddAllianceUpEmail {
  UPEMAIL_TYPE_1 = 1,
  UPEMAIL_TYPE_2 = 2
};
bool ApplyAddAllianceUpEmail_IsValid(int value);
const ApplyAddAllianceUpEmail ApplyAddAllianceUpEmail_MIN = UPEMAIL_TYPE_1;
const ApplyAddAllianceUpEmail ApplyAddAllianceUpEmail_MAX = UPEMAIL_TYPE_2;
const int ApplyAddAllianceUpEmail_ARRAYSIZE = ApplyAddAllianceUpEmail_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplyAddAllianceUpEmail_descriptor();
inline const ::std::string& ApplyAddAllianceUpEmail_Name(ApplyAddAllianceUpEmail value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplyAddAllianceUpEmail_descriptor(), value);
}
inline bool ApplyAddAllianceUpEmail_Parse(
    const ::std::string& name, ApplyAddAllianceUpEmail* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplyAddAllianceUpEmail>(
    ApplyAddAllianceUpEmail_descriptor(), name, value);
}
enum AddAllianceState {
  INITIATIVE_ADD_TYPE_1 = 1,
  MAIN_AGREE_TYPE_2 = 2
};
bool AddAllianceState_IsValid(int value);
const AddAllianceState AddAllianceState_MIN = INITIATIVE_ADD_TYPE_1;
const AddAllianceState AddAllianceState_MAX = MAIN_AGREE_TYPE_2;
const int AddAllianceState_ARRAYSIZE = AddAllianceState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddAllianceState_descriptor();
inline const ::std::string& AddAllianceState_Name(AddAllianceState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddAllianceState_descriptor(), value);
}
inline bool AddAllianceState_Parse(
    const ::std::string& name, AddAllianceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddAllianceState>(
    AddAllianceState_descriptor(), name, value);
}
enum ExitAllianceState {
  INITIATIVE_TYPE_1 = 1,
  MAIN_KICK_TYPE_2 = 2
};
bool ExitAllianceState_IsValid(int value);
const ExitAllianceState ExitAllianceState_MIN = INITIATIVE_TYPE_1;
const ExitAllianceState ExitAllianceState_MAX = MAIN_KICK_TYPE_2;
const int ExitAllianceState_ARRAYSIZE = ExitAllianceState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExitAllianceState_descriptor();
inline const ::std::string& ExitAllianceState_Name(ExitAllianceState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExitAllianceState_descriptor(), value);
}
inline bool ExitAllianceState_Parse(
    const ::std::string& name, ExitAllianceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExitAllianceState>(
    ExitAllianceState_descriptor(), name, value);
}
enum AddOrExitAlliance {
  ADD_ALLIANCE_TYPE_1 = 1,
  EXIT_ALLIANCE_TYPE_2 = 2
};
bool AddOrExitAlliance_IsValid(int value);
const AddOrExitAlliance AddOrExitAlliance_MIN = ADD_ALLIANCE_TYPE_1;
const AddOrExitAlliance AddOrExitAlliance_MAX = EXIT_ALLIANCE_TYPE_2;
const int AddOrExitAlliance_ARRAYSIZE = AddOrExitAlliance_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddOrExitAlliance_descriptor();
inline const ::std::string& AddOrExitAlliance_Name(AddOrExitAlliance value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddOrExitAlliance_descriptor(), value);
}
inline bool AddOrExitAlliance_Parse(
    const ::std::string& name, AddOrExitAlliance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddOrExitAlliance>(
    AddOrExitAlliance_descriptor(), name, value);
}
enum IosGitState {
  HAVE_GET = 1,
  NOT_GET = 0
};
bool IosGitState_IsValid(int value);
const IosGitState IosGitState_MIN = NOT_GET;
const IosGitState IosGitState_MAX = HAVE_GET;
const int IosGitState_ARRAYSIZE = IosGitState_MAX + 1;

const ::google::protobuf::EnumDescriptor* IosGitState_descriptor();
inline const ::std::string& IosGitState_Name(IosGitState value) {
  return ::google::protobuf::internal::NameOfEnum(
    IosGitState_descriptor(), value);
}
inline bool IosGitState_Parse(
    const ::std::string& name, IosGitState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IosGitState>(
    IosGitState_descriptor(), name, value);
}
enum DataType {
  COIN_TYPE = 1,
  GOLD_TYPE = 2,
  VALOR_SCORE = 3,
  HISTORY_VALOR = 4,
  HONOR = 5,
  REPUTATION = 6,
  CONTRIBUTION_VALUE = 7,
  PEAK_COIN = 8,
  LUCK_SCORE = 9,
  CAN_BUY_TIMES = 10,
  CRYSTAL_CHANGE = 11,
  GEM_TYPE = 12
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = COIN_TYPE;
const DataType DataType_MAX = GEM_TYPE;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum ShopType {
  GOBLIN_MARKET = 1,
  COINS_MARKET = 2,
  ALLIANCE_MARKET = 3,
  ARENA_MARKET = 4,
  VALOR_MARKET = 5,
  PEAK_MARKET = 6,
  BLACK_MARKET = 7,
  CRYSTAL_MARKET = 8,
  GEM_MARKET = 9
};
bool ShopType_IsValid(int value);
const ShopType ShopType_MIN = GOBLIN_MARKET;
const ShopType ShopType_MAX = GEM_MARKET;
const int ShopType_ARRAYSIZE = ShopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShopType_descriptor();
inline const ::std::string& ShopType_Name(ShopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShopType_descriptor(), value);
}
inline bool ShopType_Parse(
    const ::std::string& name, ShopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShopType>(
    ShopType_descriptor(), name, value);
}
enum ShopOperationType {
  INIT_TYPE = 1,
  REFRESH_TYPE = 2
};
bool ShopOperationType_IsValid(int value);
const ShopOperationType ShopOperationType_MIN = INIT_TYPE;
const ShopOperationType ShopOperationType_MAX = REFRESH_TYPE;
const int ShopOperationType_ARRAYSIZE = ShopOperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShopOperationType_descriptor();
inline const ::std::string& ShopOperationType_Name(ShopOperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShopOperationType_descriptor(), value);
}
inline bool ShopOperationType_Parse(
    const ::std::string& name, ShopOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShopOperationType>(
    ShopOperationType_descriptor(), name, value);
}
enum RoleActiviteState {
  IS_ACTIVITE = 1,
  NOT_ACTIVITE = 0,
  CAN_ACTIVITE = 2
};
bool RoleActiviteState_IsValid(int value);
const RoleActiviteState RoleActiviteState_MIN = NOT_ACTIVITE;
const RoleActiviteState RoleActiviteState_MAX = CAN_ACTIVITE;
const int RoleActiviteState_ARRAYSIZE = RoleActiviteState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleActiviteState_descriptor();
inline const ::std::string& RoleActiviteState_Name(RoleActiviteState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleActiviteState_descriptor(), value);
}
inline bool RoleActiviteState_Parse(
    const ::std::string& name, RoleActiviteState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleActiviteState>(
    RoleActiviteState_descriptor(), name, value);
}
enum RoleTrainType {
  COMMON_TYPE = 1,
  ADVANCED_TYPE = 2,
  PLATINA_TYPE = 3,
  DIAMOND_TYPE = 4
};
bool RoleTrainType_IsValid(int value);
const RoleTrainType RoleTrainType_MIN = COMMON_TYPE;
const RoleTrainType RoleTrainType_MAX = DIAMOND_TYPE;
const int RoleTrainType_ARRAYSIZE = RoleTrainType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleTrainType_descriptor();
inline const ::std::string& RoleTrainType_Name(RoleTrainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleTrainType_descriptor(), value);
}
inline bool RoleTrainType_Parse(
    const ::std::string& name, RoleTrainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleTrainType>(
    RoleTrainType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::itemType>() {
  return ::itemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::playerAttr>() {
  return ::playerAttr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roleType>() {
  return ::roleType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chatType>() {
  return ::chatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::toolType>() {
  return ::toolType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::equipPart>() {
  return ::equipPart_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::equipQuality>() {
  return ::equipQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::equipAutoSell>() {
  return ::equipAutoSell_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::elementQuality>() {
  return ::elementQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::elementAutoSell>() {
  return ::elementAutoSell_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prof>() {
  return ::prof_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::attrCond>() {
  return ::attrCond_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::equipAttrGrade>() {
  return ::equipAttrGrade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::attr>() {
  return ::attr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Buff>() {
  return ::Buff_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::changeType>() {
  return ::changeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buyMoneyType>() {
  return ::buyMoneyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shootType>() {
  return ::shootType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shootFreeType>() {
  return ::shootFreeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shootRewardState>() {
  return ::shootRewardState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::equipStatus>() {
  return ::equipStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::monsterType>() {
  return ::monsterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoleStatus>() {
  return ::RoleStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NoticeType>() {
  return ::NoticeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OpenLevelType>() {
  return ::OpenLevelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kickReason>() {
  return ::kickReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActivityId>() {
  return ::ActivityId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FriendChatMsgType>() {
  return ::FriendChatMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::notifyType>() {
  return ::notifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dailyRefreshType>() {
  return ::dailyRefreshType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QuestState>() {
  return ::QuestState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QuestStep>() {
  return ::QuestStep_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QuestEventType>() {
  return ::QuestEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QuestType>() {
  return ::QuestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::YaYaMsgType>() {
  return ::YaYaMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ElementType>() {
  return ::ElementType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HeroTokenMsgType>() {
  return ::HeroTokenMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RankType>() {
  return ::RankType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WingsConstant>() {
  return ::WingsConstant_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BattleUseItemType>() {
  return ::BattleUseItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GemShopBuy>() {
  return ::GemShopBuy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AllianCheckButton>() {
  return ::AllianCheckButton_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ApplyState>() {
  return ::ApplyState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AllianOperState>() {
  return ::AllianOperState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ApplyAddAllianceUpEmail>() {
  return ::ApplyAddAllianceUpEmail_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AddAllianceState>() {
  return ::AddAllianceState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExitAllianceState>() {
  return ::ExitAllianceState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AddOrExitAlliance>() {
  return ::AddOrExitAlliance_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IosGitState>() {
  return ::IosGitState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataType>() {
  return ::DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShopType>() {
  return ::ShopType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ShopOperationType>() {
  return ::ShopOperationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoleActiviteState>() {
  return ::RoleActiviteState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoleTrainType>() {
  return ::RoleTrainType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Const_2eproto__INCLUDED
