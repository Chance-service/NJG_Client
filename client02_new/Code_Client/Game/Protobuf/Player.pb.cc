// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerInfoSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleInfoSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPSysSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPSysSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerStateSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerStateSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerKickout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerKickout_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleCreateRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleCreateRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPAssembleFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPAssembleFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPChangeSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPChangeSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPChangeSignatureRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPChangeSignatureRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPUserKickOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPUserKickOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPEquipSyncFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPEquipSyncFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleIncStarExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleIncStarExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleUpStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleUpStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleRingIncExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleRingIncExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleRingInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleRingInfoSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPRoleRingActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPRoleRingActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPEliteMapInfoSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPEliteMapInfoSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPEvaluateRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPEvaluateRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* Params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Params_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPClientSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPClientSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerAreaSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerAreaSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPChangeRoleName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPChangeRoleName_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPChangeRoleNameRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPChangeRoleNameRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPCommentMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPCommentMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPCommentMsgRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPCommentMsgRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPGoogleAchieveMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPGoogleAchieveMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPGoogleAchieveMsgRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPGoogleAchieveMsgRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFacebookShareEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFacebookShareEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFacebookShareEventRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFacebookShareEventRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFacebookShareCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFacebookShareCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFacebookShareCountRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFacebookShareCountRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerBindPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerBindPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPPlayerBindPriceRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPPlayerBindPriceRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Player_2eproto() {
  protobuf_AddDesc_Player_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Player.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, smeltvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, honorvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, reputationvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, monthcardleftday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, talentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, facebookcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, crystal_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  RoleEquip_descriptor_ = file->message_type(1);
  static const int RoleEquip_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, equipitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, geminfo_),
  };
  RoleEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEquip_descriptor_,
      RoleEquip::default_instance_,
      RoleEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEquip));
  RoleSkill_descriptor_ = file->message_type(2);
  static const int RoleSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSkill, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSkill, level_),
  };
  RoleSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSkill_descriptor_,
      RoleSkill::default_instance_,
      RoleSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSkill));
  RoleElement_descriptor_ = file->message_type(3);
  static const int RoleElement_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, elementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, elementitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, type_),
  };
  RoleElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleElement_descriptor_,
      RoleElement::default_instance_,
      RoleElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleElement));
  RoleInfo_descriptor_ = file->message_type(4);
  static const int RoleInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, baptizeattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, baseattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, skills2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, skills3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, starexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, rebirthstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, stagelevel_),
  };
  RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfo_descriptor_,
      RoleInfo::default_instance_,
      RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfo));
  HPPlayerInfoSync_descriptor_ = file->message_type(5);
  static const int HPPlayerInfoSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerInfoSync, playerinfos_),
  };
  HPPlayerInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerInfoSync_descriptor_,
      HPPlayerInfoSync::default_instance_,
      HPPlayerInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerInfoSync));
  HPRoleInfoSync_descriptor_ = file->message_type(6);
  static const int HPRoleInfoSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleInfoSync, roleinfos_),
  };
  HPRoleInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleInfoSync_descriptor_,
      HPRoleInfoSync::default_instance_,
      HPRoleInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleInfoSync));
  HPSysSetting_descriptor_ = file->message_type(7);
  static const int HPSysSetting_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, autosellequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, chatclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, wipeboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, musicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, soundon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, showarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, onlytext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, autodecoelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, fontsize_),
  };
  HPSysSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPSysSetting_descriptor_,
      HPSysSetting::default_instance_,
      HPSysSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPSysSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPSysSetting));
  HPPlayerStateSync_descriptor_ = file->message_type(8);
  static const int HPPlayerStateSync_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, buycointimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, currentequipbagsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, leftequipbagextendtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, autosellequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, chatclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, fastfighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, fastfightbuytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, bossfighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, bossfightbuytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, nextbattletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, curbattlemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, passmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, giftstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, bosswipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, equipsmeltrefesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, gongcecompletedays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, musicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, soundon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, showarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, passelitemapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, starstonetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, elitefighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, elitefightbuytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, newguidestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, onlytext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, iscsopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, multielitetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, elementbagsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, isfirstlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, newbattlemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, autodecoelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, hourcardusecountoneday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, leftfreefastfighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, leftfreerefreshshoptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, leftfreerefreshmakeequiptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, gemshopbuycount_),
  };
  HPPlayerStateSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerStateSync_descriptor_,
      HPPlayerStateSync::default_instance_,
      HPPlayerStateSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerStateSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerStateSync));
  HPPlayerKickout_descriptor_ = file->message_type(9);
  static const int HPPlayerKickout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerKickout, reason_),
  };
  HPPlayerKickout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerKickout_descriptor_,
      HPPlayerKickout::default_instance_,
      HPPlayerKickout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerKickout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerKickout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerKickout));
  HPRoleCreate_descriptor_ = file->message_type(10);
  static const int HPRoleCreate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreate, roleitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreate, rolename_),
  };
  HPRoleCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleCreate_descriptor_,
      HPRoleCreate::default_instance_,
      HPRoleCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleCreate));
  HPRoleCreateRet_descriptor_ = file->message_type(11);
  static const int HPRoleCreateRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreateRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreateRet, roleinfo_),
  };
  HPRoleCreateRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleCreateRet_descriptor_,
      HPRoleCreateRet::default_instance_,
      HPRoleCreateRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreateRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleCreateRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleCreateRet));
  HPAssembleFinish_descriptor_ = file->message_type(12);
  static const int HPAssembleFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPAssembleFinish, playerid_),
  };
  HPAssembleFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPAssembleFinish_descriptor_,
      HPAssembleFinish::default_instance_,
      HPAssembleFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPAssembleFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPAssembleFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPAssembleFinish));
  HPChangeSignature_descriptor_ = file->message_type(13);
  static const int HPChangeSignature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeSignature, signature_),
  };
  HPChangeSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPChangeSignature_descriptor_,
      HPChangeSignature::default_instance_,
      HPChangeSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPChangeSignature));
  HPChangeSignatureRet_descriptor_ = file->message_type(14);
  static const int HPChangeSignatureRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeSignatureRet, version_),
  };
  HPChangeSignatureRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPChangeSignatureRet_descriptor_,
      HPChangeSignatureRet::default_instance_,
      HPChangeSignatureRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeSignatureRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeSignatureRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPChangeSignatureRet));
  HPUserKickOut_descriptor_ = file->message_type(15);
  static const int HPUserKickOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPUserKickOut, playerid_),
  };
  HPUserKickOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPUserKickOut_descriptor_,
      HPUserKickOut::default_instance_,
      HPUserKickOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPUserKickOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPUserKickOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPUserKickOut));
  HPDataNotify_descriptor_ = file->message_type(16);
  static const int HPDataNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataNotify, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataNotify, goodsid_),
  };
  HPDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPDataNotify_descriptor_,
      HPDataNotify::default_instance_,
      HPDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPDataNotify));
  HPEquipSyncFinish_descriptor_ = file->message_type(17);
  static const int HPEquipSyncFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipSyncFinish, playerid_),
  };
  HPEquipSyncFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPEquipSyncFinish_descriptor_,
      HPEquipSyncFinish::default_instance_,
      HPEquipSyncFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipSyncFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEquipSyncFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPEquipSyncFinish));
  HPRoleIncStarExp_descriptor_ = file->message_type(18);
  static const int HPRoleIncStarExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleIncStarExp, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleIncStarExp, itemid_),
  };
  HPRoleIncStarExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleIncStarExp_descriptor_,
      HPRoleIncStarExp::default_instance_,
      HPRoleIncStarExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleIncStarExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleIncStarExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleIncStarExp));
  HPRoleUpStage_descriptor_ = file->message_type(19);
  static const int HPRoleUpStage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleUpStage, roleid_),
  };
  HPRoleUpStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleUpStage_descriptor_,
      HPRoleUpStage::default_instance_,
      HPRoleUpStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleUpStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleUpStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleUpStage));
  HPRoleRingIncExp_descriptor_ = file->message_type(20);
  static const int HPRoleRingIncExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingIncExp, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingIncExp, ringitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingIncExp, itemid_),
  };
  HPRoleRingIncExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleRingIncExp_descriptor_,
      HPRoleRingIncExp::default_instance_,
      HPRoleRingIncExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingIncExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingIncExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleRingIncExp));
  RoleRingInfo_descriptor_ = file->message_type(21);
  static const int RoleRingInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, lvluptimes_),
  };
  RoleRingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRingInfo_descriptor_,
      RoleRingInfo::default_instance_,
      RoleRingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRingInfo));
  HPRoleRingInfoSync_descriptor_ = file->message_type(22);
  static const int HPRoleRingInfoSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingInfoSync, ringinfos_),
  };
  HPRoleRingInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleRingInfoSync_descriptor_,
      HPRoleRingInfoSync::default_instance_,
      HPRoleRingInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleRingInfoSync));
  HPRoleRingActive_descriptor_ = file->message_type(23);
  static const int HPRoleRingActive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingActive, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingActive, itemid_),
  };
  HPRoleRingActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPRoleRingActive_descriptor_,
      HPRoleRingActive::default_instance_,
      HPRoleRingActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPRoleRingActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPRoleRingActive));
  EliteMapInfo_descriptor_ = file->message_type(24);
  static const int EliteMapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapInfo, mapid_),
  };
  EliteMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteMapInfo_descriptor_,
      EliteMapInfo::default_instance_,
      EliteMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteMapInfo));
  HPEliteMapInfoSync_descriptor_ = file->message_type(25);
  static const int HPEliteMapInfoSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEliteMapInfoSync, elitemapinfos_),
  };
  HPEliteMapInfoSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPEliteMapInfoSync_descriptor_,
      HPEliteMapInfoSync::default_instance_,
      HPEliteMapInfoSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEliteMapInfoSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEliteMapInfoSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPEliteMapInfoSync));
  HPEvaluateRewards_descriptor_ = file->message_type(26);
  static const int HPEvaluateRewards_offsets_[1] = {
  };
  HPEvaluateRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPEvaluateRewards_descriptor_,
      HPEvaluateRewards::default_instance_,
      HPEvaluateRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEvaluateRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPEvaluateRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPEvaluateRewards));
  Params_descriptor_ = file->message_type(27);
  static const int Params_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, value_),
  };
  Params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Params_descriptor_,
      Params::default_instance_,
      Params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Params));
  HPClientSetting_descriptor_ = file->message_type(28);
  static const int HPClientSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPClientSetting, params_),
  };
  HPClientSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPClientSetting_descriptor_,
      HPClientSetting::default_instance_,
      HPClientSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPClientSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPClientSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPClientSetting));
  HPPlayerAreaSync_descriptor_ = file->message_type(29);
  static const int HPPlayerAreaSync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerAreaSync, area_),
  };
  HPPlayerAreaSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerAreaSync_descriptor_,
      HPPlayerAreaSync::default_instance_,
      HPPlayerAreaSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerAreaSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerAreaSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerAreaSync));
  HPChangeRoleName_descriptor_ = file->message_type(30);
  static const int HPChangeRoleName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeRoleName, name_),
  };
  HPChangeRoleName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPChangeRoleName_descriptor_,
      HPChangeRoleName::default_instance_,
      HPChangeRoleName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeRoleName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeRoleName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPChangeRoleName));
  HPChangeRoleNameRet_descriptor_ = file->message_type(31);
  static const int HPChangeRoleNameRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeRoleNameRet, name_),
  };
  HPChangeRoleNameRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPChangeRoleNameRet_descriptor_,
      HPChangeRoleNameRet::default_instance_,
      HPChangeRoleNameRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeRoleNameRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeRoleNameRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPChangeRoleNameRet));
  HPCommentMsg_descriptor_ = file->message_type(32);
  static const int HPCommentMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPCommentMsg, type_),
  };
  HPCommentMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPCommentMsg_descriptor_,
      HPCommentMsg::default_instance_,
      HPCommentMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPCommentMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPCommentMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPCommentMsg));
  HPCommentMsgRet_descriptor_ = file->message_type(33);
  static const int HPCommentMsgRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPCommentMsgRet, number_),
  };
  HPCommentMsgRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPCommentMsgRet_descriptor_,
      HPCommentMsgRet::default_instance_,
      HPCommentMsgRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPCommentMsgRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPCommentMsgRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPCommentMsgRet));
  HPGoogleAchieveMsg_descriptor_ = file->message_type(34);
  static const int HPGoogleAchieveMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsg, achieveinfo_),
  };
  HPGoogleAchieveMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPGoogleAchieveMsg_descriptor_,
      HPGoogleAchieveMsg::default_instance_,
      HPGoogleAchieveMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPGoogleAchieveMsg));
  HPGoogleAchieveMsgRet_descriptor_ = file->message_type(35);
  static const int HPGoogleAchieveMsgRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsgRet, achieveinfo_),
  };
  HPGoogleAchieveMsgRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPGoogleAchieveMsgRet_descriptor_,
      HPGoogleAchieveMsgRet::default_instance_,
      HPGoogleAchieveMsgRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsgRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPGoogleAchieveMsgRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPGoogleAchieveMsgRet));
  HPFacebookShareEvent_descriptor_ = file->message_type(36);
  static const int HPFacebookShareEvent_offsets_[1] = {
  };
  HPFacebookShareEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFacebookShareEvent_descriptor_,
      HPFacebookShareEvent::default_instance_,
      HPFacebookShareEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFacebookShareEvent));
  HPFacebookShareEventRet_descriptor_ = file->message_type(37);
  static const int HPFacebookShareEventRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareEventRet, number_),
  };
  HPFacebookShareEventRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFacebookShareEventRet_descriptor_,
      HPFacebookShareEventRet::default_instance_,
      HPFacebookShareEventRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareEventRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareEventRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFacebookShareEventRet));
  HPFacebookShareCount_descriptor_ = file->message_type(38);
  static const int HPFacebookShareCount_offsets_[1] = {
  };
  HPFacebookShareCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFacebookShareCount_descriptor_,
      HPFacebookShareCount::default_instance_,
      HPFacebookShareCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFacebookShareCount));
  HPFacebookShareCountRet_descriptor_ = file->message_type(39);
  static const int HPFacebookShareCountRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareCountRet, number_),
  };
  HPFacebookShareCountRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFacebookShareCountRet_descriptor_,
      HPFacebookShareCountRet::default_instance_,
      HPFacebookShareCountRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareCountRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFacebookShareCountRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFacebookShareCountRet));
  HPPlayerBindPrice_descriptor_ = file->message_type(40);
  static const int HPPlayerBindPrice_offsets_[1] = {
  };
  HPPlayerBindPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerBindPrice_descriptor_,
      HPPlayerBindPrice::default_instance_,
      HPPlayerBindPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerBindPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerBindPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerBindPrice));
  HPPlayerBindPriceRet_descriptor_ = file->message_type(41);
  static const int HPPlayerBindPriceRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerBindPriceRet, status_),
  };
  HPPlayerBindPriceRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPPlayerBindPriceRet_descriptor_,
      HPPlayerBindPriceRet::default_instance_,
      HPPlayerBindPriceRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerBindPriceRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPPlayerBindPriceRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPPlayerBindPriceRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Player_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEquip_descriptor_, &RoleEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSkill_descriptor_, &RoleSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleElement_descriptor_, &RoleElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfo_descriptor_, &RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerInfoSync_descriptor_, &HPPlayerInfoSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleInfoSync_descriptor_, &HPRoleInfoSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPSysSetting_descriptor_, &HPSysSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerStateSync_descriptor_, &HPPlayerStateSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerKickout_descriptor_, &HPPlayerKickout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleCreate_descriptor_, &HPRoleCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleCreateRet_descriptor_, &HPRoleCreateRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPAssembleFinish_descriptor_, &HPAssembleFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPChangeSignature_descriptor_, &HPChangeSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPChangeSignatureRet_descriptor_, &HPChangeSignatureRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPUserKickOut_descriptor_, &HPUserKickOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPDataNotify_descriptor_, &HPDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPEquipSyncFinish_descriptor_, &HPEquipSyncFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleIncStarExp_descriptor_, &HPRoleIncStarExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleUpStage_descriptor_, &HPRoleUpStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleRingIncExp_descriptor_, &HPRoleRingIncExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRingInfo_descriptor_, &RoleRingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleRingInfoSync_descriptor_, &HPRoleRingInfoSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPRoleRingActive_descriptor_, &HPRoleRingActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteMapInfo_descriptor_, &EliteMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPEliteMapInfoSync_descriptor_, &HPEliteMapInfoSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPEvaluateRewards_descriptor_, &HPEvaluateRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Params_descriptor_, &Params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPClientSetting_descriptor_, &HPClientSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerAreaSync_descriptor_, &HPPlayerAreaSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPChangeRoleName_descriptor_, &HPChangeRoleName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPChangeRoleNameRet_descriptor_, &HPChangeRoleNameRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPCommentMsg_descriptor_, &HPCommentMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPCommentMsgRet_descriptor_, &HPCommentMsgRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPGoogleAchieveMsg_descriptor_, &HPGoogleAchieveMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPGoogleAchieveMsgRet_descriptor_, &HPGoogleAchieveMsgRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFacebookShareEvent_descriptor_, &HPFacebookShareEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFacebookShareEventRet_descriptor_, &HPFacebookShareEventRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFacebookShareCount_descriptor_, &HPFacebookShareCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFacebookShareCountRet_descriptor_, &HPFacebookShareCountRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerBindPrice_descriptor_, &HPPlayerBindPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPPlayerBindPriceRet_descriptor_, &HPPlayerBindPriceRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Player_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete RoleEquip::default_instance_;
  delete RoleEquip_reflection_;
  delete RoleSkill::default_instance_;
  delete RoleSkill_reflection_;
  delete RoleElement::default_instance_;
  delete RoleElement_reflection_;
  delete RoleInfo::default_instance_;
  delete RoleInfo_reflection_;
  delete HPPlayerInfoSync::default_instance_;
  delete HPPlayerInfoSync_reflection_;
  delete HPRoleInfoSync::default_instance_;
  delete HPRoleInfoSync_reflection_;
  delete HPSysSetting::default_instance_;
  delete HPSysSetting_reflection_;
  delete HPPlayerStateSync::default_instance_;
  delete HPPlayerStateSync_reflection_;
  delete HPPlayerKickout::default_instance_;
  delete HPPlayerKickout_reflection_;
  delete HPRoleCreate::default_instance_;
  delete HPRoleCreate_reflection_;
  delete HPRoleCreateRet::default_instance_;
  delete HPRoleCreateRet_reflection_;
  delete HPAssembleFinish::default_instance_;
  delete HPAssembleFinish_reflection_;
  delete HPChangeSignature::default_instance_;
  delete HPChangeSignature_reflection_;
  delete HPChangeSignatureRet::default_instance_;
  delete HPChangeSignatureRet_reflection_;
  delete HPUserKickOut::default_instance_;
  delete HPUserKickOut_reflection_;
  delete HPDataNotify::default_instance_;
  delete HPDataNotify_reflection_;
  delete HPEquipSyncFinish::default_instance_;
  delete HPEquipSyncFinish_reflection_;
  delete HPRoleIncStarExp::default_instance_;
  delete HPRoleIncStarExp_reflection_;
  delete HPRoleUpStage::default_instance_;
  delete HPRoleUpStage_reflection_;
  delete HPRoleRingIncExp::default_instance_;
  delete HPRoleRingIncExp_reflection_;
  delete RoleRingInfo::default_instance_;
  delete RoleRingInfo_reflection_;
  delete HPRoleRingInfoSync::default_instance_;
  delete HPRoleRingInfoSync_reflection_;
  delete HPRoleRingActive::default_instance_;
  delete HPRoleRingActive_reflection_;
  delete EliteMapInfo::default_instance_;
  delete EliteMapInfo_reflection_;
  delete HPEliteMapInfoSync::default_instance_;
  delete HPEliteMapInfoSync_reflection_;
  delete HPEvaluateRewards::default_instance_;
  delete HPEvaluateRewards_reflection_;
  delete Params::default_instance_;
  delete Params_reflection_;
  delete HPClientSetting::default_instance_;
  delete HPClientSetting_reflection_;
  delete HPPlayerAreaSync::default_instance_;
  delete HPPlayerAreaSync_reflection_;
  delete HPChangeRoleName::default_instance_;
  delete HPChangeRoleName_reflection_;
  delete HPChangeRoleNameRet::default_instance_;
  delete HPChangeRoleNameRet_reflection_;
  delete HPCommentMsg::default_instance_;
  delete HPCommentMsg_reflection_;
  delete HPCommentMsgRet::default_instance_;
  delete HPCommentMsgRet_reflection_;
  delete HPGoogleAchieveMsg::default_instance_;
  delete HPGoogleAchieveMsg_reflection_;
  delete HPGoogleAchieveMsgRet::default_instance_;
  delete HPGoogleAchieveMsgRet_reflection_;
  delete HPFacebookShareEvent::default_instance_;
  delete HPFacebookShareEvent_reflection_;
  delete HPFacebookShareEventRet::default_instance_;
  delete HPFacebookShareEventRet_reflection_;
  delete HPFacebookShareCount::default_instance_;
  delete HPFacebookShareCount_reflection_;
  delete HPFacebookShareCountRet::default_instance_;
  delete HPFacebookShareCountRet_reflection_;
  delete HPPlayerBindPrice::default_instance_;
  delete HPPlayerBindPrice_reflection_;
  delete HPPlayerBindPriceRet::default_instance_;
  delete HPPlayerBindPriceRet_reflection_;
}

void protobuf_AddDesc_Player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Attribute_2eproto();
  ::protobuf_AddDesc_Equip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Player.proto\032\017Attribute.proto\032\013Equip.p"
    "roto\"\207\002\n\nPlayerInfo\022\020\n\010playerId\030\001 \002(\005\022\014\n"
    "\004gold\030\002 \002(\005\022\014\n\004coin\030\003 \002(\003\022\020\n\010recharge\030\004 "
    "\002(\005\022\020\n\010vipLevel\030\005 \002(\005\022\022\n\nsmeltValue\030\006 \002("
    "\005\022\021\n\tsignature\030\007 \001(\t\022\022\n\nhonorValue\030\010 \001(\005"
    "\022\027\n\017reputationValue\030\t \001(\005\022\030\n\020monthCardLe"
    "ftDay\030\n \001(\005\022\021\n\ttalentNum\030\013 \001(\005\022\025\n\rfacebo"
    "okCount\030\014 \001(\005\022\017\n\007crystal\030\r \001(\005\"l\n\tRoleEq"
    "uip\022\014\n\004part\030\001 \002(\005\022\017\n\007equipId\030\002 \002(\003\022\023\n\013eq"
    "uipItemId\030\003 \002(\005\022\020\n\010strength\030\004 \002(\005\022\031\n\007gem"
    "Info\030\005 \003(\0132\010.GemInfo\">\n\tRoleSkill\022\017\n\007ski"
    "llId\030\001 \002(\005\022\016\n\006itemId\030\002 \001(\005\022\020\n\005level\030\003 \001("
    "\005:\0011\"t\n\013RoleElement\022\r\n\005index\030\001 \002(\005\022\021\n\tel"
    "ementId\030\002 \002(\003\022\025\n\relementItemId\030\003 \002(\005\022\r\n\005"
    "level\030\004 \002(\005\022\017\n\007quality\030\005 \002(\005\022\014\n\004type\030\006 \002"
    "(\005\"\312\003\n\010RoleInfo\022\016\n\006roleId\030\001 \002(\005\022\014\n\004type\030"
    "\002 \002(\005\022\016\n\006itemId\030\003 \002(\005\022\014\n\004prof\030\004 \002(\005\022\014\n\004n"
    "ame\030\005 \002(\t\022\r\n\005level\030\006 \002(\005\022\013\n\003exp\030\007 \002(\003\022\r\n"
    "\005fight\030\010 \002(\005\022\016\n\006status\030\t \002(\005\022\032\n\006equips\030\n"
    " \003(\0132\n.RoleEquip\022\032\n\006skills\030\013 \003(\0132\n.RoleS"
    "kill\022\034\n\tattribute\030\014 \002(\0132\t.AttrInfo\022\036\n\013ba"
    "ptizeAttr\030\r \001(\0132\t.AttrInfo\022\033\n\010baseAttr\030\016"
    " \001(\0132\t.AttrInfo\022\033\n\007skills2\030\017 \003(\0132\n.RoleS"
    "kill\022\033\n\007skills3\030\020 \003(\0132\n.RoleSkill\022\021\n\tsta"
    "rLevel\030\021 \001(\005\022\017\n\007starExp\030\022 \001(\005\022\036\n\010element"
    "s\030\023 \003(\0132\014.RoleElement\022\024\n\014rebirthStage\030\024 "
    "\001(\005\022\022\n\nstageLevel\030\025 \001(\005\"4\n\020HPPlayerInfoS"
    "ync\022 \n\013playerInfos\030\001 \003(\0132\013.PlayerInfo\".\n"
    "\016HPRoleInfoSync\022\034\n\troleInfos\030\001 \003(\0132\t.Rol"
    "eInfo\"\273\001\n\014HPSysSetting\022\025\n\rautoSellEquip\030"
    "\001 \001(\005\022\021\n\tchatClose\030\002 \001(\005\022\020\n\010wipeBoss\030\003 \001"
    "(\005\022\017\n\007musicOn\030\004 \001(\005\022\017\n\007soundOn\030\005 \001(\005\022\020\n\010"
    "showArea\030\006 \001(\005\022\020\n\010onlyText\030\007 \001(\005\022\027\n\017auto"
    "DecoElement\030\010 \001(\005\022\020\n\010fontSize\030\t \001(\005\"\222\007\n\021"
    "HPPlayerStateSync\022\024\n\014buyCoinTimes\030\001 \001(\005\022"
    "\033\n\023currentEquipBagSize\030\002 \001(\005\022\037\n\027leftEqui"
    "pBagExtendTimes\030\003 \001(\005\022\025\n\rautoSellEquip\030\004"
    " \001(\005\022\021\n\tchatClose\030\005 \001(\005\022\026\n\016fastFightTime"
    "s\030\006 \001(\005\022\031\n\021fastFightBuyTimes\030\007 \001(\005\022\026\n\016bo"
    "ssFightTimes\030\010 \001(\005\022\031\n\021bossFightBuyTimes\030"
    "\t \001(\005\022\026\n\016nextBattleTime\030\n \001(\005\022\024\n\014curBatt"
    "leMap\030\013 \001(\005\022\021\n\tpassMapId\030\014 \001(\005\022\022\n\ngiftSt"
    "atus\030\r \001(\005\022\020\n\010bossWipe\030\016 \001(\005\022\030\n\020equipSme"
    "ltRefesh\030\017 \001(\005\022\032\n\022gongceCompleteDays\030\020 \001"
    "(\005\022\017\n\007musicOn\030\021 \001(\005\022\017\n\007soundOn\030\022 \001(\005\022\020\n\010"
    "showArea\030\023 \001(\005\022\026\n\016passEliteMapId\030\024 \001(\005\022\026"
    "\n\016starStoneTimes\030\025 \001(\005\022\027\n\017eliteFightTime"
    "s\030\026 \001(\005\022\032\n\022eliteFightBuyTimes\030\027 \001(\005\022\025\n\rn"
    "ewGuideState\030\030 \001(\005\022\020\n\010onlyText\030\031 \001(\005\022\020\n\010"
    "isCSOPen\030\032 \001(\010\022\027\n\017multiEliteTimes\030\033 \001(\005\022"
    "\026\n\016elementBagSize\030\034 \001(\005\022\024\n\014isFirstLogin\030"
    "\035 \001(\010\022\024\n\014newBattleMap\030\036 \001(\005\022\027\n\017autoDecoE"
    "lement\030\037 \001(\005\022\020\n\010fontSize\030  \001(\005\022\036\n\026hourCa"
    "rdUseCountOneDay\030! \001(\005\022\036\n\026leftFreeFastFi"
    "ghtTimes\030\" \001(\005\022 \n\030leftFreeRefreshShopTim"
    "es\030# \001(\005\022%\n\035leftFreeRefreshMakeEquipTime"
    "s\030$ \001(\005\022\027\n\017gemShopBuyCount\030% \001(\005\"!\n\017HPPl"
    "ayerKickout\022\016\n\006reason\030\001 \002(\005\"4\n\014HPRoleCre"
    "ate\022\022\n\nroleItemId\030\001 \002(\005\022\020\n\010roleName\030\002 \002("
    "\t\">\n\017HPRoleCreateRet\022\016\n\006status\030\001 \002(\005\022\033\n\010"
    "roleInfo\030\002 \001(\0132\t.RoleInfo\"$\n\020HPAssembleF"
    "inish\022\020\n\010playerId\030\001 \002(\005\"&\n\021HPChangeSigna"
    "ture\022\021\n\tsignature\030\001 \002(\t\"\'\n\024HPChangeSigna"
    "tureRet\022\017\n\007version\030\001 \002(\005\"!\n\rHPUserKickOu"
    "t\022\020\n\010playerId\030\001 \002(\005\"<\n\014HPDataNotify\022\014\n\004t"
    "ype\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\022\017\n\007goodsId\030\003 \001("
    "\005\"%\n\021HPEquipSyncFinish\022\020\n\010playerId\030\001 \002(\005"
    "\"2\n\020HPRoleIncStarExp\022\016\n\006roleId\030\001 \002(\005\022\016\n\006"
    "itemId\030\002 \002(\005\"\037\n\rHPRoleUpStage\022\016\n\006roleId\030"
    "\001 \002(\005\"F\n\020HPRoleRingIncExp\022\016\n\006roleId\030\001 \002("
    "\005\022\022\n\nringItemId\030\002 \002(\005\022\016\n\006itemId\030\003 \003(\005\"n\n"
    "\014RoleRingInfo\022\016\n\006ringId\030\001 \002(\005\022\016\n\006roleId\030"
    "\002 \002(\005\022\016\n\006itemId\030\003 \002(\005\022\r\n\005level\030\004 \002(\005\022\013\n\003"
    "exp\030\005 \002(\005\022\022\n\nlvlUpTimes\030\006 \001(\005\"6\n\022HPRoleR"
    "ingInfoSync\022 \n\tringInfos\030\001 \003(\0132\r.RoleRin"
    "gInfo\"2\n\020HPRoleRingActive\022\016\n\006roleId\030\001 \002("
    "\005\022\016\n\006itemId\030\002 \002(\005\",\n\014EliteMapInfo\022\r\n\005lev"
    "el\030\001 \002(\005\022\r\n\005mapId\030\002 \002(\005\":\n\022HPEliteMapInf"
    "oSync\022$\n\reliteMapInfos\030\001 \003(\0132\r.EliteMapI"
    "nfo\"\023\n\021HPEvaluateRewards\"$\n\006Params\022\013\n\003ke"
    "y\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"*\n\017HPClientSettin"
    "g\022\027\n\006params\030\001 \003(\0132\007.Params\" \n\020HPPlayerAr"
    "eaSync\022\014\n\004area\030\001 \001(\t\" \n\020HPChangeRoleName"
    "\022\014\n\004name\030\001 \002(\t\"#\n\023HPChangeRoleNameRet\022\014\n"
    "\004name\030\001 \002(\t\"\034\n\014HPCommentMsg\022\014\n\004type\030\001 \002("
    "\005\"!\n\017HPCommentMsgRet\022\016\n\006number\030\001 \002(\005\"7\n\022"
    "HPGoogleAchieveMsg\022\014\n\004type\030\001 \002(\005\022\023\n\013achi"
    "eveinfo\030\002 \003(\t\",\n\025HPGoogleAchieveMsgRet\022\023"
    "\n\013achieveinfo\030\001 \003(\t\"\026\n\024HPFacebookShareEv"
    "ent\")\n\027HPFacebookShareEventRet\022\016\n\006number"
    "\030\001 \002(\005\"\026\n\024HPFacebookShareCount\")\n\027HPFace"
    "bookShareCountRet\022\016\n\006number\030\001 \002(\005\"\023\n\021HPP"
    "layerBindPrice\"&\n\024HPPlayerBindPriceRet\022\016"
    "\n\006status\030\001 \002(\005B\030\n\026com.hawk.game.protocol", 3760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Player.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  RoleEquip::default_instance_ = new RoleEquip();
  RoleSkill::default_instance_ = new RoleSkill();
  RoleElement::default_instance_ = new RoleElement();
  RoleInfo::default_instance_ = new RoleInfo();
  HPPlayerInfoSync::default_instance_ = new HPPlayerInfoSync();
  HPRoleInfoSync::default_instance_ = new HPRoleInfoSync();
  HPSysSetting::default_instance_ = new HPSysSetting();
  HPPlayerStateSync::default_instance_ = new HPPlayerStateSync();
  HPPlayerKickout::default_instance_ = new HPPlayerKickout();
  HPRoleCreate::default_instance_ = new HPRoleCreate();
  HPRoleCreateRet::default_instance_ = new HPRoleCreateRet();
  HPAssembleFinish::default_instance_ = new HPAssembleFinish();
  HPChangeSignature::default_instance_ = new HPChangeSignature();
  HPChangeSignatureRet::default_instance_ = new HPChangeSignatureRet();
  HPUserKickOut::default_instance_ = new HPUserKickOut();
  HPDataNotify::default_instance_ = new HPDataNotify();
  HPEquipSyncFinish::default_instance_ = new HPEquipSyncFinish();
  HPRoleIncStarExp::default_instance_ = new HPRoleIncStarExp();
  HPRoleUpStage::default_instance_ = new HPRoleUpStage();
  HPRoleRingIncExp::default_instance_ = new HPRoleRingIncExp();
  RoleRingInfo::default_instance_ = new RoleRingInfo();
  HPRoleRingInfoSync::default_instance_ = new HPRoleRingInfoSync();
  HPRoleRingActive::default_instance_ = new HPRoleRingActive();
  EliteMapInfo::default_instance_ = new EliteMapInfo();
  HPEliteMapInfoSync::default_instance_ = new HPEliteMapInfoSync();
  HPEvaluateRewards::default_instance_ = new HPEvaluateRewards();
  Params::default_instance_ = new Params();
  HPClientSetting::default_instance_ = new HPClientSetting();
  HPPlayerAreaSync::default_instance_ = new HPPlayerAreaSync();
  HPChangeRoleName::default_instance_ = new HPChangeRoleName();
  HPChangeRoleNameRet::default_instance_ = new HPChangeRoleNameRet();
  HPCommentMsg::default_instance_ = new HPCommentMsg();
  HPCommentMsgRet::default_instance_ = new HPCommentMsgRet();
  HPGoogleAchieveMsg::default_instance_ = new HPGoogleAchieveMsg();
  HPGoogleAchieveMsgRet::default_instance_ = new HPGoogleAchieveMsgRet();
  HPFacebookShareEvent::default_instance_ = new HPFacebookShareEvent();
  HPFacebookShareEventRet::default_instance_ = new HPFacebookShareEventRet();
  HPFacebookShareCount::default_instance_ = new HPFacebookShareCount();
  HPFacebookShareCountRet::default_instance_ = new HPFacebookShareCountRet();
  HPPlayerBindPrice::default_instance_ = new HPPlayerBindPrice();
  HPPlayerBindPriceRet::default_instance_ = new HPPlayerBindPriceRet();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  RoleEquip::default_instance_->InitAsDefaultInstance();
  RoleSkill::default_instance_->InitAsDefaultInstance();
  RoleElement::default_instance_->InitAsDefaultInstance();
  RoleInfo::default_instance_->InitAsDefaultInstance();
  HPPlayerInfoSync::default_instance_->InitAsDefaultInstance();
  HPRoleInfoSync::default_instance_->InitAsDefaultInstance();
  HPSysSetting::default_instance_->InitAsDefaultInstance();
  HPPlayerStateSync::default_instance_->InitAsDefaultInstance();
  HPPlayerKickout::default_instance_->InitAsDefaultInstance();
  HPRoleCreate::default_instance_->InitAsDefaultInstance();
  HPRoleCreateRet::default_instance_->InitAsDefaultInstance();
  HPAssembleFinish::default_instance_->InitAsDefaultInstance();
  HPChangeSignature::default_instance_->InitAsDefaultInstance();
  HPChangeSignatureRet::default_instance_->InitAsDefaultInstance();
  HPUserKickOut::default_instance_->InitAsDefaultInstance();
  HPDataNotify::default_instance_->InitAsDefaultInstance();
  HPEquipSyncFinish::default_instance_->InitAsDefaultInstance();
  HPRoleIncStarExp::default_instance_->InitAsDefaultInstance();
  HPRoleUpStage::default_instance_->InitAsDefaultInstance();
  HPRoleRingIncExp::default_instance_->InitAsDefaultInstance();
  RoleRingInfo::default_instance_->InitAsDefaultInstance();
  HPRoleRingInfoSync::default_instance_->InitAsDefaultInstance();
  HPRoleRingActive::default_instance_->InitAsDefaultInstance();
  EliteMapInfo::default_instance_->InitAsDefaultInstance();
  HPEliteMapInfoSync::default_instance_->InitAsDefaultInstance();
  HPEvaluateRewards::default_instance_->InitAsDefaultInstance();
  Params::default_instance_->InitAsDefaultInstance();
  HPClientSetting::default_instance_->InitAsDefaultInstance();
  HPPlayerAreaSync::default_instance_->InitAsDefaultInstance();
  HPChangeRoleName::default_instance_->InitAsDefaultInstance();
  HPChangeRoleNameRet::default_instance_->InitAsDefaultInstance();
  HPCommentMsg::default_instance_->InitAsDefaultInstance();
  HPCommentMsgRet::default_instance_->InitAsDefaultInstance();
  HPGoogleAchieveMsg::default_instance_->InitAsDefaultInstance();
  HPGoogleAchieveMsgRet::default_instance_->InitAsDefaultInstance();
  HPFacebookShareEvent::default_instance_->InitAsDefaultInstance();
  HPFacebookShareEventRet::default_instance_->InitAsDefaultInstance();
  HPFacebookShareCount::default_instance_->InitAsDefaultInstance();
  HPFacebookShareCountRet::default_instance_->InitAsDefaultInstance();
  HPPlayerBindPrice::default_instance_->InitAsDefaultInstance();
  HPPlayerBindPriceRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Player_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Player_2eproto {
  StaticDescriptorInitializer_Player_2eproto() {
    protobuf_AddDesc_Player_2eproto();
  }
} static_descriptor_initializer_Player_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kPlayerIdFieldNumber;
const int PlayerInfo::kGoldFieldNumber;
const int PlayerInfo::kCoinFieldNumber;
const int PlayerInfo::kRechargeFieldNumber;
const int PlayerInfo::kVipLevelFieldNumber;
const int PlayerInfo::kSmeltValueFieldNumber;
const int PlayerInfo::kSignatureFieldNumber;
const int PlayerInfo::kHonorValueFieldNumber;
const int PlayerInfo::kReputationValueFieldNumber;
const int PlayerInfo::kMonthCardLeftDayFieldNumber;
const int PlayerInfo::kTalentNumFieldNumber;
const int PlayerInfo::kFacebookCountFieldNumber;
const int PlayerInfo::kCrystalFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  gold_ = 0;
  coin_ = GOOGLE_LONGLONG(0);
  recharge_ = 0;
  viplevel_ = 0;
  smeltvalue_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honorvalue_ = 0;
  reputationvalue_ = 0;
  monthcardleftday_ = 0;
  talentnum_ = 0;
  facebookcount_ = 0;
  crystal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    gold_ = 0;
    coin_ = GOOGLE_LONGLONG(0);
    recharge_ = 0;
    viplevel_ = 0;
    smeltvalue_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    honorvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reputationvalue_ = 0;
    monthcardleftday_ = 0;
    talentnum_ = 0;
    facebookcount_ = 0;
    crystal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // required int64 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recharge;
        break;
      }

      // required int32 recharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLevel;
        break;
      }

      // required int32 vipLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_smeltValue;
        break;
      }

      // required int32 smeltValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smeltValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smeltvalue_)));
          set_has_smeltvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signature;
        break;
      }

      // optional string signature = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_honorValue;
        break;
      }

      // optional int32 honorValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honorValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honorvalue_)));
          set_has_honorvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reputationValue;
        break;
      }

      // optional int32 reputationValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputationValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputationvalue_)));
          set_has_reputationvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_monthCardLeftDay;
        break;
      }

      // optional int32 monthCardLeftDay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthCardLeftDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthcardleftday_)));
          set_has_monthcardleftday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_talentNum;
        break;
      }

      // optional int32 talentNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentnum_)));
          set_has_talentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_facebookCount;
        break;
      }

      // optional int32 facebookCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facebookCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facebookcount_)));
          set_has_facebookcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_crystal;
        break;
      }

      // optional int32 crystal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crystal_)));
          set_has_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int64 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coin(), output);
  }

  // required int32 recharge = 4;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recharge(), output);
  }

  // required int32 vipLevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viplevel(), output);
  }

  // required int32 smeltValue = 6;
  if (has_smeltvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smeltvalue(), output);
  }

  // optional string signature = 7;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->signature(), output);
  }

  // optional int32 honorValue = 8;
  if (has_honorvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->honorvalue(), output);
  }

  // optional int32 reputationValue = 9;
  if (has_reputationvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reputationvalue(), output);
  }

  // optional int32 monthCardLeftDay = 10;
  if (has_monthcardleftday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->monthcardleftday(), output);
  }

  // optional int32 talentNum = 11;
  if (has_talentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->talentnum(), output);
  }

  // optional int32 facebookCount = 12;
  if (has_facebookcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->facebookcount(), output);
  }

  // optional int32 crystal = 13;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->crystal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int64 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->coin(), target);
  }

  // required int32 recharge = 4;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recharge(), target);
  }

  // required int32 vipLevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viplevel(), target);
  }

  // required int32 smeltValue = 6;
  if (has_smeltvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->smeltvalue(), target);
  }

  // optional string signature = 7;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->signature(), target);
  }

  // optional int32 honorValue = 8;
  if (has_honorvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->honorvalue(), target);
  }

  // optional int32 reputationValue = 9;
  if (has_reputationvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reputationvalue(), target);
  }

  // optional int32 monthCardLeftDay = 10;
  if (has_monthcardleftday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->monthcardleftday(), target);
  }

  // optional int32 talentNum = 11;
  if (has_talentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->talentnum(), target);
  }

  // optional int32 facebookCount = 12;
  if (has_facebookcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->facebookcount(), target);
  }

  // optional int32 crystal = 13;
  if (has_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->crystal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int64 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // required int32 recharge = 4;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge());
    }

    // required int32 vipLevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required int32 smeltValue = 6;
    if (has_smeltvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smeltvalue());
    }

    // optional string signature = 7;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional int32 honorValue = 8;
    if (has_honorvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honorvalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reputationValue = 9;
    if (has_reputationvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputationvalue());
    }

    // optional int32 monthCardLeftDay = 10;
    if (has_monthcardleftday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthcardleftday());
    }

    // optional int32 talentNum = 11;
    if (has_talentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentnum());
    }

    // optional int32 facebookCount = 12;
    if (has_facebookcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facebookcount());
    }

    // optional int32 crystal = 13;
    if (has_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crystal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_smeltvalue()) {
      set_smeltvalue(from.smeltvalue());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_honorvalue()) {
      set_honorvalue(from.honorvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reputationvalue()) {
      set_reputationvalue(from.reputationvalue());
    }
    if (from.has_monthcardleftday()) {
      set_monthcardleftday(from.monthcardleftday());
    }
    if (from.has_talentnum()) {
      set_talentnum(from.talentnum());
    }
    if (from.has_facebookcount()) {
      set_facebookcount(from.facebookcount());
    }
    if (from.has_crystal()) {
      set_crystal(from.crystal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gold_, other->gold_);
    std::swap(coin_, other->coin_);
    std::swap(recharge_, other->recharge_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(smeltvalue_, other->smeltvalue_);
    std::swap(signature_, other->signature_);
    std::swap(honorvalue_, other->honorvalue_);
    std::swap(reputationvalue_, other->reputationvalue_);
    std::swap(monthcardleftday_, other->monthcardleftday_);
    std::swap(talentnum_, other->talentnum_);
    std::swap(facebookcount_, other->facebookcount_);
    std::swap(crystal_, other->crystal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEquip::kPartFieldNumber;
const int RoleEquip::kEquipIdFieldNumber;
const int RoleEquip::kEquipItemIdFieldNumber;
const int RoleEquip::kStrengthFieldNumber;
const int RoleEquip::kGemInfoFieldNumber;
#endif  // !_MSC_VER

RoleEquip::RoleEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEquip::InitAsDefaultInstance() {
}

RoleEquip::RoleEquip(const RoleEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEquip::SharedCtor() {
  _cached_size_ = 0;
  part_ = 0;
  equipid_ = GOOGLE_LONGLONG(0);
  equipitemid_ = 0;
  strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEquip::~RoleEquip() {
  SharedDtor();
}

void RoleEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEquip_descriptor_;
}

const RoleEquip& RoleEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

RoleEquip* RoleEquip::default_instance_ = NULL;

RoleEquip* RoleEquip::New() const {
  return new RoleEquip;
}

void RoleEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_ = 0;
    equipid_ = GOOGLE_LONGLONG(0);
    equipitemid_ = 0;
    strength_ = 0;
  }
  geminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipId;
        break;
      }

      // required int64 equipId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipItemId;
        break;
      }

      // required int32 equipItemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipitemid_)));
          set_has_equipitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strength;
        break;
      }

      // required int32 strength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gemInfo;
        break;
      }

      // repeated .GemInfo gemInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 part = 1;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part(), output);
  }

  // required int64 equipId = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equipid(), output);
  }

  // required int32 equipItemId = 3;
  if (has_equipitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipitemid(), output);
  }

  // required int32 strength = 4;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->strength(), output);
  }

  // repeated .GemInfo gemInfo = 5;
  for (int i = 0; i < this->geminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->geminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 part = 1;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part(), target);
  }

  // required int64 equipId = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equipid(), target);
  }

  // required int32 equipItemId = 3;
  if (has_equipitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipitemid(), target);
  }

  // required int32 strength = 4;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->strength(), target);
  }

  // repeated .GemInfo gemInfo = 5;
  for (int i = 0; i < this->geminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->geminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 part = 1;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

    // required int64 equipId = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipid());
    }

    // required int32 equipItemId = 3;
    if (has_equipitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipitemid());
    }

    // required int32 strength = 4;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

  }
  // repeated .GemInfo gemInfo = 5;
  total_size += 1 * this->geminfo_size();
  for (int i = 0; i < this->geminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEquip::MergeFrom(const RoleEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  geminfo_.MergeFrom(from.geminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_equipitemid()) {
      set_equipitemid(from.equipitemid());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEquip::CopyFrom(const RoleEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < geminfo_size(); i++) {
    if (!this->geminfo(i).IsInitialized()) return false;
  }
  return true;
}

void RoleEquip::Swap(RoleEquip* other) {
  if (other != this) {
    std::swap(part_, other->part_);
    std::swap(equipid_, other->equipid_);
    std::swap(equipitemid_, other->equipitemid_);
    std::swap(strength_, other->strength_);
    geminfo_.Swap(&other->geminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEquip_descriptor_;
  metadata.reflection = RoleEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSkill::kSkillIdFieldNumber;
const int RoleSkill::kItemIdFieldNumber;
const int RoleSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

RoleSkill::RoleSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSkill::InitAsDefaultInstance() {
}

RoleSkill::RoleSkill(const RoleSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  itemid_ = 0;
  level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSkill::~RoleSkill() {
  SharedDtor();
}

void RoleSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSkill_descriptor_;
}

const RoleSkill& RoleSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

RoleSkill* RoleSkill::default_instance_ = NULL;

RoleSkill* RoleSkill::New() const {
  return new RoleSkill;
}

void RoleSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    itemid_ = 0;
    level_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 level = 3 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 level = 3 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 level = 3 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSkill::MergeFrom(const RoleSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSkill::CopyFrom(const RoleSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleSkill::Swap(RoleSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(itemid_, other->itemid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSkill_descriptor_;
  metadata.reflection = RoleSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleElement::kIndexFieldNumber;
const int RoleElement::kElementIdFieldNumber;
const int RoleElement::kElementItemIdFieldNumber;
const int RoleElement::kLevelFieldNumber;
const int RoleElement::kQualityFieldNumber;
const int RoleElement::kTypeFieldNumber;
#endif  // !_MSC_VER

RoleElement::RoleElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleElement::InitAsDefaultInstance() {
}

RoleElement::RoleElement(const RoleElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleElement::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  elementid_ = GOOGLE_LONGLONG(0);
  elementitemid_ = 0;
  level_ = 0;
  quality_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleElement::~RoleElement() {
  SharedDtor();
}

void RoleElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleElement_descriptor_;
}

const RoleElement& RoleElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

RoleElement* RoleElement::default_instance_ = NULL;

RoleElement* RoleElement::New() const {
  return new RoleElement;
}

void RoleElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    elementid_ = GOOGLE_LONGLONG(0);
    elementitemid_ = 0;
    level_ = 0;
    quality_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elementId;
        break;
      }

      // required int64 elementId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elementId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elementItemId;
        break;
      }

      // required int32 elementItemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elementItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementitemid_)));
          set_has_elementitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int64 elementId = 2;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->elementid(), output);
  }

  // required int32 elementItemId = 3;
  if (has_elementitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->elementitemid(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // required int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int64 elementId = 2;
  if (has_elementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->elementid(), target);
  }

  // required int32 elementItemId = 3;
  if (has_elementitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->elementitemid(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // required int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int64 elementId = 2;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->elementid());
    }

    // required int32 elementItemId = 3;
    if (has_elementitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementitemid());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleElement::MergeFrom(const RoleElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementitemid()) {
      set_elementitemid(from.elementitemid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleElement::CopyFrom(const RoleElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RoleElement::Swap(RoleElement* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(elementid_, other->elementid_);
    std::swap(elementitemid_, other->elementitemid_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleElement_descriptor_;
  metadata.reflection = RoleElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfo::kRoleIdFieldNumber;
const int RoleInfo::kTypeFieldNumber;
const int RoleInfo::kItemIdFieldNumber;
const int RoleInfo::kProfFieldNumber;
const int RoleInfo::kNameFieldNumber;
const int RoleInfo::kLevelFieldNumber;
const int RoleInfo::kExpFieldNumber;
const int RoleInfo::kFightFieldNumber;
const int RoleInfo::kStatusFieldNumber;
const int RoleInfo::kEquipsFieldNumber;
const int RoleInfo::kSkillsFieldNumber;
const int RoleInfo::kAttributeFieldNumber;
const int RoleInfo::kBaptizeAttrFieldNumber;
const int RoleInfo::kBaseAttrFieldNumber;
const int RoleInfo::kSkills2FieldNumber;
const int RoleInfo::kSkills3FieldNumber;
const int RoleInfo::kStarLevelFieldNumber;
const int RoleInfo::kStarExpFieldNumber;
const int RoleInfo::kElementsFieldNumber;
const int RoleInfo::kRebirthStageFieldNumber;
const int RoleInfo::kStageLevelFieldNumber;
#endif  // !_MSC_VER

RoleInfo::RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfo::InitAsDefaultInstance() {
  attribute_ = const_cast< ::AttrInfo*>(&::AttrInfo::default_instance());
  baptizeattr_ = const_cast< ::AttrInfo*>(&::AttrInfo::default_instance());
  baseattr_ = const_cast< ::AttrInfo*>(&::AttrInfo::default_instance());
}

RoleInfo::RoleInfo(const RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  type_ = 0;
  itemid_ = 0;
  prof_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  fight_ = 0;
  status_ = 0;
  attribute_ = NULL;
  baptizeattr_ = NULL;
  baseattr_ = NULL;
  starlevel_ = 0;
  starexp_ = 0;
  rebirthstage_ = 0;
  stagelevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfo::~RoleInfo() {
  SharedDtor();
}

void RoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete attribute_;
    delete baptizeattr_;
    delete baseattr_;
  }
}

void RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfo_descriptor_;
}

const RoleInfo& RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

RoleInfo* RoleInfo::default_instance_ = NULL;

RoleInfo* RoleInfo::New() const {
  return new RoleInfo;
}

void RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    type_ = 0;
    itemid_ = 0;
    prof_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    fight_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
    if (has_attribute()) {
      if (attribute_ != NULL) attribute_->::AttrInfo::Clear();
    }
    if (has_baptizeattr()) {
      if (baptizeattr_ != NULL) baptizeattr_->::AttrInfo::Clear();
    }
    if (has_baseattr()) {
      if (baseattr_ != NULL) baseattr_->::AttrInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    starlevel_ = 0;
    starexp_ = 0;
    rebirthstage_ = 0;
    stagelevel_ = 0;
  }
  equips_.Clear();
  skills_.Clear();
  skills2_.Clear();
  skills3_.Clear();
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // required int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // required int64 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // required int32 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // required int32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        break;
      }

      // repeated .RoleEquip equips = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        if (input->ExpectTag(90)) goto parse_skills;
        break;
      }

      // repeated .RoleSkill skills = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_skills;
        if (input->ExpectTag(98)) goto parse_attribute;
        break;
      }

      // required .AttrInfo attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_baptizeAttr;
        break;
      }

      // optional .AttrInfo baptizeAttr = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baptizeAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baptizeattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_baseAttr;
        break;
      }

      // optional .AttrInfo baseAttr = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_skills2;
        break;
      }

      // repeated .RoleSkill skills2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_skills2;
        if (input->ExpectTag(130)) goto parse_skills3;
        break;
      }

      // repeated .RoleSkill skills3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_skills3;
        if (input->ExpectTag(136)) goto parse_starLevel;
        break;
      }

      // optional int32 starLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_starExp;
        break;
      }

      // optional int32 starExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starexp_)));
          set_has_starexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_elements;
        break;
      }

      // repeated .RoleElement elements = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_elements;
        if (input->ExpectTag(160)) goto parse_rebirthStage;
        break;
      }

      // optional int32 rebirthStage = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebirthStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rebirthstage_)));
          set_has_rebirthstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_stageLevel;
        break;
      }

      // optional int32 stageLevel = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stageLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stagelevel_)));
          set_has_stagelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // required int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required int64 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->exp(), output);
  }

  // required int32 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fight(), output);
  }

  // required int32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }

  // repeated .RoleEquip equips = 10;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equips(i), output);
  }

  // repeated .RoleSkill skills = 11;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->skills(i), output);
  }

  // required .AttrInfo attribute = 12;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attribute(), output);
  }

  // optional .AttrInfo baptizeAttr = 13;
  if (has_baptizeattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->baptizeattr(), output);
  }

  // optional .AttrInfo baseAttr = 14;
  if (has_baseattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->baseattr(), output);
  }

  // repeated .RoleSkill skills2 = 15;
  for (int i = 0; i < this->skills2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->skills2(i), output);
  }

  // repeated .RoleSkill skills3 = 16;
  for (int i = 0; i < this->skills3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->skills3(i), output);
  }

  // optional int32 starLevel = 17;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->starlevel(), output);
  }

  // optional int32 starExp = 18;
  if (has_starexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->starexp(), output);
  }

  // repeated .RoleElement elements = 19;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->elements(i), output);
  }

  // optional int32 rebirthStage = 20;
  if (has_rebirthstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->rebirthstage(), output);
  }

  // optional int32 stageLevel = 21;
  if (has_stagelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->stagelevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // required int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required int64 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->exp(), target);
  }

  // required int32 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fight(), target);
  }

  // required int32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }

  // repeated .RoleEquip equips = 10;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equips(i), target);
  }

  // repeated .RoleSkill skills = 11;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->skills(i), target);
  }

  // required .AttrInfo attribute = 12;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attribute(), target);
  }

  // optional .AttrInfo baptizeAttr = 13;
  if (has_baptizeattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->baptizeattr(), target);
  }

  // optional .AttrInfo baseAttr = 14;
  if (has_baseattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->baseattr(), target);
  }

  // repeated .RoleSkill skills2 = 15;
  for (int i = 0; i < this->skills2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->skills2(i), target);
  }

  // repeated .RoleSkill skills3 = 16;
  for (int i = 0; i < this->skills3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->skills3(i), target);
  }

  // optional int32 starLevel = 17;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->starlevel(), target);
  }

  // optional int32 starExp = 18;
  if (has_starexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->starexp(), target);
  }

  // repeated .RoleElement elements = 19;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->elements(i), target);
  }

  // optional int32 rebirthStage = 20;
  if (has_rebirthstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->rebirthstage(), target);
  }

  // optional int32 stageLevel = 21;
  if (has_stagelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->stagelevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int64 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int32 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required .AttrInfo attribute = 12;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attribute());
    }

    // optional .AttrInfo baptizeAttr = 13;
    if (has_baptizeattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baptizeattr());
    }

    // optional .AttrInfo baseAttr = 14;
    if (has_baseattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseattr());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 starLevel = 17;
    if (has_starlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlevel());
    }

    // optional int32 starExp = 18;
    if (has_starexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starexp());
    }

    // optional int32 rebirthStage = 20;
    if (has_rebirthstage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rebirthstage());
    }

    // optional int32 stageLevel = 21;
    if (has_stagelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stagelevel());
    }

  }
  // repeated .RoleEquip equips = 10;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .RoleSkill skills = 11;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated .RoleSkill skills2 = 15;
  total_size += 1 * this->skills2_size();
  for (int i = 0; i < this->skills2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills2(i));
  }

  // repeated .RoleSkill skills3 = 16;
  total_size += 2 * this->skills3_size();
  for (int i = 0; i < this->skills3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills3(i));
  }

  // repeated .RoleElement elements = 19;
  total_size += 2 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfo::MergeFrom(const RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  skills_.MergeFrom(from.skills_);
  skills2_.MergeFrom(from.skills2_);
  skills3_.MergeFrom(from.skills3_);
  elements_.MergeFrom(from.elements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_attribute()) {
      mutable_attribute()->::AttrInfo::MergeFrom(from.attribute());
    }
    if (from.has_baptizeattr()) {
      mutable_baptizeattr()->::AttrInfo::MergeFrom(from.baptizeattr());
    }
    if (from.has_baseattr()) {
      mutable_baseattr()->::AttrInfo::MergeFrom(from.baseattr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_starexp()) {
      set_starexp(from.starexp());
    }
    if (from.has_rebirthstage()) {
      set_rebirthstage(from.rebirthstage());
    }
    if (from.has_stagelevel()) {
      set_stagelevel(from.stagelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000009ff) != 0x000009ff) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  if (has_attribute()) {
    if (!this->attribute().IsInitialized()) return false;
  }
  if (has_baptizeattr()) {
    if (!this->baptizeattr().IsInitialized()) return false;
  }
  if (has_baseattr()) {
    if (!this->baseattr().IsInitialized()) return false;
  }
  for (int i = 0; i < skills2_size(); i++) {
    if (!this->skills2(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skills3_size(); i++) {
    if (!this->skills3(i).IsInitialized()) return false;
  }
  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void RoleInfo::Swap(RoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(prof_, other->prof_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(fight_, other->fight_);
    std::swap(status_, other->status_);
    equips_.Swap(&other->equips_);
    skills_.Swap(&other->skills_);
    std::swap(attribute_, other->attribute_);
    std::swap(baptizeattr_, other->baptizeattr_);
    std::swap(baseattr_, other->baseattr_);
    skills2_.Swap(&other->skills2_);
    skills3_.Swap(&other->skills3_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(starexp_, other->starexp_);
    elements_.Swap(&other->elements_);
    std::swap(rebirthstage_, other->rebirthstage_);
    std::swap(stagelevel_, other->stagelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfo_descriptor_;
  metadata.reflection = RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPPlayerInfoSync::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

HPPlayerInfoSync::HPPlayerInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerInfoSync::InitAsDefaultInstance() {
}

HPPlayerInfoSync::HPPlayerInfoSync(const HPPlayerInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerInfoSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerInfoSync::~HPPlayerInfoSync() {
  SharedDtor();
}

void HPPlayerInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPPlayerInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerInfoSync_descriptor_;
}

const HPPlayerInfoSync& HPPlayerInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPPlayerInfoSync* HPPlayerInfoSync::default_instance_ = NULL;

HPPlayerInfoSync* HPPlayerInfoSync::New() const {
  return new HPPlayerInfoSync;
}

void HPPlayerInfoSync::Clear() {
  playerinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo playerInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPPlayerInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo playerInfos = 1;
  for (int i = 0; i < this->playerinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo playerInfos = 1;
  for (int i = 0; i < this->playerinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerInfoSync::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo playerInfos = 1;
  total_size += 1 * this->playerinfos_size();
  for (int i = 0; i < this->playerinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerInfoSync::MergeFrom(const HPPlayerInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfos_.MergeFrom(from.playerinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerInfoSync::CopyFrom(const HPPlayerInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerInfoSync::IsInitialized() const {

  for (int i = 0; i < playerinfos_size(); i++) {
    if (!this->playerinfos(i).IsInitialized()) return false;
  }
  return true;
}

void HPPlayerInfoSync::Swap(HPPlayerInfoSync* other) {
  if (other != this) {
    playerinfos_.Swap(&other->playerinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerInfoSync_descriptor_;
  metadata.reflection = HPPlayerInfoSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleInfoSync::kRoleInfosFieldNumber;
#endif  // !_MSC_VER

HPRoleInfoSync::HPRoleInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleInfoSync::InitAsDefaultInstance() {
}

HPRoleInfoSync::HPRoleInfoSync(const HPRoleInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleInfoSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleInfoSync::~HPRoleInfoSync() {
  SharedDtor();
}

void HPRoleInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPRoleInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleInfoSync_descriptor_;
}

const HPRoleInfoSync& HPRoleInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleInfoSync* HPRoleInfoSync::default_instance_ = NULL;

HPRoleInfoSync* HPRoleInfoSync::New() const {
  return new HPRoleInfoSync;
}

void HPRoleInfoSync::Clear() {
  roleinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoleInfo roleInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RoleInfo roleInfos = 1;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RoleInfo roleInfos = 1;
  for (int i = 0; i < this->roleinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleInfoSync::ByteSize() const {
  int total_size = 0;

  // repeated .RoleInfo roleInfos = 1;
  total_size += 1 * this->roleinfos_size();
  for (int i = 0; i < this->roleinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleInfoSync::MergeFrom(const HPRoleInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleinfos_.MergeFrom(from.roleinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleInfoSync::CopyFrom(const HPRoleInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleInfoSync::IsInitialized() const {

  for (int i = 0; i < roleinfos_size(); i++) {
    if (!this->roleinfos(i).IsInitialized()) return false;
  }
  return true;
}

void HPRoleInfoSync::Swap(HPRoleInfoSync* other) {
  if (other != this) {
    roleinfos_.Swap(&other->roleinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleInfoSync_descriptor_;
  metadata.reflection = HPRoleInfoSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPSysSetting::kAutoSellEquipFieldNumber;
const int HPSysSetting::kChatCloseFieldNumber;
const int HPSysSetting::kWipeBossFieldNumber;
const int HPSysSetting::kMusicOnFieldNumber;
const int HPSysSetting::kSoundOnFieldNumber;
const int HPSysSetting::kShowAreaFieldNumber;
const int HPSysSetting::kOnlyTextFieldNumber;
const int HPSysSetting::kAutoDecoElementFieldNumber;
const int HPSysSetting::kFontSizeFieldNumber;
#endif  // !_MSC_VER

HPSysSetting::HPSysSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPSysSetting::InitAsDefaultInstance() {
}

HPSysSetting::HPSysSetting(const HPSysSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPSysSetting::SharedCtor() {
  _cached_size_ = 0;
  autosellequip_ = 0;
  chatclose_ = 0;
  wipeboss_ = 0;
  musicon_ = 0;
  soundon_ = 0;
  showarea_ = 0;
  onlytext_ = 0;
  autodecoelement_ = 0;
  fontsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPSysSetting::~HPSysSetting() {
  SharedDtor();
}

void HPSysSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPSysSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPSysSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPSysSetting_descriptor_;
}

const HPSysSetting& HPSysSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPSysSetting* HPSysSetting::default_instance_ = NULL;

HPSysSetting* HPSysSetting::New() const {
  return new HPSysSetting;
}

void HPSysSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autosellequip_ = 0;
    chatclose_ = 0;
    wipeboss_ = 0;
    musicon_ = 0;
    soundon_ = 0;
    showarea_ = 0;
    onlytext_ = 0;
    autodecoelement_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fontsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPSysSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoSellEquip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autosellequip_)));
          set_has_autosellequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chatClose;
        break;
      }

      // optional int32 chatClose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatclose_)));
          set_has_chatclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wipeBoss;
        break;
      }

      // optional int32 wipeBoss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wipeBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wipeboss_)));
          set_has_wipeboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_musicOn;
        break;
      }

      // optional int32 musicOn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &musicon_)));
          set_has_musicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_soundOn;
        break;
      }

      // optional int32 soundOn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soundOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundon_)));
          set_has_soundon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_showArea;
        break;
      }

      // optional int32 showArea = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showarea_)));
          set_has_showarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_onlyText;
        break;
      }

      // optional int32 onlyText = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlyText:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlytext_)));
          set_has_onlytext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_autoDecoElement;
        break;
      }

      // optional int32 autoDecoElement = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoDecoElement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autodecoelement_)));
          set_has_autodecoelement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fontSize;
        break;
      }

      // optional int32 fontSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPSysSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 autoSellEquip = 1;
  if (has_autosellequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autosellequip(), output);
  }

  // optional int32 chatClose = 2;
  if (has_chatclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chatclose(), output);
  }

  // optional int32 wipeBoss = 3;
  if (has_wipeboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wipeboss(), output);
  }

  // optional int32 musicOn = 4;
  if (has_musicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->musicon(), output);
  }

  // optional int32 soundOn = 5;
  if (has_soundon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->soundon(), output);
  }

  // optional int32 showArea = 6;
  if (has_showarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->showarea(), output);
  }

  // optional int32 onlyText = 7;
  if (has_onlytext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->onlytext(), output);
  }

  // optional int32 autoDecoElement = 8;
  if (has_autodecoelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->autodecoelement(), output);
  }

  // optional int32 fontSize = 9;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fontsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPSysSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 autoSellEquip = 1;
  if (has_autosellequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autosellequip(), target);
  }

  // optional int32 chatClose = 2;
  if (has_chatclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chatclose(), target);
  }

  // optional int32 wipeBoss = 3;
  if (has_wipeboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wipeboss(), target);
  }

  // optional int32 musicOn = 4;
  if (has_musicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->musicon(), target);
  }

  // optional int32 soundOn = 5;
  if (has_soundon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->soundon(), target);
  }

  // optional int32 showArea = 6;
  if (has_showarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->showarea(), target);
  }

  // optional int32 onlyText = 7;
  if (has_onlytext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->onlytext(), target);
  }

  // optional int32 autoDecoElement = 8;
  if (has_autodecoelement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->autodecoelement(), target);
  }

  // optional int32 fontSize = 9;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fontsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPSysSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoSellEquip = 1;
    if (has_autosellequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autosellequip());
    }

    // optional int32 chatClose = 2;
    if (has_chatclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatclose());
    }

    // optional int32 wipeBoss = 3;
    if (has_wipeboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wipeboss());
    }

    // optional int32 musicOn = 4;
    if (has_musicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->musicon());
    }

    // optional int32 soundOn = 5;
    if (has_soundon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundon());
    }

    // optional int32 showArea = 6;
    if (has_showarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showarea());
    }

    // optional int32 onlyText = 7;
    if (has_onlytext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlytext());
    }

    // optional int32 autoDecoElement = 8;
    if (has_autodecoelement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autodecoelement());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fontSize = 9;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPSysSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPSysSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPSysSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPSysSetting::MergeFrom(const HPSysSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autosellequip()) {
      set_autosellequip(from.autosellequip());
    }
    if (from.has_chatclose()) {
      set_chatclose(from.chatclose());
    }
    if (from.has_wipeboss()) {
      set_wipeboss(from.wipeboss());
    }
    if (from.has_musicon()) {
      set_musicon(from.musicon());
    }
    if (from.has_soundon()) {
      set_soundon(from.soundon());
    }
    if (from.has_showarea()) {
      set_showarea(from.showarea());
    }
    if (from.has_onlytext()) {
      set_onlytext(from.onlytext());
    }
    if (from.has_autodecoelement()) {
      set_autodecoelement(from.autodecoelement());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPSysSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPSysSetting::CopyFrom(const HPSysSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPSysSetting::IsInitialized() const {

  return true;
}

void HPSysSetting::Swap(HPSysSetting* other) {
  if (other != this) {
    std::swap(autosellequip_, other->autosellequip_);
    std::swap(chatclose_, other->chatclose_);
    std::swap(wipeboss_, other->wipeboss_);
    std::swap(musicon_, other->musicon_);
    std::swap(soundon_, other->soundon_);
    std::swap(showarea_, other->showarea_);
    std::swap(onlytext_, other->onlytext_);
    std::swap(autodecoelement_, other->autodecoelement_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPSysSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPSysSetting_descriptor_;
  metadata.reflection = HPSysSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPPlayerStateSync::kBuyCoinTimesFieldNumber;
const int HPPlayerStateSync::kCurrentEquipBagSizeFieldNumber;
const int HPPlayerStateSync::kLeftEquipBagExtendTimesFieldNumber;
const int HPPlayerStateSync::kAutoSellEquipFieldNumber;
const int HPPlayerStateSync::kChatCloseFieldNumber;
const int HPPlayerStateSync::kFastFightTimesFieldNumber;
const int HPPlayerStateSync::kFastFightBuyTimesFieldNumber;
const int HPPlayerStateSync::kBossFightTimesFieldNumber;
const int HPPlayerStateSync::kBossFightBuyTimesFieldNumber;
const int HPPlayerStateSync::kNextBattleTimeFieldNumber;
const int HPPlayerStateSync::kCurBattleMapFieldNumber;
const int HPPlayerStateSync::kPassMapIdFieldNumber;
const int HPPlayerStateSync::kGiftStatusFieldNumber;
const int HPPlayerStateSync::kBossWipeFieldNumber;
const int HPPlayerStateSync::kEquipSmeltRefeshFieldNumber;
const int HPPlayerStateSync::kGongceCompleteDaysFieldNumber;
const int HPPlayerStateSync::kMusicOnFieldNumber;
const int HPPlayerStateSync::kSoundOnFieldNumber;
const int HPPlayerStateSync::kShowAreaFieldNumber;
const int HPPlayerStateSync::kPassEliteMapIdFieldNumber;
const int HPPlayerStateSync::kStarStoneTimesFieldNumber;
const int HPPlayerStateSync::kEliteFightTimesFieldNumber;
const int HPPlayerStateSync::kEliteFightBuyTimesFieldNumber;
const int HPPlayerStateSync::kNewGuideStateFieldNumber;
const int HPPlayerStateSync::kOnlyTextFieldNumber;
const int HPPlayerStateSync::kIsCSOPenFieldNumber;
const int HPPlayerStateSync::kMultiEliteTimesFieldNumber;
const int HPPlayerStateSync::kElementBagSizeFieldNumber;
const int HPPlayerStateSync::kIsFirstLoginFieldNumber;
const int HPPlayerStateSync::kNewBattleMapFieldNumber;
const int HPPlayerStateSync::kAutoDecoElementFieldNumber;
const int HPPlayerStateSync::kFontSizeFieldNumber;
const int HPPlayerStateSync::kHourCardUseCountOneDayFieldNumber;
const int HPPlayerStateSync::kLeftFreeFastFightTimesFieldNumber;
const int HPPlayerStateSync::kLeftFreeRefreshShopTimesFieldNumber;
const int HPPlayerStateSync::kLeftFreeRefreshMakeEquipTimesFieldNumber;
const int HPPlayerStateSync::kGemShopBuyCountFieldNumber;
#endif  // !_MSC_VER

HPPlayerStateSync::HPPlayerStateSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerStateSync::InitAsDefaultInstance() {
}

HPPlayerStateSync::HPPlayerStateSync(const HPPlayerStateSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerStateSync::SharedCtor() {
  _cached_size_ = 0;
  buycointimes_ = 0;
  currentequipbagsize_ = 0;
  leftequipbagextendtimes_ = 0;
  autosellequip_ = 0;
  chatclose_ = 0;
  fastfighttimes_ = 0;
  fastfightbuytimes_ = 0;
  bossfighttimes_ = 0;
  bossfightbuytimes_ = 0;
  nextbattletime_ = 0;
  curbattlemap_ = 0;
  passmapid_ = 0;
  giftstatus_ = 0;
  bosswipe_ = 0;
  equipsmeltrefesh_ = 0;
  gongcecompletedays_ = 0;
  musicon_ = 0;
  soundon_ = 0;
  showarea_ = 0;
  passelitemapid_ = 0;
  starstonetimes_ = 0;
  elitefighttimes_ = 0;
  elitefightbuytimes_ = 0;
  newguidestate_ = 0;
  onlytext_ = 0;
  iscsopen_ = false;
  multielitetimes_ = 0;
  elementbagsize_ = 0;
  isfirstlogin_ = false;
  newbattlemap_ = 0;
  autodecoelement_ = 0;
  fontsize_ = 0;
  hourcardusecountoneday_ = 0;
  leftfreefastfighttimes_ = 0;
  leftfreerefreshshoptimes_ = 0;
  leftfreerefreshmakeequiptimes_ = 0;
  gemshopbuycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerStateSync::~HPPlayerStateSync() {
  SharedDtor();
}

void HPPlayerStateSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPPlayerStateSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerStateSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerStateSync_descriptor_;
}

const HPPlayerStateSync& HPPlayerStateSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPPlayerStateSync* HPPlayerStateSync::default_instance_ = NULL;

HPPlayerStateSync* HPPlayerStateSync::New() const {
  return new HPPlayerStateSync;
}

void HPPlayerStateSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buycointimes_ = 0;
    currentequipbagsize_ = 0;
    leftequipbagextendtimes_ = 0;
    autosellequip_ = 0;
    chatclose_ = 0;
    fastfighttimes_ = 0;
    fastfightbuytimes_ = 0;
    bossfighttimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bossfightbuytimes_ = 0;
    nextbattletime_ = 0;
    curbattlemap_ = 0;
    passmapid_ = 0;
    giftstatus_ = 0;
    bosswipe_ = 0;
    equipsmeltrefesh_ = 0;
    gongcecompletedays_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    musicon_ = 0;
    soundon_ = 0;
    showarea_ = 0;
    passelitemapid_ = 0;
    starstonetimes_ = 0;
    elitefighttimes_ = 0;
    elitefightbuytimes_ = 0;
    newguidestate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    onlytext_ = 0;
    iscsopen_ = false;
    multielitetimes_ = 0;
    elementbagsize_ = 0;
    isfirstlogin_ = false;
    newbattlemap_ = 0;
    autodecoelement_ = 0;
    fontsize_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    hourcardusecountoneday_ = 0;
    leftfreefastfighttimes_ = 0;
    leftfreerefreshshoptimes_ = 0;
    leftfreerefreshmakeequiptimes_ = 0;
    gemshopbuycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerStateSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buyCoinTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycointimes_)));
          set_has_buycointimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentEquipBagSize;
        break;
      }

      // optional int32 currentEquipBagSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentEquipBagSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentequipbagsize_)));
          set_has_currentequipbagsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftEquipBagExtendTimes;
        break;
      }

      // optional int32 leftEquipBagExtendTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftEquipBagExtendTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftequipbagextendtimes_)));
          set_has_leftequipbagextendtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_autoSellEquip;
        break;
      }

      // optional int32 autoSellEquip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoSellEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autosellequip_)));
          set_has_autosellequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chatClose;
        break;
      }

      // optional int32 chatClose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatclose_)));
          set_has_chatclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fastFightTimes;
        break;
      }

      // optional int32 fastFightTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fastFightTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastfighttimes_)));
          set_has_fastfighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fastFightBuyTimes;
        break;
      }

      // optional int32 fastFightBuyTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fastFightBuyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastfightbuytimes_)));
          set_has_fastfightbuytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bossFightTimes;
        break;
      }

      // optional int32 bossFightTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossFightTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossfighttimes_)));
          set_has_bossfighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bossFightBuyTimes;
        break;
      }

      // optional int32 bossFightBuyTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossFightBuyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossfightbuytimes_)));
          set_has_bossfightbuytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nextBattleTime;
        break;
      }

      // optional int32 nextBattleTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextBattleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextbattletime_)));
          set_has_nextbattletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_curBattleMap;
        break;
      }

      // optional int32 curBattleMap = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curBattleMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curbattlemap_)));
          set_has_curbattlemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_passMapId;
        break;
      }

      // optional int32 passMapId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passmapid_)));
          set_has_passmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_giftStatus;
        break;
      }

      // optional int32 giftStatus = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftstatus_)));
          set_has_giftstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bossWipe;
        break;
      }

      // optional int32 bossWipe = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossWipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosswipe_)));
          set_has_bosswipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_equipSmeltRefesh;
        break;
      }

      // optional int32 equipSmeltRefesh = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipSmeltRefesh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipsmeltrefesh_)));
          set_has_equipsmeltrefesh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gongceCompleteDays;
        break;
      }

      // optional int32 gongceCompleteDays = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gongceCompleteDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gongcecompletedays_)));
          set_has_gongcecompletedays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_musicOn;
        break;
      }

      // optional int32 musicOn = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &musicon_)));
          set_has_musicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_soundOn;
        break;
      }

      // optional int32 soundOn = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soundOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundon_)));
          set_has_soundon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_showArea;
        break;
      }

      // optional int32 showArea = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showarea_)));
          set_has_showarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_passEliteMapId;
        break;
      }

      // optional int32 passEliteMapId = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passEliteMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passelitemapid_)));
          set_has_passelitemapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_starStoneTimes;
        break;
      }

      // optional int32 starStoneTimes = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starStoneTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starstonetimes_)));
          set_has_starstonetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_eliteFightTimes;
        break;
      }

      // optional int32 eliteFightTimes = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eliteFightTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elitefighttimes_)));
          set_has_elitefighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_eliteFightBuyTimes;
        break;
      }

      // optional int32 eliteFightBuyTimes = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eliteFightBuyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elitefightbuytimes_)));
          set_has_elitefightbuytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_newGuideState;
        break;
      }

      // optional int32 newGuideState = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGuideState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newguidestate_)));
          set_has_newguidestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_onlyText;
        break;
      }

      // optional int32 onlyText = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlyText:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlytext_)));
          set_has_onlytext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_isCSOPen;
        break;
      }

      // optional bool isCSOPen = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCSOPen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscsopen_)));
          set_has_iscsopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_multiEliteTimes;
        break;
      }

      // optional int32 multiEliteTimes = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiEliteTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multielitetimes_)));
          set_has_multielitetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_elementBagSize;
        break;
      }

      // optional int32 elementBagSize = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elementBagSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementbagsize_)));
          set_has_elementbagsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_isFirstLogin;
        break;
      }

      // optional bool isFirstLogin = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFirstLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirstlogin_)));
          set_has_isfirstlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_newBattleMap;
        break;
      }

      // optional int32 newBattleMap = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newBattleMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newbattlemap_)));
          set_has_newbattlemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_autoDecoElement;
        break;
      }

      // optional int32 autoDecoElement = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoDecoElement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autodecoelement_)));
          set_has_autodecoelement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_fontSize;
        break;
      }

      // optional int32 fontSize = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_hourCardUseCountOneDay;
        break;
      }

      // optional int32 hourCardUseCountOneDay = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hourCardUseCountOneDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hourcardusecountoneday_)));
          set_has_hourcardusecountoneday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_leftFreeFastFightTimes;
        break;
      }

      // optional int32 leftFreeFastFightTimes = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftFreeFastFightTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftfreefastfighttimes_)));
          set_has_leftfreefastfighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_leftFreeRefreshShopTimes;
        break;
      }

      // optional int32 leftFreeRefreshShopTimes = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftFreeRefreshShopTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftfreerefreshshoptimes_)));
          set_has_leftfreerefreshshoptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_leftFreeRefreshMakeEquipTimes;
        break;
      }

      // optional int32 leftFreeRefreshMakeEquipTimes = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftFreeRefreshMakeEquipTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftfreerefreshmakeequiptimes_)));
          set_has_leftfreerefreshmakeequiptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_gemShopBuyCount;
        break;
      }

      // optional int32 gemShopBuyCount = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemShopBuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemshopbuycount_)));
          set_has_gemshopbuycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPPlayerStateSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buyCoinTimes = 1;
  if (has_buycointimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buycointimes(), output);
  }

  // optional int32 currentEquipBagSize = 2;
  if (has_currentequipbagsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentequipbagsize(), output);
  }

  // optional int32 leftEquipBagExtendTimes = 3;
  if (has_leftequipbagextendtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftequipbagextendtimes(), output);
  }

  // optional int32 autoSellEquip = 4;
  if (has_autosellequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->autosellequip(), output);
  }

  // optional int32 chatClose = 5;
  if (has_chatclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chatclose(), output);
  }

  // optional int32 fastFightTimes = 6;
  if (has_fastfighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fastfighttimes(), output);
  }

  // optional int32 fastFightBuyTimes = 7;
  if (has_fastfightbuytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fastfightbuytimes(), output);
  }

  // optional int32 bossFightTimes = 8;
  if (has_bossfighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bossfighttimes(), output);
  }

  // optional int32 bossFightBuyTimes = 9;
  if (has_bossfightbuytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bossfightbuytimes(), output);
  }

  // optional int32 nextBattleTime = 10;
  if (has_nextbattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nextbattletime(), output);
  }

  // optional int32 curBattleMap = 11;
  if (has_curbattlemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->curbattlemap(), output);
  }

  // optional int32 passMapId = 12;
  if (has_passmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->passmapid(), output);
  }

  // optional int32 giftStatus = 13;
  if (has_giftstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->giftstatus(), output);
  }

  // optional int32 bossWipe = 14;
  if (has_bosswipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bosswipe(), output);
  }

  // optional int32 equipSmeltRefesh = 15;
  if (has_equipsmeltrefesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->equipsmeltrefesh(), output);
  }

  // optional int32 gongceCompleteDays = 16;
  if (has_gongcecompletedays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gongcecompletedays(), output);
  }

  // optional int32 musicOn = 17;
  if (has_musicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->musicon(), output);
  }

  // optional int32 soundOn = 18;
  if (has_soundon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->soundon(), output);
  }

  // optional int32 showArea = 19;
  if (has_showarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->showarea(), output);
  }

  // optional int32 passEliteMapId = 20;
  if (has_passelitemapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->passelitemapid(), output);
  }

  // optional int32 starStoneTimes = 21;
  if (has_starstonetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->starstonetimes(), output);
  }

  // optional int32 eliteFightTimes = 22;
  if (has_elitefighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->elitefighttimes(), output);
  }

  // optional int32 eliteFightBuyTimes = 23;
  if (has_elitefightbuytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->elitefightbuytimes(), output);
  }

  // optional int32 newGuideState = 24;
  if (has_newguidestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->newguidestate(), output);
  }

  // optional int32 onlyText = 25;
  if (has_onlytext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->onlytext(), output);
  }

  // optional bool isCSOPen = 26;
  if (has_iscsopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->iscsopen(), output);
  }

  // optional int32 multiEliteTimes = 27;
  if (has_multielitetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->multielitetimes(), output);
  }

  // optional int32 elementBagSize = 28;
  if (has_elementbagsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->elementbagsize(), output);
  }

  // optional bool isFirstLogin = 29;
  if (has_isfirstlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->isfirstlogin(), output);
  }

  // optional int32 newBattleMap = 30;
  if (has_newbattlemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->newbattlemap(), output);
  }

  // optional int32 autoDecoElement = 31;
  if (has_autodecoelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->autodecoelement(), output);
  }

  // optional int32 fontSize = 32;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->fontsize(), output);
  }

  // optional int32 hourCardUseCountOneDay = 33;
  if (has_hourcardusecountoneday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->hourcardusecountoneday(), output);
  }

  // optional int32 leftFreeFastFightTimes = 34;
  if (has_leftfreefastfighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->leftfreefastfighttimes(), output);
  }

  // optional int32 leftFreeRefreshShopTimes = 35;
  if (has_leftfreerefreshshoptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->leftfreerefreshshoptimes(), output);
  }

  // optional int32 leftFreeRefreshMakeEquipTimes = 36;
  if (has_leftfreerefreshmakeequiptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->leftfreerefreshmakeequiptimes(), output);
  }

  // optional int32 gemShopBuyCount = 37;
  if (has_gemshopbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->gemshopbuycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerStateSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buyCoinTimes = 1;
  if (has_buycointimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buycointimes(), target);
  }

  // optional int32 currentEquipBagSize = 2;
  if (has_currentequipbagsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentequipbagsize(), target);
  }

  // optional int32 leftEquipBagExtendTimes = 3;
  if (has_leftequipbagextendtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftequipbagextendtimes(), target);
  }

  // optional int32 autoSellEquip = 4;
  if (has_autosellequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->autosellequip(), target);
  }

  // optional int32 chatClose = 5;
  if (has_chatclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chatclose(), target);
  }

  // optional int32 fastFightTimes = 6;
  if (has_fastfighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fastfighttimes(), target);
  }

  // optional int32 fastFightBuyTimes = 7;
  if (has_fastfightbuytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fastfightbuytimes(), target);
  }

  // optional int32 bossFightTimes = 8;
  if (has_bossfighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bossfighttimes(), target);
  }

  // optional int32 bossFightBuyTimes = 9;
  if (has_bossfightbuytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bossfightbuytimes(), target);
  }

  // optional int32 nextBattleTime = 10;
  if (has_nextbattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nextbattletime(), target);
  }

  // optional int32 curBattleMap = 11;
  if (has_curbattlemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->curbattlemap(), target);
  }

  // optional int32 passMapId = 12;
  if (has_passmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->passmapid(), target);
  }

  // optional int32 giftStatus = 13;
  if (has_giftstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->giftstatus(), target);
  }

  // optional int32 bossWipe = 14;
  if (has_bosswipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bosswipe(), target);
  }

  // optional int32 equipSmeltRefesh = 15;
  if (has_equipsmeltrefesh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->equipsmeltrefesh(), target);
  }

  // optional int32 gongceCompleteDays = 16;
  if (has_gongcecompletedays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gongcecompletedays(), target);
  }

  // optional int32 musicOn = 17;
  if (has_musicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->musicon(), target);
  }

  // optional int32 soundOn = 18;
  if (has_soundon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->soundon(), target);
  }

  // optional int32 showArea = 19;
  if (has_showarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->showarea(), target);
  }

  // optional int32 passEliteMapId = 20;
  if (has_passelitemapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->passelitemapid(), target);
  }

  // optional int32 starStoneTimes = 21;
  if (has_starstonetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->starstonetimes(), target);
  }

  // optional int32 eliteFightTimes = 22;
  if (has_elitefighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->elitefighttimes(), target);
  }

  // optional int32 eliteFightBuyTimes = 23;
  if (has_elitefightbuytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->elitefightbuytimes(), target);
  }

  // optional int32 newGuideState = 24;
  if (has_newguidestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->newguidestate(), target);
  }

  // optional int32 onlyText = 25;
  if (has_onlytext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->onlytext(), target);
  }

  // optional bool isCSOPen = 26;
  if (has_iscsopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->iscsopen(), target);
  }

  // optional int32 multiEliteTimes = 27;
  if (has_multielitetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->multielitetimes(), target);
  }

  // optional int32 elementBagSize = 28;
  if (has_elementbagsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->elementbagsize(), target);
  }

  // optional bool isFirstLogin = 29;
  if (has_isfirstlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->isfirstlogin(), target);
  }

  // optional int32 newBattleMap = 30;
  if (has_newbattlemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->newbattlemap(), target);
  }

  // optional int32 autoDecoElement = 31;
  if (has_autodecoelement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->autodecoelement(), target);
  }

  // optional int32 fontSize = 32;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->fontsize(), target);
  }

  // optional int32 hourCardUseCountOneDay = 33;
  if (has_hourcardusecountoneday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->hourcardusecountoneday(), target);
  }

  // optional int32 leftFreeFastFightTimes = 34;
  if (has_leftfreefastfighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->leftfreefastfighttimes(), target);
  }

  // optional int32 leftFreeRefreshShopTimes = 35;
  if (has_leftfreerefreshshoptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->leftfreerefreshshoptimes(), target);
  }

  // optional int32 leftFreeRefreshMakeEquipTimes = 36;
  if (has_leftfreerefreshmakeequiptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->leftfreerefreshmakeequiptimes(), target);
  }

  // optional int32 gemShopBuyCount = 37;
  if (has_gemshopbuycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->gemshopbuycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerStateSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buyCoinTimes = 1;
    if (has_buycointimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycointimes());
    }

    // optional int32 currentEquipBagSize = 2;
    if (has_currentequipbagsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentequipbagsize());
    }

    // optional int32 leftEquipBagExtendTimes = 3;
    if (has_leftequipbagextendtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftequipbagextendtimes());
    }

    // optional int32 autoSellEquip = 4;
    if (has_autosellequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autosellequip());
    }

    // optional int32 chatClose = 5;
    if (has_chatclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatclose());
    }

    // optional int32 fastFightTimes = 6;
    if (has_fastfighttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastfighttimes());
    }

    // optional int32 fastFightBuyTimes = 7;
    if (has_fastfightbuytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastfightbuytimes());
    }

    // optional int32 bossFightTimes = 8;
    if (has_bossfighttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossfighttimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bossFightBuyTimes = 9;
    if (has_bossfightbuytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossfightbuytimes());
    }

    // optional int32 nextBattleTime = 10;
    if (has_nextbattletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextbattletime());
    }

    // optional int32 curBattleMap = 11;
    if (has_curbattlemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curbattlemap());
    }

    // optional int32 passMapId = 12;
    if (has_passmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passmapid());
    }

    // optional int32 giftStatus = 13;
    if (has_giftstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftstatus());
    }

    // optional int32 bossWipe = 14;
    if (has_bosswipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosswipe());
    }

    // optional int32 equipSmeltRefesh = 15;
    if (has_equipsmeltrefesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipsmeltrefesh());
    }

    // optional int32 gongceCompleteDays = 16;
    if (has_gongcecompletedays()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gongcecompletedays());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 musicOn = 17;
    if (has_musicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->musicon());
    }

    // optional int32 soundOn = 18;
    if (has_soundon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundon());
    }

    // optional int32 showArea = 19;
    if (has_showarea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showarea());
    }

    // optional int32 passEliteMapId = 20;
    if (has_passelitemapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passelitemapid());
    }

    // optional int32 starStoneTimes = 21;
    if (has_starstonetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starstonetimes());
    }

    // optional int32 eliteFightTimes = 22;
    if (has_elitefighttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elitefighttimes());
    }

    // optional int32 eliteFightBuyTimes = 23;
    if (has_elitefightbuytimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elitefightbuytimes());
    }

    // optional int32 newGuideState = 24;
    if (has_newguidestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newguidestate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 onlyText = 25;
    if (has_onlytext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlytext());
    }

    // optional bool isCSOPen = 26;
    if (has_iscsopen()) {
      total_size += 2 + 1;
    }

    // optional int32 multiEliteTimes = 27;
    if (has_multielitetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multielitetimes());
    }

    // optional int32 elementBagSize = 28;
    if (has_elementbagsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementbagsize());
    }

    // optional bool isFirstLogin = 29;
    if (has_isfirstlogin()) {
      total_size += 2 + 1;
    }

    // optional int32 newBattleMap = 30;
    if (has_newbattlemap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newbattlemap());
    }

    // optional int32 autoDecoElement = 31;
    if (has_autodecoelement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autodecoelement());
    }

    // optional int32 fontSize = 32;
    if (has_fontsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 hourCardUseCountOneDay = 33;
    if (has_hourcardusecountoneday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hourcardusecountoneday());
    }

    // optional int32 leftFreeFastFightTimes = 34;
    if (has_leftfreefastfighttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftfreefastfighttimes());
    }

    // optional int32 leftFreeRefreshShopTimes = 35;
    if (has_leftfreerefreshshoptimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftfreerefreshshoptimes());
    }

    // optional int32 leftFreeRefreshMakeEquipTimes = 36;
    if (has_leftfreerefreshmakeequiptimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftfreerefreshmakeequiptimes());
    }

    // optional int32 gemShopBuyCount = 37;
    if (has_gemshopbuycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemshopbuycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerStateSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerStateSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerStateSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerStateSync::MergeFrom(const HPPlayerStateSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buycointimes()) {
      set_buycointimes(from.buycointimes());
    }
    if (from.has_currentequipbagsize()) {
      set_currentequipbagsize(from.currentequipbagsize());
    }
    if (from.has_leftequipbagextendtimes()) {
      set_leftequipbagextendtimes(from.leftequipbagextendtimes());
    }
    if (from.has_autosellequip()) {
      set_autosellequip(from.autosellequip());
    }
    if (from.has_chatclose()) {
      set_chatclose(from.chatclose());
    }
    if (from.has_fastfighttimes()) {
      set_fastfighttimes(from.fastfighttimes());
    }
    if (from.has_fastfightbuytimes()) {
      set_fastfightbuytimes(from.fastfightbuytimes());
    }
    if (from.has_bossfighttimes()) {
      set_bossfighttimes(from.bossfighttimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bossfightbuytimes()) {
      set_bossfightbuytimes(from.bossfightbuytimes());
    }
    if (from.has_nextbattletime()) {
      set_nextbattletime(from.nextbattletime());
    }
    if (from.has_curbattlemap()) {
      set_curbattlemap(from.curbattlemap());
    }
    if (from.has_passmapid()) {
      set_passmapid(from.passmapid());
    }
    if (from.has_giftstatus()) {
      set_giftstatus(from.giftstatus());
    }
    if (from.has_bosswipe()) {
      set_bosswipe(from.bosswipe());
    }
    if (from.has_equipsmeltrefesh()) {
      set_equipsmeltrefesh(from.equipsmeltrefesh());
    }
    if (from.has_gongcecompletedays()) {
      set_gongcecompletedays(from.gongcecompletedays());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_musicon()) {
      set_musicon(from.musicon());
    }
    if (from.has_soundon()) {
      set_soundon(from.soundon());
    }
    if (from.has_showarea()) {
      set_showarea(from.showarea());
    }
    if (from.has_passelitemapid()) {
      set_passelitemapid(from.passelitemapid());
    }
    if (from.has_starstonetimes()) {
      set_starstonetimes(from.starstonetimes());
    }
    if (from.has_elitefighttimes()) {
      set_elitefighttimes(from.elitefighttimes());
    }
    if (from.has_elitefightbuytimes()) {
      set_elitefightbuytimes(from.elitefightbuytimes());
    }
    if (from.has_newguidestate()) {
      set_newguidestate(from.newguidestate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_onlytext()) {
      set_onlytext(from.onlytext());
    }
    if (from.has_iscsopen()) {
      set_iscsopen(from.iscsopen());
    }
    if (from.has_multielitetimes()) {
      set_multielitetimes(from.multielitetimes());
    }
    if (from.has_elementbagsize()) {
      set_elementbagsize(from.elementbagsize());
    }
    if (from.has_isfirstlogin()) {
      set_isfirstlogin(from.isfirstlogin());
    }
    if (from.has_newbattlemap()) {
      set_newbattlemap(from.newbattlemap());
    }
    if (from.has_autodecoelement()) {
      set_autodecoelement(from.autodecoelement());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_hourcardusecountoneday()) {
      set_hourcardusecountoneday(from.hourcardusecountoneday());
    }
    if (from.has_leftfreefastfighttimes()) {
      set_leftfreefastfighttimes(from.leftfreefastfighttimes());
    }
    if (from.has_leftfreerefreshshoptimes()) {
      set_leftfreerefreshshoptimes(from.leftfreerefreshshoptimes());
    }
    if (from.has_leftfreerefreshmakeequiptimes()) {
      set_leftfreerefreshmakeequiptimes(from.leftfreerefreshmakeequiptimes());
    }
    if (from.has_gemshopbuycount()) {
      set_gemshopbuycount(from.gemshopbuycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerStateSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerStateSync::CopyFrom(const HPPlayerStateSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerStateSync::IsInitialized() const {

  return true;
}

void HPPlayerStateSync::Swap(HPPlayerStateSync* other) {
  if (other != this) {
    std::swap(buycointimes_, other->buycointimes_);
    std::swap(currentequipbagsize_, other->currentequipbagsize_);
    std::swap(leftequipbagextendtimes_, other->leftequipbagextendtimes_);
    std::swap(autosellequip_, other->autosellequip_);
    std::swap(chatclose_, other->chatclose_);
    std::swap(fastfighttimes_, other->fastfighttimes_);
    std::swap(fastfightbuytimes_, other->fastfightbuytimes_);
    std::swap(bossfighttimes_, other->bossfighttimes_);
    std::swap(bossfightbuytimes_, other->bossfightbuytimes_);
    std::swap(nextbattletime_, other->nextbattletime_);
    std::swap(curbattlemap_, other->curbattlemap_);
    std::swap(passmapid_, other->passmapid_);
    std::swap(giftstatus_, other->giftstatus_);
    std::swap(bosswipe_, other->bosswipe_);
    std::swap(equipsmeltrefesh_, other->equipsmeltrefesh_);
    std::swap(gongcecompletedays_, other->gongcecompletedays_);
    std::swap(musicon_, other->musicon_);
    std::swap(soundon_, other->soundon_);
    std::swap(showarea_, other->showarea_);
    std::swap(passelitemapid_, other->passelitemapid_);
    std::swap(starstonetimes_, other->starstonetimes_);
    std::swap(elitefighttimes_, other->elitefighttimes_);
    std::swap(elitefightbuytimes_, other->elitefightbuytimes_);
    std::swap(newguidestate_, other->newguidestate_);
    std::swap(onlytext_, other->onlytext_);
    std::swap(iscsopen_, other->iscsopen_);
    std::swap(multielitetimes_, other->multielitetimes_);
    std::swap(elementbagsize_, other->elementbagsize_);
    std::swap(isfirstlogin_, other->isfirstlogin_);
    std::swap(newbattlemap_, other->newbattlemap_);
    std::swap(autodecoelement_, other->autodecoelement_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(hourcardusecountoneday_, other->hourcardusecountoneday_);
    std::swap(leftfreefastfighttimes_, other->leftfreefastfighttimes_);
    std::swap(leftfreerefreshshoptimes_, other->leftfreerefreshshoptimes_);
    std::swap(leftfreerefreshmakeequiptimes_, other->leftfreerefreshmakeequiptimes_);
    std::swap(gemshopbuycount_, other->gemshopbuycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerStateSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerStateSync_descriptor_;
  metadata.reflection = HPPlayerStateSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPPlayerKickout::kReasonFieldNumber;
#endif  // !_MSC_VER

HPPlayerKickout::HPPlayerKickout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerKickout::InitAsDefaultInstance() {
}

HPPlayerKickout::HPPlayerKickout(const HPPlayerKickout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerKickout::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerKickout::~HPPlayerKickout() {
  SharedDtor();
}

void HPPlayerKickout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPPlayerKickout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerKickout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerKickout_descriptor_;
}

const HPPlayerKickout& HPPlayerKickout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPPlayerKickout* HPPlayerKickout::default_instance_ = NULL;

HPPlayerKickout* HPPlayerKickout::New() const {
  return new HPPlayerKickout;
}

void HPPlayerKickout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerKickout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPPlayerKickout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerKickout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerKickout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerKickout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerKickout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerKickout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerKickout::MergeFrom(const HPPlayerKickout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerKickout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerKickout::CopyFrom(const HPPlayerKickout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerKickout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPPlayerKickout::Swap(HPPlayerKickout* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerKickout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerKickout_descriptor_;
  metadata.reflection = HPPlayerKickout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleCreate::kRoleItemIdFieldNumber;
const int HPRoleCreate::kRoleNameFieldNumber;
#endif  // !_MSC_VER

HPRoleCreate::HPRoleCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleCreate::InitAsDefaultInstance() {
}

HPRoleCreate::HPRoleCreate(const HPRoleCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleCreate::SharedCtor() {
  _cached_size_ = 0;
  roleitemid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleCreate::~HPRoleCreate() {
  SharedDtor();
}

void HPRoleCreate::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void HPRoleCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleCreate_descriptor_;
}

const HPRoleCreate& HPRoleCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleCreate* HPRoleCreate::default_instance_ = NULL;

HPRoleCreate* HPRoleCreate::New() const {
  return new HPRoleCreate;
}

void HPRoleCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleitemid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleitemid_)));
          set_has_roleitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleItemId = 1;
  if (has_roleitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleitemid(), output);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleItemId = 1;
  if (has_roleitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleitemid(), target);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleItemId = 1;
    if (has_roleitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleitemid());
    }

    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleCreate::MergeFrom(const HPRoleCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleitemid()) {
      set_roleitemid(from.roleitemid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleCreate::CopyFrom(const HPRoleCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPRoleCreate::Swap(HPRoleCreate* other) {
  if (other != this) {
    std::swap(roleitemid_, other->roleitemid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleCreate_descriptor_;
  metadata.reflection = HPRoleCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleCreateRet::kStatusFieldNumber;
const int HPRoleCreateRet::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

HPRoleCreateRet::HPRoleCreateRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleCreateRet::InitAsDefaultInstance() {
  roleinfo_ = const_cast< ::RoleInfo*>(&::RoleInfo::default_instance());
}

HPRoleCreateRet::HPRoleCreateRet(const HPRoleCreateRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleCreateRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  roleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleCreateRet::~HPRoleCreateRet() {
  SharedDtor();
}

void HPRoleCreateRet::SharedDtor() {
  if (this != default_instance_) {
    delete roleinfo_;
  }
}

void HPRoleCreateRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleCreateRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleCreateRet_descriptor_;
}

const HPRoleCreateRet& HPRoleCreateRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleCreateRet* HPRoleCreateRet::default_instance_ = NULL;

HPRoleCreateRet* HPRoleCreateRet::New() const {
  return new HPRoleCreateRet;
}

void HPRoleCreateRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_roleinfo()) {
      if (roleinfo_ != NULL) roleinfo_->::RoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleCreateRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleInfo;
        break;
      }

      // optional .RoleInfo roleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleCreateRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .RoleInfo roleInfo = 2;
  if (has_roleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleCreateRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .RoleInfo roleInfo = 2;
  if (has_roleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleCreateRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .RoleInfo roleInfo = 2;
    if (has_roleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleCreateRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleCreateRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleCreateRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleCreateRet::MergeFrom(const HPRoleCreateRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_roleinfo()) {
      mutable_roleinfo()->::RoleInfo::MergeFrom(from.roleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleCreateRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleCreateRet::CopyFrom(const HPRoleCreateRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleCreateRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roleinfo()) {
    if (!this->roleinfo().IsInitialized()) return false;
  }
  return true;
}

void HPRoleCreateRet::Swap(HPRoleCreateRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(roleinfo_, other->roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleCreateRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleCreateRet_descriptor_;
  metadata.reflection = HPRoleCreateRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPAssembleFinish::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

HPAssembleFinish::HPAssembleFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPAssembleFinish::InitAsDefaultInstance() {
}

HPAssembleFinish::HPAssembleFinish(const HPAssembleFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPAssembleFinish::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPAssembleFinish::~HPAssembleFinish() {
  SharedDtor();
}

void HPAssembleFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPAssembleFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPAssembleFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPAssembleFinish_descriptor_;
}

const HPAssembleFinish& HPAssembleFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPAssembleFinish* HPAssembleFinish::default_instance_ = NULL;

HPAssembleFinish* HPAssembleFinish::New() const {
  return new HPAssembleFinish;
}

void HPAssembleFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPAssembleFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPAssembleFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPAssembleFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPAssembleFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPAssembleFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPAssembleFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPAssembleFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPAssembleFinish::MergeFrom(const HPAssembleFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPAssembleFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPAssembleFinish::CopyFrom(const HPAssembleFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPAssembleFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPAssembleFinish::Swap(HPAssembleFinish* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPAssembleFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPAssembleFinish_descriptor_;
  metadata.reflection = HPAssembleFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPChangeSignature::kSignatureFieldNumber;
#endif  // !_MSC_VER

HPChangeSignature::HPChangeSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPChangeSignature::InitAsDefaultInstance() {
}

HPChangeSignature::HPChangeSignature(const HPChangeSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPChangeSignature::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPChangeSignature::~HPChangeSignature() {
  SharedDtor();
}

void HPChangeSignature::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void HPChangeSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPChangeSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPChangeSignature_descriptor_;
}

const HPChangeSignature& HPChangeSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPChangeSignature* HPChangeSignature::default_instance_ = NULL;

HPChangeSignature* HPChangeSignature::New() const {
  return new HPChangeSignature;
}

void HPChangeSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPChangeSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPChangeSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPChangeSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPChangeSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPChangeSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPChangeSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPChangeSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPChangeSignature::MergeFrom(const HPChangeSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPChangeSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPChangeSignature::CopyFrom(const HPChangeSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPChangeSignature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPChangeSignature::Swap(HPChangeSignature* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPChangeSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPChangeSignature_descriptor_;
  metadata.reflection = HPChangeSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPChangeSignatureRet::kVersionFieldNumber;
#endif  // !_MSC_VER

HPChangeSignatureRet::HPChangeSignatureRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPChangeSignatureRet::InitAsDefaultInstance() {
}

HPChangeSignatureRet::HPChangeSignatureRet(const HPChangeSignatureRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPChangeSignatureRet::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPChangeSignatureRet::~HPChangeSignatureRet() {
  SharedDtor();
}

void HPChangeSignatureRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPChangeSignatureRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPChangeSignatureRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPChangeSignatureRet_descriptor_;
}

const HPChangeSignatureRet& HPChangeSignatureRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPChangeSignatureRet* HPChangeSignatureRet::default_instance_ = NULL;

HPChangeSignatureRet* HPChangeSignatureRet::New() const {
  return new HPChangeSignatureRet;
}

void HPChangeSignatureRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPChangeSignatureRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPChangeSignatureRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPChangeSignatureRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPChangeSignatureRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPChangeSignatureRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPChangeSignatureRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPChangeSignatureRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPChangeSignatureRet::MergeFrom(const HPChangeSignatureRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPChangeSignatureRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPChangeSignatureRet::CopyFrom(const HPChangeSignatureRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPChangeSignatureRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPChangeSignatureRet::Swap(HPChangeSignatureRet* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPChangeSignatureRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPChangeSignatureRet_descriptor_;
  metadata.reflection = HPChangeSignatureRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPUserKickOut::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

HPUserKickOut::HPUserKickOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPUserKickOut::InitAsDefaultInstance() {
}

HPUserKickOut::HPUserKickOut(const HPUserKickOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPUserKickOut::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPUserKickOut::~HPUserKickOut() {
  SharedDtor();
}

void HPUserKickOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPUserKickOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPUserKickOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPUserKickOut_descriptor_;
}

const HPUserKickOut& HPUserKickOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPUserKickOut* HPUserKickOut::default_instance_ = NULL;

HPUserKickOut* HPUserKickOut::New() const {
  return new HPUserKickOut;
}

void HPUserKickOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPUserKickOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPUserKickOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPUserKickOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPUserKickOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPUserKickOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPUserKickOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPUserKickOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPUserKickOut::MergeFrom(const HPUserKickOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPUserKickOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPUserKickOut::CopyFrom(const HPUserKickOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPUserKickOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPUserKickOut::Swap(HPUserKickOut* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPUserKickOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPUserKickOut_descriptor_;
  metadata.reflection = HPUserKickOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPDataNotify::kTypeFieldNumber;
const int HPDataNotify::kValueFieldNumber;
const int HPDataNotify::kGoodsIdFieldNumber;
#endif  // !_MSC_VER

HPDataNotify::HPDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPDataNotify::InitAsDefaultInstance() {
}

HPDataNotify::HPDataNotify(const HPDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPDataNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  goodsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPDataNotify::~HPDataNotify() {
  SharedDtor();
}

void HPDataNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPDataNotify_descriptor_;
}

const HPDataNotify& HPDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPDataNotify* HPDataNotify::default_instance_ = NULL;

HPDataNotify* HPDataNotify::New() const {
  return new HPDataNotify;
}

void HPDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
    goodsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsId;
        break;
      }

      // optional int32 goodsId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 goodsId = 3;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 goodsId = 3;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goodsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 goodsId = 3;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPDataNotify::MergeFrom(const HPDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPDataNotify::CopyFrom(const HPDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPDataNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPDataNotify::Swap(HPDataNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPDataNotify_descriptor_;
  metadata.reflection = HPDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPEquipSyncFinish::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

HPEquipSyncFinish::HPEquipSyncFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPEquipSyncFinish::InitAsDefaultInstance() {
}

HPEquipSyncFinish::HPEquipSyncFinish(const HPEquipSyncFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPEquipSyncFinish::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPEquipSyncFinish::~HPEquipSyncFinish() {
  SharedDtor();
}

void HPEquipSyncFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPEquipSyncFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPEquipSyncFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPEquipSyncFinish_descriptor_;
}

const HPEquipSyncFinish& HPEquipSyncFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPEquipSyncFinish* HPEquipSyncFinish::default_instance_ = NULL;

HPEquipSyncFinish* HPEquipSyncFinish::New() const {
  return new HPEquipSyncFinish;
}

void HPEquipSyncFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPEquipSyncFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPEquipSyncFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPEquipSyncFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPEquipSyncFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPEquipSyncFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPEquipSyncFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPEquipSyncFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPEquipSyncFinish::MergeFrom(const HPEquipSyncFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPEquipSyncFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPEquipSyncFinish::CopyFrom(const HPEquipSyncFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPEquipSyncFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPEquipSyncFinish::Swap(HPEquipSyncFinish* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPEquipSyncFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPEquipSyncFinish_descriptor_;
  metadata.reflection = HPEquipSyncFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleIncStarExp::kRoleIdFieldNumber;
const int HPRoleIncStarExp::kItemIdFieldNumber;
#endif  // !_MSC_VER

HPRoleIncStarExp::HPRoleIncStarExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleIncStarExp::InitAsDefaultInstance() {
}

HPRoleIncStarExp::HPRoleIncStarExp(const HPRoleIncStarExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleIncStarExp::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleIncStarExp::~HPRoleIncStarExp() {
  SharedDtor();
}

void HPRoleIncStarExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPRoleIncStarExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleIncStarExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleIncStarExp_descriptor_;
}

const HPRoleIncStarExp& HPRoleIncStarExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleIncStarExp* HPRoleIncStarExp::default_instance_ = NULL;

HPRoleIncStarExp* HPRoleIncStarExp::New() const {
  return new HPRoleIncStarExp;
}

void HPRoleIncStarExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleIncStarExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleIncStarExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleIncStarExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleIncStarExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleIncStarExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleIncStarExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleIncStarExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleIncStarExp::MergeFrom(const HPRoleIncStarExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleIncStarExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleIncStarExp::CopyFrom(const HPRoleIncStarExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleIncStarExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPRoleIncStarExp::Swap(HPRoleIncStarExp* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleIncStarExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleIncStarExp_descriptor_;
  metadata.reflection = HPRoleIncStarExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleUpStage::kRoleIdFieldNumber;
#endif  // !_MSC_VER

HPRoleUpStage::HPRoleUpStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleUpStage::InitAsDefaultInstance() {
}

HPRoleUpStage::HPRoleUpStage(const HPRoleUpStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleUpStage::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleUpStage::~HPRoleUpStage() {
  SharedDtor();
}

void HPRoleUpStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPRoleUpStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleUpStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleUpStage_descriptor_;
}

const HPRoleUpStage& HPRoleUpStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleUpStage* HPRoleUpStage::default_instance_ = NULL;

HPRoleUpStage* HPRoleUpStage::New() const {
  return new HPRoleUpStage;
}

void HPRoleUpStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleUpStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleUpStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleUpStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleUpStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleUpStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleUpStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleUpStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleUpStage::MergeFrom(const HPRoleUpStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleUpStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleUpStage::CopyFrom(const HPRoleUpStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleUpStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPRoleUpStage::Swap(HPRoleUpStage* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleUpStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleUpStage_descriptor_;
  metadata.reflection = HPRoleUpStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleRingIncExp::kRoleIdFieldNumber;
const int HPRoleRingIncExp::kRingItemIdFieldNumber;
const int HPRoleRingIncExp::kItemIdFieldNumber;
#endif  // !_MSC_VER

HPRoleRingIncExp::HPRoleRingIncExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleRingIncExp::InitAsDefaultInstance() {
}

HPRoleRingIncExp::HPRoleRingIncExp(const HPRoleRingIncExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleRingIncExp::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ringitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleRingIncExp::~HPRoleRingIncExp() {
  SharedDtor();
}

void HPRoleRingIncExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPRoleRingIncExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleRingIncExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleRingIncExp_descriptor_;
}

const HPRoleRingIncExp& HPRoleRingIncExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleRingIncExp* HPRoleRingIncExp::default_instance_ = NULL;

HPRoleRingIncExp* HPRoleRingIncExp::New() const {
  return new HPRoleRingIncExp;
}

void HPRoleRingIncExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    ringitemid_ = 0;
  }
  itemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleRingIncExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ringItemId;
        break;
      }

      // required int32 ringItemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ringItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringitemid_)));
          set_has_ringitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleRingIncExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 ringItemId = 2;
  if (has_ringitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ringitemid(), output);
  }

  // repeated int32 itemId = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleRingIncExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 ringItemId = 2;
  if (has_ringitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ringitemid(), target);
  }

  // repeated int32 itemId = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleRingIncExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 ringItemId = 2;
    if (has_ringitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringitemid());
    }

  }
  // repeated int32 itemId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleRingIncExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleRingIncExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleRingIncExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleRingIncExp::MergeFrom(const HPRoleRingIncExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_ringitemid()) {
      set_ringitemid(from.ringitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleRingIncExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleRingIncExp::CopyFrom(const HPRoleRingIncExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleRingIncExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPRoleRingIncExp::Swap(HPRoleRingIncExp* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(ringitemid_, other->ringitemid_);
    itemid_.Swap(&other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleRingIncExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleRingIncExp_descriptor_;
  metadata.reflection = HPRoleRingIncExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRingInfo::kRingIdFieldNumber;
const int RoleRingInfo::kRoleIdFieldNumber;
const int RoleRingInfo::kItemIdFieldNumber;
const int RoleRingInfo::kLevelFieldNumber;
const int RoleRingInfo::kExpFieldNumber;
const int RoleRingInfo::kLvlUpTimesFieldNumber;
#endif  // !_MSC_VER

RoleRingInfo::RoleRingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRingInfo::InitAsDefaultInstance() {
}

RoleRingInfo::RoleRingInfo(const RoleRingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRingInfo::SharedCtor() {
  _cached_size_ = 0;
  ringid_ = 0;
  roleid_ = 0;
  itemid_ = 0;
  level_ = 0;
  exp_ = 0;
  lvluptimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRingInfo::~RoleRingInfo() {
  SharedDtor();
}

void RoleRingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRingInfo_descriptor_;
}

const RoleRingInfo& RoleRingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

RoleRingInfo* RoleRingInfo::default_instance_ = NULL;

RoleRingInfo* RoleRingInfo::New() const {
  return new RoleRingInfo;
}

void RoleRingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ringid_ = 0;
    roleid_ = 0;
    itemid_ = 0;
    level_ = 0;
    exp_ = 0;
    lvluptimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ringId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }

      // required int32 roleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // required int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lvlUpTimes;
        break;
      }

      // optional int32 lvlUpTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvlUpTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvluptimes_)));
          set_has_lvluptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ringId = 1;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ringid(), output);
  }

  // required int32 roleId = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 lvlUpTimes = 6;
  if (has_lvluptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lvluptimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ringId = 1;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ringid(), target);
  }

  // required int32 roleId = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  // optional int32 lvlUpTimes = 6;
  if (has_lvluptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lvluptimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ringId = 1;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // required int32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 lvlUpTimes = 6;
    if (has_lvluptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvluptimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRingInfo::MergeFrom(const RoleRingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lvluptimes()) {
      set_lvluptimes(from.lvluptimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRingInfo::CopyFrom(const RoleRingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RoleRingInfo::Swap(RoleRingInfo* other) {
  if (other != this) {
    std::swap(ringid_, other->ringid_);
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(lvluptimes_, other->lvluptimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRingInfo_descriptor_;
  metadata.reflection = RoleRingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleRingInfoSync::kRingInfosFieldNumber;
#endif  // !_MSC_VER

HPRoleRingInfoSync::HPRoleRingInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleRingInfoSync::InitAsDefaultInstance() {
}

HPRoleRingInfoSync::HPRoleRingInfoSync(const HPRoleRingInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleRingInfoSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleRingInfoSync::~HPRoleRingInfoSync() {
  SharedDtor();
}

void HPRoleRingInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPRoleRingInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleRingInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleRingInfoSync_descriptor_;
}

const HPRoleRingInfoSync& HPRoleRingInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleRingInfoSync* HPRoleRingInfoSync::default_instance_ = NULL;

HPRoleRingInfoSync* HPRoleRingInfoSync::New() const {
  return new HPRoleRingInfoSync;
}

void HPRoleRingInfoSync::Clear() {
  ringinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleRingInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoleRingInfo ringInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ringInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ringinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ringInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleRingInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RoleRingInfo ringInfos = 1;
  for (int i = 0; i < this->ringinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ringinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleRingInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RoleRingInfo ringInfos = 1;
  for (int i = 0; i < this->ringinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ringinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleRingInfoSync::ByteSize() const {
  int total_size = 0;

  // repeated .RoleRingInfo ringInfos = 1;
  total_size += 1 * this->ringinfos_size();
  for (int i = 0; i < this->ringinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ringinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleRingInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleRingInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleRingInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleRingInfoSync::MergeFrom(const HPRoleRingInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  ringinfos_.MergeFrom(from.ringinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleRingInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleRingInfoSync::CopyFrom(const HPRoleRingInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleRingInfoSync::IsInitialized() const {

  for (int i = 0; i < ringinfos_size(); i++) {
    if (!this->ringinfos(i).IsInitialized()) return false;
  }
  return true;
}

void HPRoleRingInfoSync::Swap(HPRoleRingInfoSync* other) {
  if (other != this) {
    ringinfos_.Swap(&other->ringinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleRingInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleRingInfoSync_descriptor_;
  metadata.reflection = HPRoleRingInfoSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPRoleRingActive::kRoleIdFieldNumber;
const int HPRoleRingActive::kItemIdFieldNumber;
#endif  // !_MSC_VER

HPRoleRingActive::HPRoleRingActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPRoleRingActive::InitAsDefaultInstance() {
}

HPRoleRingActive::HPRoleRingActive(const HPRoleRingActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPRoleRingActive::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPRoleRingActive::~HPRoleRingActive() {
  SharedDtor();
}

void HPRoleRingActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPRoleRingActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPRoleRingActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPRoleRingActive_descriptor_;
}

const HPRoleRingActive& HPRoleRingActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPRoleRingActive* HPRoleRingActive::default_instance_ = NULL;

HPRoleRingActive* HPRoleRingActive::New() const {
  return new HPRoleRingActive;
}

void HPRoleRingActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPRoleRingActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPRoleRingActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPRoleRingActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPRoleRingActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPRoleRingActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPRoleRingActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPRoleRingActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPRoleRingActive::MergeFrom(const HPRoleRingActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPRoleRingActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPRoleRingActive::CopyFrom(const HPRoleRingActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPRoleRingActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPRoleRingActive::Swap(HPRoleRingActive* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPRoleRingActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPRoleRingActive_descriptor_;
  metadata.reflection = HPRoleRingActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteMapInfo::kLevelFieldNumber;
const int EliteMapInfo::kMapIdFieldNumber;
#endif  // !_MSC_VER

EliteMapInfo::EliteMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteMapInfo::InitAsDefaultInstance() {
}

EliteMapInfo::EliteMapInfo(const EliteMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteMapInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteMapInfo::~EliteMapInfo() {
  SharedDtor();
}

void EliteMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteMapInfo_descriptor_;
}

const EliteMapInfo& EliteMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

EliteMapInfo* EliteMapInfo::default_instance_ = NULL;

EliteMapInfo* EliteMapInfo::New() const {
  return new EliteMapInfo;
}

void EliteMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required int32 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteMapInfo::MergeFrom(const EliteMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteMapInfo::CopyFrom(const EliteMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EliteMapInfo::Swap(EliteMapInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteMapInfo_descriptor_;
  metadata.reflection = EliteMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPEliteMapInfoSync::kEliteMapInfosFieldNumber;
#endif  // !_MSC_VER

HPEliteMapInfoSync::HPEliteMapInfoSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPEliteMapInfoSync::InitAsDefaultInstance() {
}

HPEliteMapInfoSync::HPEliteMapInfoSync(const HPEliteMapInfoSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPEliteMapInfoSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPEliteMapInfoSync::~HPEliteMapInfoSync() {
  SharedDtor();
}

void HPEliteMapInfoSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPEliteMapInfoSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPEliteMapInfoSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPEliteMapInfoSync_descriptor_;
}

const HPEliteMapInfoSync& HPEliteMapInfoSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPEliteMapInfoSync* HPEliteMapInfoSync::default_instance_ = NULL;

HPEliteMapInfoSync* HPEliteMapInfoSync::New() const {
  return new HPEliteMapInfoSync;
}

void HPEliteMapInfoSync::Clear() {
  elitemapinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPEliteMapInfoSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EliteMapInfo eliteMapInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eliteMapInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elitemapinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eliteMapInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPEliteMapInfoSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EliteMapInfo eliteMapInfos = 1;
  for (int i = 0; i < this->elitemapinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elitemapinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPEliteMapInfoSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EliteMapInfo eliteMapInfos = 1;
  for (int i = 0; i < this->elitemapinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elitemapinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPEliteMapInfoSync::ByteSize() const {
  int total_size = 0;

  // repeated .EliteMapInfo eliteMapInfos = 1;
  total_size += 1 * this->elitemapinfos_size();
  for (int i = 0; i < this->elitemapinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elitemapinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPEliteMapInfoSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPEliteMapInfoSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPEliteMapInfoSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPEliteMapInfoSync::MergeFrom(const HPEliteMapInfoSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  elitemapinfos_.MergeFrom(from.elitemapinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPEliteMapInfoSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPEliteMapInfoSync::CopyFrom(const HPEliteMapInfoSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPEliteMapInfoSync::IsInitialized() const {

  for (int i = 0; i < elitemapinfos_size(); i++) {
    if (!this->elitemapinfos(i).IsInitialized()) return false;
  }
  return true;
}

void HPEliteMapInfoSync::Swap(HPEliteMapInfoSync* other) {
  if (other != this) {
    elitemapinfos_.Swap(&other->elitemapinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPEliteMapInfoSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPEliteMapInfoSync_descriptor_;
  metadata.reflection = HPEliteMapInfoSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HPEvaluateRewards::HPEvaluateRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPEvaluateRewards::InitAsDefaultInstance() {
}

HPEvaluateRewards::HPEvaluateRewards(const HPEvaluateRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPEvaluateRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPEvaluateRewards::~HPEvaluateRewards() {
  SharedDtor();
}

void HPEvaluateRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPEvaluateRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPEvaluateRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPEvaluateRewards_descriptor_;
}

const HPEvaluateRewards& HPEvaluateRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPEvaluateRewards* HPEvaluateRewards::default_instance_ = NULL;

HPEvaluateRewards* HPEvaluateRewards::New() const {
  return new HPEvaluateRewards;
}

void HPEvaluateRewards::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPEvaluateRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HPEvaluateRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPEvaluateRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPEvaluateRewards::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPEvaluateRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPEvaluateRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPEvaluateRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPEvaluateRewards::MergeFrom(const HPEvaluateRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPEvaluateRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPEvaluateRewards::CopyFrom(const HPEvaluateRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPEvaluateRewards::IsInitialized() const {

  return true;
}

void HPEvaluateRewards::Swap(HPEvaluateRewards* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPEvaluateRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPEvaluateRewards_descriptor_;
  metadata.reflection = HPEvaluateRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Params::kKeyFieldNumber;
const int Params::kValueFieldNumber;
#endif  // !_MSC_VER

Params::Params()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Params::InitAsDefaultInstance() {
}

Params::Params(const Params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Params::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Params::~Params() {
  SharedDtor();
}

void Params::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Params_descriptor_;
}

const Params& Params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

Params* Params::default_instance_ = NULL;

Params* Params::New() const {
  return new Params;
}

void Params::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Params::Swap(Params* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Params_descriptor_;
  metadata.reflection = Params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPClientSetting::kParamsFieldNumber;
#endif  // !_MSC_VER

HPClientSetting::HPClientSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPClientSetting::InitAsDefaultInstance() {
}

HPClientSetting::HPClientSetting(const HPClientSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPClientSetting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPClientSetting::~HPClientSetting() {
  SharedDtor();
}

void HPClientSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPClientSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPClientSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPClientSetting_descriptor_;
}

const HPClientSetting& HPClientSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPClientSetting* HPClientSetting::default_instance_ = NULL;

HPClientSetting* HPClientSetting::New() const {
  return new HPClientSetting;
}

void HPClientSetting::Clear() {
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPClientSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Params params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPClientSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Params params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPClientSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Params params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPClientSetting::ByteSize() const {
  int total_size = 0;

  // repeated .Params params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPClientSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPClientSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPClientSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPClientSetting::MergeFrom(const HPClientSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPClientSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPClientSetting::CopyFrom(const HPClientSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPClientSetting::IsInitialized() const {

  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void HPClientSetting::Swap(HPClientSetting* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPClientSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPClientSetting_descriptor_;
  metadata.reflection = HPClientSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPPlayerAreaSync::kAreaFieldNumber;
#endif  // !_MSC_VER

HPPlayerAreaSync::HPPlayerAreaSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerAreaSync::InitAsDefaultInstance() {
}

HPPlayerAreaSync::HPPlayerAreaSync(const HPPlayerAreaSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerAreaSync::SharedCtor() {
  _cached_size_ = 0;
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerAreaSync::~HPPlayerAreaSync() {
  SharedDtor();
}

void HPPlayerAreaSync::SharedDtor() {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (this != default_instance_) {
  }
}

void HPPlayerAreaSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerAreaSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerAreaSync_descriptor_;
}

const HPPlayerAreaSync& HPPlayerAreaSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPPlayerAreaSync* HPPlayerAreaSync::default_instance_ = NULL;

HPPlayerAreaSync* HPPlayerAreaSync::New() const {
  return new HPPlayerAreaSync;
}

void HPPlayerAreaSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::kEmptyString) {
        area_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerAreaSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area().data(), this->area().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPPlayerAreaSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string area = 1;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerAreaSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string area = 1;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerAreaSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string area = 1;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerAreaSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerAreaSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerAreaSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerAreaSync::MergeFrom(const HPPlayerAreaSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerAreaSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerAreaSync::CopyFrom(const HPPlayerAreaSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerAreaSync::IsInitialized() const {

  return true;
}

void HPPlayerAreaSync::Swap(HPPlayerAreaSync* other) {
  if (other != this) {
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerAreaSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerAreaSync_descriptor_;
  metadata.reflection = HPPlayerAreaSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPChangeRoleName::kNameFieldNumber;
#endif  // !_MSC_VER

HPChangeRoleName::HPChangeRoleName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPChangeRoleName::InitAsDefaultInstance() {
}

HPChangeRoleName::HPChangeRoleName(const HPChangeRoleName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPChangeRoleName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPChangeRoleName::~HPChangeRoleName() {
  SharedDtor();
}

void HPChangeRoleName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HPChangeRoleName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPChangeRoleName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPChangeRoleName_descriptor_;
}

const HPChangeRoleName& HPChangeRoleName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPChangeRoleName* HPChangeRoleName::default_instance_ = NULL;

HPChangeRoleName* HPChangeRoleName::New() const {
  return new HPChangeRoleName;
}

void HPChangeRoleName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPChangeRoleName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPChangeRoleName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPChangeRoleName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPChangeRoleName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPChangeRoleName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPChangeRoleName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPChangeRoleName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPChangeRoleName::MergeFrom(const HPChangeRoleName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPChangeRoleName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPChangeRoleName::CopyFrom(const HPChangeRoleName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPChangeRoleName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPChangeRoleName::Swap(HPChangeRoleName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPChangeRoleName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPChangeRoleName_descriptor_;
  metadata.reflection = HPChangeRoleName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPChangeRoleNameRet::kNameFieldNumber;
#endif  // !_MSC_VER

HPChangeRoleNameRet::HPChangeRoleNameRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPChangeRoleNameRet::InitAsDefaultInstance() {
}

HPChangeRoleNameRet::HPChangeRoleNameRet(const HPChangeRoleNameRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPChangeRoleNameRet::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPChangeRoleNameRet::~HPChangeRoleNameRet() {
  SharedDtor();
}

void HPChangeRoleNameRet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HPChangeRoleNameRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPChangeRoleNameRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPChangeRoleNameRet_descriptor_;
}

const HPChangeRoleNameRet& HPChangeRoleNameRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPChangeRoleNameRet* HPChangeRoleNameRet::default_instance_ = NULL;

HPChangeRoleNameRet* HPChangeRoleNameRet::New() const {
  return new HPChangeRoleNameRet;
}

void HPChangeRoleNameRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPChangeRoleNameRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPChangeRoleNameRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPChangeRoleNameRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPChangeRoleNameRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPChangeRoleNameRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPChangeRoleNameRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPChangeRoleNameRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPChangeRoleNameRet::MergeFrom(const HPChangeRoleNameRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPChangeRoleNameRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPChangeRoleNameRet::CopyFrom(const HPChangeRoleNameRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPChangeRoleNameRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPChangeRoleNameRet::Swap(HPChangeRoleNameRet* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPChangeRoleNameRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPChangeRoleNameRet_descriptor_;
  metadata.reflection = HPChangeRoleNameRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPCommentMsg::kTypeFieldNumber;
#endif  // !_MSC_VER

HPCommentMsg::HPCommentMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPCommentMsg::InitAsDefaultInstance() {
}

HPCommentMsg::HPCommentMsg(const HPCommentMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPCommentMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPCommentMsg::~HPCommentMsg() {
  SharedDtor();
}

void HPCommentMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPCommentMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPCommentMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPCommentMsg_descriptor_;
}

const HPCommentMsg& HPCommentMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPCommentMsg* HPCommentMsg::default_instance_ = NULL;

HPCommentMsg* HPCommentMsg::New() const {
  return new HPCommentMsg;
}

void HPCommentMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPCommentMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPCommentMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPCommentMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPCommentMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPCommentMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPCommentMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPCommentMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPCommentMsg::MergeFrom(const HPCommentMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPCommentMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPCommentMsg::CopyFrom(const HPCommentMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPCommentMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPCommentMsg::Swap(HPCommentMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPCommentMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPCommentMsg_descriptor_;
  metadata.reflection = HPCommentMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPCommentMsgRet::kNumberFieldNumber;
#endif  // !_MSC_VER

HPCommentMsgRet::HPCommentMsgRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPCommentMsgRet::InitAsDefaultInstance() {
}

HPCommentMsgRet::HPCommentMsgRet(const HPCommentMsgRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPCommentMsgRet::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPCommentMsgRet::~HPCommentMsgRet() {
  SharedDtor();
}

void HPCommentMsgRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPCommentMsgRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPCommentMsgRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPCommentMsgRet_descriptor_;
}

const HPCommentMsgRet& HPCommentMsgRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPCommentMsgRet* HPCommentMsgRet::default_instance_ = NULL;

HPCommentMsgRet* HPCommentMsgRet::New() const {
  return new HPCommentMsgRet;
}

void HPCommentMsgRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPCommentMsgRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPCommentMsgRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPCommentMsgRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPCommentMsgRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPCommentMsgRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPCommentMsgRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPCommentMsgRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPCommentMsgRet::MergeFrom(const HPCommentMsgRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPCommentMsgRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPCommentMsgRet::CopyFrom(const HPCommentMsgRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPCommentMsgRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPCommentMsgRet::Swap(HPCommentMsgRet* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPCommentMsgRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPCommentMsgRet_descriptor_;
  metadata.reflection = HPCommentMsgRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPGoogleAchieveMsg::kTypeFieldNumber;
const int HPGoogleAchieveMsg::kAchieveinfoFieldNumber;
#endif  // !_MSC_VER

HPGoogleAchieveMsg::HPGoogleAchieveMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPGoogleAchieveMsg::InitAsDefaultInstance() {
}

HPGoogleAchieveMsg::HPGoogleAchieveMsg(const HPGoogleAchieveMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPGoogleAchieveMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPGoogleAchieveMsg::~HPGoogleAchieveMsg() {
  SharedDtor();
}

void HPGoogleAchieveMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPGoogleAchieveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPGoogleAchieveMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPGoogleAchieveMsg_descriptor_;
}

const HPGoogleAchieveMsg& HPGoogleAchieveMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPGoogleAchieveMsg* HPGoogleAchieveMsg::default_instance_ = NULL;

HPGoogleAchieveMsg* HPGoogleAchieveMsg::New() const {
  return new HPGoogleAchieveMsg;
}

void HPGoogleAchieveMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  achieveinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPGoogleAchieveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achieveinfo;
        break;
      }

      // repeated string achieveinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieveinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_achieveinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achieveinfo(this->achieveinfo_size() - 1).data(),
            this->achieveinfo(this->achieveinfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achieveinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPGoogleAchieveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated string achieveinfo = 2;
  for (int i = 0; i < this->achieveinfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->achieveinfo(i).data(), this->achieveinfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->achieveinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPGoogleAchieveMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated string achieveinfo = 2;
  for (int i = 0; i < this->achieveinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achieveinfo(i).data(), this->achieveinfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->achieveinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPGoogleAchieveMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated string achieveinfo = 2;
  total_size += 1 * this->achieveinfo_size();
  for (int i = 0; i < this->achieveinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->achieveinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPGoogleAchieveMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPGoogleAchieveMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPGoogleAchieveMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPGoogleAchieveMsg::MergeFrom(const HPGoogleAchieveMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieveinfo_.MergeFrom(from.achieveinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPGoogleAchieveMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPGoogleAchieveMsg::CopyFrom(const HPGoogleAchieveMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPGoogleAchieveMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPGoogleAchieveMsg::Swap(HPGoogleAchieveMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    achieveinfo_.Swap(&other->achieveinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPGoogleAchieveMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPGoogleAchieveMsg_descriptor_;
  metadata.reflection = HPGoogleAchieveMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPGoogleAchieveMsgRet::kAchieveinfoFieldNumber;
#endif  // !_MSC_VER

HPGoogleAchieveMsgRet::HPGoogleAchieveMsgRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPGoogleAchieveMsgRet::InitAsDefaultInstance() {
}

HPGoogleAchieveMsgRet::HPGoogleAchieveMsgRet(const HPGoogleAchieveMsgRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPGoogleAchieveMsgRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPGoogleAchieveMsgRet::~HPGoogleAchieveMsgRet() {
  SharedDtor();
}

void HPGoogleAchieveMsgRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPGoogleAchieveMsgRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPGoogleAchieveMsgRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPGoogleAchieveMsgRet_descriptor_;
}

const HPGoogleAchieveMsgRet& HPGoogleAchieveMsgRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPGoogleAchieveMsgRet* HPGoogleAchieveMsgRet::default_instance_ = NULL;

HPGoogleAchieveMsgRet* HPGoogleAchieveMsgRet::New() const {
  return new HPGoogleAchieveMsgRet;
}

void HPGoogleAchieveMsgRet::Clear() {
  achieveinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPGoogleAchieveMsgRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string achieveinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieveinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_achieveinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achieveinfo(this->achieveinfo_size() - 1).data(),
            this->achieveinfo(this->achieveinfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achieveinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPGoogleAchieveMsgRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string achieveinfo = 1;
  for (int i = 0; i < this->achieveinfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->achieveinfo(i).data(), this->achieveinfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->achieveinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPGoogleAchieveMsgRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string achieveinfo = 1;
  for (int i = 0; i < this->achieveinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achieveinfo(i).data(), this->achieveinfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->achieveinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPGoogleAchieveMsgRet::ByteSize() const {
  int total_size = 0;

  // repeated string achieveinfo = 1;
  total_size += 1 * this->achieveinfo_size();
  for (int i = 0; i < this->achieveinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->achieveinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPGoogleAchieveMsgRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPGoogleAchieveMsgRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPGoogleAchieveMsgRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPGoogleAchieveMsgRet::MergeFrom(const HPGoogleAchieveMsgRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieveinfo_.MergeFrom(from.achieveinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPGoogleAchieveMsgRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPGoogleAchieveMsgRet::CopyFrom(const HPGoogleAchieveMsgRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPGoogleAchieveMsgRet::IsInitialized() const {

  return true;
}

void HPGoogleAchieveMsgRet::Swap(HPGoogleAchieveMsgRet* other) {
  if (other != this) {
    achieveinfo_.Swap(&other->achieveinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPGoogleAchieveMsgRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPGoogleAchieveMsgRet_descriptor_;
  metadata.reflection = HPGoogleAchieveMsgRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HPFacebookShareEvent::HPFacebookShareEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPFacebookShareEvent::InitAsDefaultInstance() {
}

HPFacebookShareEvent::HPFacebookShareEvent(const HPFacebookShareEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPFacebookShareEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFacebookShareEvent::~HPFacebookShareEvent() {
  SharedDtor();
}

void HPFacebookShareEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFacebookShareEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFacebookShareEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFacebookShareEvent_descriptor_;
}

const HPFacebookShareEvent& HPFacebookShareEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPFacebookShareEvent* HPFacebookShareEvent::default_instance_ = NULL;

HPFacebookShareEvent* HPFacebookShareEvent::New() const {
  return new HPFacebookShareEvent;
}

void HPFacebookShareEvent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFacebookShareEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HPFacebookShareEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPFacebookShareEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPFacebookShareEvent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFacebookShareEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFacebookShareEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFacebookShareEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFacebookShareEvent::MergeFrom(const HPFacebookShareEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFacebookShareEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFacebookShareEvent::CopyFrom(const HPFacebookShareEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFacebookShareEvent::IsInitialized() const {

  return true;
}

void HPFacebookShareEvent::Swap(HPFacebookShareEvent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFacebookShareEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFacebookShareEvent_descriptor_;
  metadata.reflection = HPFacebookShareEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPFacebookShareEventRet::kNumberFieldNumber;
#endif  // !_MSC_VER

HPFacebookShareEventRet::HPFacebookShareEventRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPFacebookShareEventRet::InitAsDefaultInstance() {
}

HPFacebookShareEventRet::HPFacebookShareEventRet(const HPFacebookShareEventRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPFacebookShareEventRet::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFacebookShareEventRet::~HPFacebookShareEventRet() {
  SharedDtor();
}

void HPFacebookShareEventRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFacebookShareEventRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFacebookShareEventRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFacebookShareEventRet_descriptor_;
}

const HPFacebookShareEventRet& HPFacebookShareEventRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPFacebookShareEventRet* HPFacebookShareEventRet::default_instance_ = NULL;

HPFacebookShareEventRet* HPFacebookShareEventRet::New() const {
  return new HPFacebookShareEventRet;
}

void HPFacebookShareEventRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFacebookShareEventRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPFacebookShareEventRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPFacebookShareEventRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPFacebookShareEventRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFacebookShareEventRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFacebookShareEventRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFacebookShareEventRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFacebookShareEventRet::MergeFrom(const HPFacebookShareEventRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFacebookShareEventRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFacebookShareEventRet::CopyFrom(const HPFacebookShareEventRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFacebookShareEventRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPFacebookShareEventRet::Swap(HPFacebookShareEventRet* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFacebookShareEventRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFacebookShareEventRet_descriptor_;
  metadata.reflection = HPFacebookShareEventRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HPFacebookShareCount::HPFacebookShareCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPFacebookShareCount::InitAsDefaultInstance() {
}

HPFacebookShareCount::HPFacebookShareCount(const HPFacebookShareCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPFacebookShareCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFacebookShareCount::~HPFacebookShareCount() {
  SharedDtor();
}

void HPFacebookShareCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFacebookShareCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFacebookShareCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFacebookShareCount_descriptor_;
}

const HPFacebookShareCount& HPFacebookShareCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPFacebookShareCount* HPFacebookShareCount::default_instance_ = NULL;

HPFacebookShareCount* HPFacebookShareCount::New() const {
  return new HPFacebookShareCount;
}

void HPFacebookShareCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFacebookShareCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HPFacebookShareCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPFacebookShareCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPFacebookShareCount::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFacebookShareCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFacebookShareCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFacebookShareCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFacebookShareCount::MergeFrom(const HPFacebookShareCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFacebookShareCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFacebookShareCount::CopyFrom(const HPFacebookShareCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFacebookShareCount::IsInitialized() const {

  return true;
}

void HPFacebookShareCount::Swap(HPFacebookShareCount* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFacebookShareCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFacebookShareCount_descriptor_;
  metadata.reflection = HPFacebookShareCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPFacebookShareCountRet::kNumberFieldNumber;
#endif  // !_MSC_VER

HPFacebookShareCountRet::HPFacebookShareCountRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPFacebookShareCountRet::InitAsDefaultInstance() {
}

HPFacebookShareCountRet::HPFacebookShareCountRet(const HPFacebookShareCountRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPFacebookShareCountRet::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFacebookShareCountRet::~HPFacebookShareCountRet() {
  SharedDtor();
}

void HPFacebookShareCountRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFacebookShareCountRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFacebookShareCountRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFacebookShareCountRet_descriptor_;
}

const HPFacebookShareCountRet& HPFacebookShareCountRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPFacebookShareCountRet* HPFacebookShareCountRet::default_instance_ = NULL;

HPFacebookShareCountRet* HPFacebookShareCountRet::New() const {
  return new HPFacebookShareCountRet;
}

void HPFacebookShareCountRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFacebookShareCountRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPFacebookShareCountRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPFacebookShareCountRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPFacebookShareCountRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFacebookShareCountRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFacebookShareCountRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFacebookShareCountRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFacebookShareCountRet::MergeFrom(const HPFacebookShareCountRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFacebookShareCountRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFacebookShareCountRet::CopyFrom(const HPFacebookShareCountRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFacebookShareCountRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPFacebookShareCountRet::Swap(HPFacebookShareCountRet* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFacebookShareCountRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFacebookShareCountRet_descriptor_;
  metadata.reflection = HPFacebookShareCountRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HPPlayerBindPrice::HPPlayerBindPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerBindPrice::InitAsDefaultInstance() {
}

HPPlayerBindPrice::HPPlayerBindPrice(const HPPlayerBindPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerBindPrice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerBindPrice::~HPPlayerBindPrice() {
  SharedDtor();
}

void HPPlayerBindPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPPlayerBindPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerBindPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerBindPrice_descriptor_;
}

const HPPlayerBindPrice& HPPlayerBindPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPPlayerBindPrice* HPPlayerBindPrice::default_instance_ = NULL;

HPPlayerBindPrice* HPPlayerBindPrice::New() const {
  return new HPPlayerBindPrice;
}

void HPPlayerBindPrice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerBindPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HPPlayerBindPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerBindPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerBindPrice::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerBindPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerBindPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerBindPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerBindPrice::MergeFrom(const HPPlayerBindPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerBindPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerBindPrice::CopyFrom(const HPPlayerBindPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerBindPrice::IsInitialized() const {

  return true;
}

void HPPlayerBindPrice::Swap(HPPlayerBindPrice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerBindPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerBindPrice_descriptor_;
  metadata.reflection = HPPlayerBindPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPPlayerBindPriceRet::kStatusFieldNumber;
#endif  // !_MSC_VER

HPPlayerBindPriceRet::HPPlayerBindPriceRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPPlayerBindPriceRet::InitAsDefaultInstance() {
}

HPPlayerBindPriceRet::HPPlayerBindPriceRet(const HPPlayerBindPriceRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPPlayerBindPriceRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPPlayerBindPriceRet::~HPPlayerBindPriceRet() {
  SharedDtor();
}

void HPPlayerBindPriceRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPPlayerBindPriceRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPPlayerBindPriceRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPPlayerBindPriceRet_descriptor_;
}

const HPPlayerBindPriceRet& HPPlayerBindPriceRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

HPPlayerBindPriceRet* HPPlayerBindPriceRet::default_instance_ = NULL;

HPPlayerBindPriceRet* HPPlayerBindPriceRet::New() const {
  return new HPPlayerBindPriceRet;
}

void HPPlayerBindPriceRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPPlayerBindPriceRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPPlayerBindPriceRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPPlayerBindPriceRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPPlayerBindPriceRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPPlayerBindPriceRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPPlayerBindPriceRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPPlayerBindPriceRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPPlayerBindPriceRet::MergeFrom(const HPPlayerBindPriceRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPPlayerBindPriceRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPPlayerBindPriceRet::CopyFrom(const HPPlayerBindPriceRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPPlayerBindPriceRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HPPlayerBindPriceRet::Swap(HPPlayerBindPriceRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPPlayerBindPriceRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPPlayerBindPriceRet_descriptor_;
  metadata.reflection = HPPlayerBindPriceRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
