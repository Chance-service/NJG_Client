// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Equip.proto

#ifndef PROTOBUF_Equip_2eproto__INCLUDED
#define PROTOBUF_Equip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Attribute.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Equip_2eproto();
void protobuf_AssignDesc_Equip_2eproto();
void protobuf_ShutdownFile_Equip_2eproto();

class EquipAttr;
class GemInfo;
class EquipInfo;
class HPEquipInfoSync;

// ===================================================================

class EquipAttr : public ::google::protobuf::Message {
 public:
  EquipAttr();
  virtual ~EquipAttr();

  EquipAttr(const EquipAttr& from);

  inline EquipAttr& operator=(const EquipAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipAttr& default_instance();

  void Swap(EquipAttr* other);

  // implements Message ----------------------------------------------

  EquipAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipAttr& from);
  void MergeFrom(const EquipAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 attrGrade = 1;
  inline bool has_attrgrade() const;
  inline void clear_attrgrade();
  static const int kAttrGradeFieldNumber = 1;
  inline ::google::protobuf::int32 attrgrade() const;
  inline void set_attrgrade(::google::protobuf::int32 value);

  // required .Attr attrData = 2;
  inline bool has_attrdata() const;
  inline void clear_attrdata();
  static const int kAttrDataFieldNumber = 2;
  inline const ::Attr& attrdata() const;
  inline ::Attr* mutable_attrdata();
  inline ::Attr* release_attrdata();
  inline void set_allocated_attrdata(::Attr* attrdata);

  // @@protoc_insertion_point(class_scope:EquipAttr)
 private:
  inline void set_has_attrgrade();
  inline void clear_has_attrgrade();
  inline void set_has_attrdata();
  inline void clear_has_attrdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Attr* attrdata_;
  ::google::protobuf::int32 attrgrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Equip_2eproto();
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static EquipAttr* default_instance_;
};
// -------------------------------------------------------------------

class GemInfo : public ::google::protobuf::Message {
 public:
  GemInfo();
  virtual ~GemInfo();

  GemInfo(const GemInfo& from);

  inline GemInfo& operator=(const GemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GemInfo& default_instance();

  void Swap(GemInfo* other);

  // implements Message ----------------------------------------------

  GemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GemInfo& from);
  void MergeFrom(const GemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 gemItemId = 2;
  inline bool has_gemitemid() const;
  inline void clear_gemitemid();
  static const int kGemItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 gemitemid() const;
  inline void set_gemitemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GemInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_gemitemid();
  inline void clear_has_gemitemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 gemitemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Equip_2eproto();
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static GemInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipInfo : public ::google::protobuf::Message {
 public:
  EquipInfo();
  virtual ~EquipInfo();

  EquipInfo(const EquipInfo& from);

  inline EquipInfo& operator=(const EquipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipInfo& default_instance();

  void Swap(EquipInfo* other);

  // implements Message ----------------------------------------------

  EquipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipInfo& from);
  void MergeFrom(const EquipInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int32 equipId = 2;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipIdFieldNumber = 2;
  inline ::google::protobuf::int32 equipid() const;
  inline void set_equipid(::google::protobuf::int32 value);

  // required int32 strength = 3;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 3;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // required int32 starLevel = 4;
  inline bool has_starlevel() const;
  inline void clear_starlevel();
  static const int kStarLevelFieldNumber = 4;
  inline ::google::protobuf::int32 starlevel() const;
  inline void set_starlevel(::google::protobuf::int32 value);

  // required int32 starExp = 5;
  inline bool has_starexp() const;
  inline void clear_starexp();
  static const int kStarExpFieldNumber = 5;
  inline ::google::protobuf::int32 starexp() const;
  inline void set_starexp(::google::protobuf::int32 value);

  // required int32 godlyAttrId = 6;
  inline bool has_godlyattrid() const;
  inline void clear_godlyattrid();
  static const int kGodlyAttrIdFieldNumber = 6;
  inline ::google::protobuf::int32 godlyattrid() const;
  inline void set_godlyattrid(::google::protobuf::int32 value);

  // repeated .GemInfo gemInfos = 7;
  inline int geminfos_size() const;
  inline void clear_geminfos();
  static const int kGemInfosFieldNumber = 7;
  inline const ::GemInfo& geminfos(int index) const;
  inline ::GemInfo* mutable_geminfos(int index);
  inline ::GemInfo* add_geminfos();
  inline const ::google::protobuf::RepeatedPtrField< ::GemInfo >&
      geminfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::GemInfo >*
      mutable_geminfos();

  // repeated .EquipAttr attrInfos = 8;
  inline int attrinfos_size() const;
  inline void clear_attrinfos();
  static const int kAttrInfosFieldNumber = 8;
  inline const ::EquipAttr& attrinfos(int index) const;
  inline ::EquipAttr* mutable_attrinfos(int index);
  inline ::EquipAttr* add_attrinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipAttr >&
      attrinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipAttr >*
      mutable_attrinfos();

  // required int32 status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 score = 10;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 10;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bool lock = 11;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 11;
  inline bool lock() const;
  inline void set_lock(bool value);

  // optional int32 starLevel2 = 12;
  inline bool has_starlevel2() const;
  inline void clear_starlevel2();
  static const int kStarLevel2FieldNumber = 12;
  inline ::google::protobuf::int32 starlevel2() const;
  inline void set_starlevel2(::google::protobuf::int32 value);

  // optional int32 starExp2 = 13;
  inline bool has_starexp2() const;
  inline void clear_starexp2();
  static const int kStarExp2FieldNumber = 13;
  inline ::google::protobuf::int32 starexp2() const;
  inline void set_starexp2(::google::protobuf::int32 value);

  // optional int32 godlyAttrId2 = 14;
  inline bool has_godlyattrid2() const;
  inline void clear_godlyattrid2();
  static const int kGodlyAttrId2FieldNumber = 14;
  inline ::google::protobuf::int32 godlyattrid2() const;
  inline void set_godlyattrid2(::google::protobuf::int32 value);

  // optional int32 relateSuitId = 15;
  inline bool has_relatesuitid() const;
  inline void clear_relatesuitid();
  static const int kRelateSuitIdFieldNumber = 15;
  inline ::google::protobuf::int32 relatesuitid() const;
  inline void set_relatesuitid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EquipInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_starlevel();
  inline void clear_has_starlevel();
  inline void set_has_starexp();
  inline void clear_has_starexp();
  inline void set_has_godlyattrid();
  inline void clear_has_godlyattrid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_lock();
  inline void clear_has_lock();
  inline void set_has_starlevel2();
  inline void clear_has_starlevel2();
  inline void set_has_starexp2();
  inline void clear_has_starexp2();
  inline void set_has_godlyattrid2();
  inline void clear_has_godlyattrid2();
  inline void set_has_relatesuitid();
  inline void clear_has_relatesuitid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 equipid_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 starlevel_;
  ::google::protobuf::int32 starexp_;
  ::google::protobuf::RepeatedPtrField< ::GemInfo > geminfos_;
  ::google::protobuf::int32 godlyattrid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EquipAttr > attrinfos_;
  ::google::protobuf::int32 score_;
  bool lock_;
  ::google::protobuf::int32 starlevel2_;
  ::google::protobuf::int32 starexp2_;
  ::google::protobuf::int32 godlyattrid2_;
  ::google::protobuf::int32 relatesuitid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_Equip_2eproto();
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static EquipInfo* default_instance_;
};
// -------------------------------------------------------------------

class HPEquipInfoSync : public ::google::protobuf::Message {
 public:
  HPEquipInfoSync();
  virtual ~HPEquipInfoSync();

  HPEquipInfoSync(const HPEquipInfoSync& from);

  inline HPEquipInfoSync& operator=(const HPEquipInfoSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPEquipInfoSync& default_instance();

  void Swap(HPEquipInfoSync* other);

  // implements Message ----------------------------------------------

  HPEquipInfoSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPEquipInfoSync& from);
  void MergeFrom(const HPEquipInfoSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EquipInfo equipInfos = 1;
  inline int equipinfos_size() const;
  inline void clear_equipinfos();
  static const int kEquipInfosFieldNumber = 1;
  inline const ::EquipInfo& equipinfos(int index) const;
  inline ::EquipInfo* mutable_equipinfos(int index);
  inline ::EquipInfo* add_equipinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipInfo >&
      equipinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipInfo >*
      mutable_equipinfos();

  // optional bool isReward = 2;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsRewardFieldNumber = 2;
  inline bool isreward() const;
  inline void set_isreward(bool value);

  // @@protoc_insertion_point(class_scope:HPEquipInfoSync)
 private:
  inline void set_has_isreward();
  inline void clear_has_isreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EquipInfo > equipinfos_;
  bool isreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Equip_2eproto();
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static HPEquipInfoSync* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipAttr

// required int32 attrGrade = 1;
inline bool EquipAttr::has_attrgrade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipAttr::set_has_attrgrade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipAttr::clear_has_attrgrade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipAttr::clear_attrgrade() {
  attrgrade_ = 0;
  clear_has_attrgrade();
}
inline ::google::protobuf::int32 EquipAttr::attrgrade() const {
  return attrgrade_;
}
inline void EquipAttr::set_attrgrade(::google::protobuf::int32 value) {
  set_has_attrgrade();
  attrgrade_ = value;
}

// required .Attr attrData = 2;
inline bool EquipAttr::has_attrdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipAttr::set_has_attrdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipAttr::clear_has_attrdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipAttr::clear_attrdata() {
  if (attrdata_ != NULL) attrdata_->::Attr::Clear();
  clear_has_attrdata();
}
inline const ::Attr& EquipAttr::attrdata() const {
  return attrdata_ != NULL ? *attrdata_ : *default_instance_->attrdata_;
}
inline ::Attr* EquipAttr::mutable_attrdata() {
  set_has_attrdata();
  if (attrdata_ == NULL) attrdata_ = new ::Attr;
  return attrdata_;
}
inline ::Attr* EquipAttr::release_attrdata() {
  clear_has_attrdata();
  ::Attr* temp = attrdata_;
  attrdata_ = NULL;
  return temp;
}
inline void EquipAttr::set_allocated_attrdata(::Attr* attrdata) {
  delete attrdata_;
  attrdata_ = attrdata;
  if (attrdata) {
    set_has_attrdata();
  } else {
    clear_has_attrdata();
  }
}

// -------------------------------------------------------------------

// GemInfo

// required int32 pos = 1;
inline bool GemInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GemInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GemInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GemInfo::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 GemInfo::pos() const {
  return pos_;
}
inline void GemInfo::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 gemItemId = 2;
inline bool GemInfo::has_gemitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GemInfo::set_has_gemitemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GemInfo::clear_has_gemitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GemInfo::clear_gemitemid() {
  gemitemid_ = 0;
  clear_has_gemitemid();
}
inline ::google::protobuf::int32 GemInfo::gemitemid() const {
  return gemitemid_;
}
inline void GemInfo::set_gemitemid(::google::protobuf::int32 value) {
  set_has_gemitemid();
  gemitemid_ = value;
}

// -------------------------------------------------------------------

// EquipInfo

// required int64 id = 1;
inline bool EquipInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 EquipInfo::id() const {
  return id_;
}
inline void EquipInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int32 equipId = 2;
inline bool EquipInfo::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipInfo::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipInfo::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipInfo::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 EquipInfo::equipid() const {
  return equipid_;
}
inline void EquipInfo::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// required int32 strength = 3;
inline bool EquipInfo::has_strength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipInfo::set_has_strength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipInfo::clear_has_strength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipInfo::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 EquipInfo::strength() const {
  return strength_;
}
inline void EquipInfo::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// required int32 starLevel = 4;
inline bool EquipInfo::has_starlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipInfo::set_has_starlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipInfo::clear_has_starlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipInfo::clear_starlevel() {
  starlevel_ = 0;
  clear_has_starlevel();
}
inline ::google::protobuf::int32 EquipInfo::starlevel() const {
  return starlevel_;
}
inline void EquipInfo::set_starlevel(::google::protobuf::int32 value) {
  set_has_starlevel();
  starlevel_ = value;
}

// required int32 starExp = 5;
inline bool EquipInfo::has_starexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipInfo::set_has_starexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipInfo::clear_has_starexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipInfo::clear_starexp() {
  starexp_ = 0;
  clear_has_starexp();
}
inline ::google::protobuf::int32 EquipInfo::starexp() const {
  return starexp_;
}
inline void EquipInfo::set_starexp(::google::protobuf::int32 value) {
  set_has_starexp();
  starexp_ = value;
}

// required int32 godlyAttrId = 6;
inline bool EquipInfo::has_godlyattrid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipInfo::set_has_godlyattrid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipInfo::clear_has_godlyattrid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipInfo::clear_godlyattrid() {
  godlyattrid_ = 0;
  clear_has_godlyattrid();
}
inline ::google::protobuf::int32 EquipInfo::godlyattrid() const {
  return godlyattrid_;
}
inline void EquipInfo::set_godlyattrid(::google::protobuf::int32 value) {
  set_has_godlyattrid();
  godlyattrid_ = value;
}

// repeated .GemInfo gemInfos = 7;
inline int EquipInfo::geminfos_size() const {
  return geminfos_.size();
}
inline void EquipInfo::clear_geminfos() {
  geminfos_.Clear();
}
inline const ::GemInfo& EquipInfo::geminfos(int index) const {
  return geminfos_.Get(index);
}
inline ::GemInfo* EquipInfo::mutable_geminfos(int index) {
  return geminfos_.Mutable(index);
}
inline ::GemInfo* EquipInfo::add_geminfos() {
  return geminfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GemInfo >&
EquipInfo::geminfos() const {
  return geminfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::GemInfo >*
EquipInfo::mutable_geminfos() {
  return &geminfos_;
}

// repeated .EquipAttr attrInfos = 8;
inline int EquipInfo::attrinfos_size() const {
  return attrinfos_.size();
}
inline void EquipInfo::clear_attrinfos() {
  attrinfos_.Clear();
}
inline const ::EquipAttr& EquipInfo::attrinfos(int index) const {
  return attrinfos_.Get(index);
}
inline ::EquipAttr* EquipInfo::mutable_attrinfos(int index) {
  return attrinfos_.Mutable(index);
}
inline ::EquipAttr* EquipInfo::add_attrinfos() {
  return attrinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipAttr >&
EquipInfo::attrinfos() const {
  return attrinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipAttr >*
EquipInfo::mutable_attrinfos() {
  return &attrinfos_;
}

// required int32 status = 9;
inline bool EquipInfo::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipInfo::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EquipInfo::status() const {
  return status_;
}
inline void EquipInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 score = 10;
inline bool EquipInfo::has_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipInfo::set_has_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 EquipInfo::score() const {
  return score_;
}
inline void EquipInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional bool lock = 11;
inline bool EquipInfo::has_lock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipInfo::set_has_lock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipInfo::clear_has_lock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipInfo::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool EquipInfo::lock() const {
  return lock_;
}
inline void EquipInfo::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// optional int32 starLevel2 = 12;
inline bool EquipInfo::has_starlevel2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipInfo::set_has_starlevel2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipInfo::clear_has_starlevel2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipInfo::clear_starlevel2() {
  starlevel2_ = 0;
  clear_has_starlevel2();
}
inline ::google::protobuf::int32 EquipInfo::starlevel2() const {
  return starlevel2_;
}
inline void EquipInfo::set_starlevel2(::google::protobuf::int32 value) {
  set_has_starlevel2();
  starlevel2_ = value;
}

// optional int32 starExp2 = 13;
inline bool EquipInfo::has_starexp2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipInfo::set_has_starexp2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipInfo::clear_has_starexp2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipInfo::clear_starexp2() {
  starexp2_ = 0;
  clear_has_starexp2();
}
inline ::google::protobuf::int32 EquipInfo::starexp2() const {
  return starexp2_;
}
inline void EquipInfo::set_starexp2(::google::protobuf::int32 value) {
  set_has_starexp2();
  starexp2_ = value;
}

// optional int32 godlyAttrId2 = 14;
inline bool EquipInfo::has_godlyattrid2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipInfo::set_has_godlyattrid2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipInfo::clear_has_godlyattrid2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipInfo::clear_godlyattrid2() {
  godlyattrid2_ = 0;
  clear_has_godlyattrid2();
}
inline ::google::protobuf::int32 EquipInfo::godlyattrid2() const {
  return godlyattrid2_;
}
inline void EquipInfo::set_godlyattrid2(::google::protobuf::int32 value) {
  set_has_godlyattrid2();
  godlyattrid2_ = value;
}

// optional int32 relateSuitId = 15;
inline bool EquipInfo::has_relatesuitid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipInfo::set_has_relatesuitid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipInfo::clear_has_relatesuitid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipInfo::clear_relatesuitid() {
  relatesuitid_ = 0;
  clear_has_relatesuitid();
}
inline ::google::protobuf::int32 EquipInfo::relatesuitid() const {
  return relatesuitid_;
}
inline void EquipInfo::set_relatesuitid(::google::protobuf::int32 value) {
  set_has_relatesuitid();
  relatesuitid_ = value;
}

// -------------------------------------------------------------------

// HPEquipInfoSync

// repeated .EquipInfo equipInfos = 1;
inline int HPEquipInfoSync::equipinfos_size() const {
  return equipinfos_.size();
}
inline void HPEquipInfoSync::clear_equipinfos() {
  equipinfos_.Clear();
}
inline const ::EquipInfo& HPEquipInfoSync::equipinfos(int index) const {
  return equipinfos_.Get(index);
}
inline ::EquipInfo* HPEquipInfoSync::mutable_equipinfos(int index) {
  return equipinfos_.Mutable(index);
}
inline ::EquipInfo* HPEquipInfoSync::add_equipinfos() {
  return equipinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipInfo >&
HPEquipInfoSync::equipinfos() const {
  return equipinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipInfo >*
HPEquipInfoSync::mutable_equipinfos() {
  return &equipinfos_;
}

// optional bool isReward = 2;
inline bool HPEquipInfoSync::has_isreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPEquipInfoSync::set_has_isreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPEquipInfoSync::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPEquipInfoSync::clear_isreward() {
  isreward_ = false;
  clear_has_isreward();
}
inline bool HPEquipInfoSync::isreward() const {
  return isreward_;
}
inline void HPEquipInfoSync::set_isreward(bool value) {
  set_has_isreward();
  isreward_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Equip_2eproto__INCLUDED
