// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Const.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Const.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* itemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* playerAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* roleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* chatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* toolType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipPart_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipAutoSell_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* elementQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* elementAutoSell_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* prof_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* attrCond_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipAttrGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* attr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Buff_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* changeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* buyMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* shootType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* shootFreeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* shootRewardState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* monsterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NoticeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpenLevelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* kickReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendChatMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* notifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* dailyRefreshType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestStep_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaYaMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ElementType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroTokenMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WingsConstant_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleUseItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GemShopBuy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AllianCheckButton_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AllianOperState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyAddAllianceUpEmail_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddAllianceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExitAllianceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddOrExitAlliance_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IosGitState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShopOperationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleActiviteState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleTrainType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Const_2eproto() {
  protobuf_AddDesc_Const_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Const.proto");
  GOOGLE_CHECK(file != NULL);
  itemType_descriptor_ = file->enum_type(0);
  playerAttr_descriptor_ = file->enum_type(1);
  roleType_descriptor_ = file->enum_type(2);
  chatType_descriptor_ = file->enum_type(3);
  toolType_descriptor_ = file->enum_type(4);
  equipPart_descriptor_ = file->enum_type(5);
  equipQuality_descriptor_ = file->enum_type(6);
  equipAutoSell_descriptor_ = file->enum_type(7);
  elementQuality_descriptor_ = file->enum_type(8);
  elementAutoSell_descriptor_ = file->enum_type(9);
  prof_descriptor_ = file->enum_type(10);
  attrCond_descriptor_ = file->enum_type(11);
  equipAttrGrade_descriptor_ = file->enum_type(12);
  attr_descriptor_ = file->enum_type(13);
  Buff_descriptor_ = file->enum_type(14);
  changeType_descriptor_ = file->enum_type(15);
  buyMoneyType_descriptor_ = file->enum_type(16);
  shootType_descriptor_ = file->enum_type(17);
  shootFreeType_descriptor_ = file->enum_type(18);
  shootRewardState_descriptor_ = file->enum_type(19);
  equipStatus_descriptor_ = file->enum_type(20);
  monsterType_descriptor_ = file->enum_type(21);
  RoleStatus_descriptor_ = file->enum_type(22);
  NoticeType_descriptor_ = file->enum_type(23);
  OpenLevelType_descriptor_ = file->enum_type(24);
  kickReason_descriptor_ = file->enum_type(25);
  ActivityId_descriptor_ = file->enum_type(26);
  FriendChatMsgType_descriptor_ = file->enum_type(27);
  notifyType_descriptor_ = file->enum_type(28);
  dailyRefreshType_descriptor_ = file->enum_type(29);
  QuestState_descriptor_ = file->enum_type(30);
  QuestStep_descriptor_ = file->enum_type(31);
  QuestEventType_descriptor_ = file->enum_type(32);
  QuestType_descriptor_ = file->enum_type(33);
  YaYaMsgType_descriptor_ = file->enum_type(34);
  ElementType_descriptor_ = file->enum_type(35);
  HeroTokenMsgType_descriptor_ = file->enum_type(36);
  RankType_descriptor_ = file->enum_type(37);
  WingsConstant_descriptor_ = file->enum_type(38);
  BattleUseItemType_descriptor_ = file->enum_type(39);
  GemShopBuy_descriptor_ = file->enum_type(40);
  AllianCheckButton_descriptor_ = file->enum_type(41);
  ApplyState_descriptor_ = file->enum_type(42);
  AllianOperState_descriptor_ = file->enum_type(43);
  ApplyAddAllianceUpEmail_descriptor_ = file->enum_type(44);
  AddAllianceState_descriptor_ = file->enum_type(45);
  ExitAllianceState_descriptor_ = file->enum_type(46);
  AddOrExitAlliance_descriptor_ = file->enum_type(47);
  IosGitState_descriptor_ = file->enum_type(48);
  DataType_descriptor_ = file->enum_type(49);
  ShopType_descriptor_ = file->enum_type(50);
  ShopOperationType_descriptor_ = file->enum_type(51);
  RoleActiviteState_descriptor_ = file->enum_type(52);
  RoleTrainType_descriptor_ = file->enum_type(53);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Const_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_Const_2eproto() {
}

void protobuf_AddDesc_Const_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Const.proto*\\\n\010itemType\022\017\n\013PLAYER_ATTR"
    "\020\001\022\010\n\004ROLE\020\002\022\010\n\004TOOL\020\003\022\t\n\005EQUIP\020\004\022\t\n\005SKI"
    "LL\020\005\022\013\n\007ELEMENT\020\006\022\010\n\004SOUL\020\007*\311\002\n\nplayerAt"
    "tr\022\t\n\004GOLD\020\351\007\022\t\n\004COIN\020\352\007\022\n\n\005LEVEL\020\353\007\022\010\n\003"
    "EXP\020\354\007\022\r\n\010VIPLEVEL\020\355\007\022\020\n\013SMELT_VALUE\020\356\007\022"
    "\021\n\014CONTRIBUTION\020\357\007\022\021\n\014ALLIANCE_EXP\020\360\007\022\017\n"
    "\nBOSS_TIMES\020\361\007\022\020\n\013HONOR_VALUE\020\362\007\022\025\n\020REPU"
    "TATION_VALUE\020\363\007\022\024\n\017ELITE_MAP_TIMES\020\364\007\022\026\n"
    "\021MULTI_ELITE_SCORE\020\365\007\022\016\n\tGOLD_BEAN\020\366\007\022\022\n"
    "\rCRYSTAL_VALUE\020\374\007\022\026\n\021ALLIANCE_VITALITY\020\321"
    "\017\022\024\n\017FASTFIGHT_TIMES\020\217N\022\016\n\tROLE_SOUL\020\375\007*"
    "5\n\010roleType\022\r\n\tMAIN_ROLE\020\001\022\r\n\tMERCENARY\020"
    "\002\022\013\n\007MONSTER\020\003*\235\001\n\010chatType\022\016\n\nCHAT_WORL"
    "D\020\000\022\021\n\rCHAT_ALLIANCE\020\001\022\022\n\016CHAT_BROADCAST"
    "\020\002\022\023\n\017WORLD_BROADCAST\020\003\022\021\n\rCHAT_PERSONAL"
    "\020\004\022\030\n\024CHAT_ALLIANCE_SYSTEM\020\005\022\030\n\024CHAT_PER"
    "SONAL_SYSTEM\020\006*\345\004\n\010toolType\022\n\n\006NORMAL\020\000\022"
    "\014\n\010FRAGMENT\020\001\022\007\n\003GEM\020\002\022\n\n\006HAMMER\020\003\022\014\n\010TR"
    "EASURE\020\004\022\007\n\003KEY\020\005\022\t\n\005ELITE\020\006\022\010\n\004GIFT\020\007\022\017"
    "\n\013GEM_PACKAGE\020\010\022\031\n\025WORDS_EXCHANGE_NORMAL"
    "\020\t\022\032\n\026WORDS_EXCHANGE_SPECIAL\020\n\022\030\n\024BOSS_C"
    "HALLENGE_TIMES\020\013\022\021\n\rLUCK_TREASURE\020\014\022\016\n\nS"
    "OUL_STONE\020\r\022\022\n\016ELITE_MAP_BOOK\020\016\022\032\n\026ALLOA"
    "NCE_VITALITY_PILL\020\017\022\022\n\016GOODS_COMPOUND\020\020\022"
    "\024\n\020COMMON_GODLY_EXP\020\021\022\030\n\024REPUTATION_GODL"
    "Y_EXP\020\022\022\021\n\rSUIT_FRAGMENT\020\023\022\022\n\016EQUIP_EXCH"
    "ANGE\020\024\022\024\n\020ELEMENT_EXCHANGE\020\025\022\016\n\nHERO_TOK"
    "EN\020\026\022\013\n\007FEATHER\020\027\022\024\n\020ELEMENT_FRAGMENT\020\030\022"
    "\032\n\026EXPEDITION_ARMORY_ITEM\020\031\022\027\n\023HOUR_PLAC"
    "ENENT_CARD\020\032\022\014\n\010EXP_REEL\020\033\022\016\n\nGEM_VOLUME"
    "\020#\022\020\n\014SUIT_DRAWING\020$\022\026\n\022RECYCLE_SEVEN_IT"
    "EM\020d\022\030\n\024FASTFIGHT_TIMES_BOOK\020e*\204\001\n\tequip"
    "Part\022\n\n\006HELMET\020\001\022\010\n\004RING\020\002\022\010\n\004BELT\020\003\022\013\n\007"
    "CUIRASS\020\004\022\013\n\007WEAPON1\020\005\022\013\n\007WEAPON2\020\006\022\014\n\010L"
    "EGGUARD\020\007\022\t\n\005SHOES\020\010\022\t\n\005GLOVE\020\t\022\014\n\010NECKL"
    "ACE\020\n*F\n\014equipQuality\022\t\n\005WHITE\020\001\022\t\n\005GREE"
    "N\020\002\022\010\n\004BLUE\020\003\022\n\n\006PURPLE\020\004\022\n\n\006ORANGE\020\005*|\n"
    "\requipAutoSell\022\023\n\017AUTO_SELL_WHITE\020\001\022\023\n\017A"
    "UTO_SELL_GREEN\020\002\022\022\n\016AUTO_SELL_BLUE\020\004\022\024\n\020"
    "AUTO_SELL_PURPLE\020\010\022\027\n\023AUTO_SELL_DIFF_PRO"
    "F\020\020*p\n\016elementQuality\022\021\n\rELEMENT_WHITE\020\001"
    "\022\021\n\rELEMENT_GREEN\020\002\022\020\n\014ELEMENT_BLUE\020\003\022\022\n"
    "\016ELEMENT_PURPLE\020\004\022\022\n\016ELEMENT_ORANGE\020\005*\246\001"
    "\n\017elementAutoSell\022\033\n\027AUTO_SELL_ELEMENT_W"
    "HITE\020\001\022\033\n\027AUTO_SELL_ELEMENT_GREEN\020\002\022\032\n\026A"
    "UTO_SELL_ELEMENT_BLUE\020\004\022\034\n\030AUTO_SELL_ELE"
    "MENT_PURPLE\020\010\022\037\n\033AUTO_SELL_ELEMENT_DIFF_"
    "PROF\020\020*\256\001\n\004prof\022\013\n\007WARRIOR\020\001\022\n\n\006HUNTER\020\002"
    "\022\t\n\005MAGIC\020\003\022\026\n\021MERCENARY_WARRIOR\020\351\007\022\025\n\020M"
    "ERCENARY_HUNTER\020\352\007\022\024\n\017MERCENARY_MAGIC\020\353\007"
    "\022\024\n\017MONSTER_WARRIOR\020\321\017\022\023\n\016MONSTER_HUNTER"
    "\020\322\017\022\022\n\rMONSTER_MAGIC\020\323\017*[\n\010attrCond\022\031\n\025A"
    "LL_EQUIP_INTENSIFY_1\020\001\022\031\n\025ALL_EQUIP_INTE"
    "NSIFY_2\020\002\022\031\n\025ALL_EQUIP_INTENSIFY_3\020\003*F\n\016"
    "equipAttrGrade\022\020\n\014PRIMARY_ATTR\020\001\022\022\n\016SECO"
    "NDARY_ATTR\020\002\022\016\n\nGODLY_ATTR\020\003*\335\007\n\004attr\022\014\n"
    "\010STRENGHT\020\001\022\013\n\007AGILITY\020\002\022\r\n\tINTELLECT\020\003\022"
    "\013\n\007STAMINA\020\004\022\006\n\002HP\020e\022\006\n\002MP\020f\022\n\n\006MINDMG\020g"
    "\022\n\n\006MAXDMG\020h\022\t\n\005ARMOR\020i\022\n\n\006PHYDEF\020j\022\n\n\006M"
    "AGDEF\020k\022\014\n\010CRITICAL\020l\022\007\n\003HIT\020m\022\t\n\005DODGE\020"
    "n\022\016\n\nRESILIENCE\020o\022\r\n\tRECOVERMP\020p\022\023\n\016BUFF"
    "_COIN_DROP\020\351\007\022\022\n\rBUFF_EXP_DROP\020\352\007\022\024\n\017BUF"
    "F_EQUIP_DROP\020\353\007\022\020\n\013BUFF_MAX_HP\020\354\007\022\027\n\022BUF"
    "F_AVOID_CONTROL\020\355\007\022\030\n\023BUFF_REVERSE_DAMAG"
    "E\020\356\007\022\025\n\020BUFF_AVOID_ARMOR\020\357\007\022\024\n\017BUFF_SUCK"
    "_BLOOD\020\360\007\022\026\n\021BUFF_RETURN_BLOOD\020\361\007\022\031\n\024BUF"
    "F_CRITICAL_DAMAGE\020\362\007\022\024\n\017BUFF_PHYDEF_ADD\020"
    "\321\017\022\024\n\017BUFF_MAGDEF_ADD\020\322\017\022\032\n\025BUFF_PHYDEF_"
    "PENETRATE\020\267\020\022\032\n\025BUFF_MAGDEF_PENETRATE\020\270\020"
    "\022\026\n\021BUFF_CRITICAL_ADD\020\325\017\022\030\n\023BUFF_RESILIE"
    "NCE_ADD\020\326\017\022\023\n\016BUFF_DODGE_ADD\020\327\017\022\023\n\016BUFF_"
    "ARMOR_ADD\020\330\017\022\032\n\025BUFF_SKILL_DAMAGE_ADD\020\331\017"
    "\022\021\n\014BUFF_HIT_ADD\020\332\017\022\021\n\014BUFF_WARRIOR\020\271\027\022\020"
    "\n\013BUFF_HUNTER\020\272\027\022\016\n\tBUFF_MAGE\020\273\027\022\017\n\nICE_"
    "ATTACK\020\241\037\022\020\n\013ICE_DEFENCE\020\242\037\022\020\n\013FIRE_ATTA"
    "CK\020\243\037\022\021\n\014FIRE_DEFENCE\020\244\037\022\023\n\016THUNDER_ATTA"
    "CK\020\245\037\022\025\n\020THUNDER_DENFENCE\020\246\037\022\025\n\020ICE_ATTA"
    "CK_RATIO\020\247\037\022\026\n\021ICE_DEFENCE_RATIO\020\250\037\022\026\n\021F"
    "IRE_ATTACK_RATIO\020\251\037\022\027\n\022FIRE_DEFENCE_RATI"
    "O\020\252\037\022\031\n\024THUNDER_ATTACK_RATIO\020\253\037\022\033\n\026THUND"
    "ER_DENFENCE_RATIO\020\254\037*\233\003\n\004Buff\022\r\n\tDIZZINE"
    "SS\020\001\022\t\n\005FROST\020\002\022\013\n\007SILENCE\020\003\022\t\n\005BLIND\020\004\022"
    "\t\n\005GUARD\020\005\022\013\n\007INSPIRE\020\006\022\014\n\010WEAKNESS\020\007\022\010\n"
    "\004RAGE\020\010\022\n\n\006POISON\020\t\022\n\n\006ARMOUR\020\n\022\010\n\004BURN\020"
    "\013\022\017\n\013BEEN_FROZEN\020\014\022\t\n\005BLEED\020\r\022\020\n\014MAGIC_A"
    "TTACK\020\016\022\020\n\014ADDITION_DMG\020\017\022\014\n\010CLOAKING\020\020\022"
    "\020\n\014MAGIC_SHIELD\020\021\022\021\n\rSUPPLY_ENERGY\020\022\022\t\n\005"
    "SNEER\020\023\022\014\n\010RECKLESS\020\024\022\010\n\004MARK\020\025\022\016\n\nSPELL"
    "_WARD\020\026\022\013\n\007BARRIER\020\027\022\010\n\004MISS\020\030\022\016\n\nHEMORR"
    "HAGE\020\031\022\017\n\013RAGE_DAMAGE\020d\022\020\n\014WARRIOR_BUFF\020"
    "e\022\017\n\013HUNTER_BUFF\020f\022\016\n\nMAGIC_BUFF\020g*\275\002\n\nc"
    "hangeType\022\017\n\013CHANGE_GOLD\020\001\022\017\n\013CHANGE_COI"
    "N\020\002\022\016\n\nCHANGE_EXP\020\003\022\020\n\014CHANGE_LEVEL\020\004\022\023\n"
    "\017CHANGE_RECHARGE\020\005\022\023\n\017CHANGE_VIPLEVEL\020\006\022"
    "\017\n\013CHANGE_ROLE\020\007\022\020\n\014CHANGE_TOOLS\020\010\022\020\n\014CH"
    "ANGE_EQUIP\020\t\022\026\n\022CHANGE_SMELT_VALUE\020\n\022\027\n\023"
    "CHANGE_CONTRIBUTION\020\013\022\026\n\022CHANGE_HONOR_VA"
    "LUE\020\014\022\033\n\027CHANGE_REPUTATION_VALUE\020\r\022\022\n\016CH"
    "ANGE_ELEMENT\020\016\022\022\n\016CHANGE_CRYSTAL\020\024*.\n\014bu"
    "yMoneyType\022\016\n\nMONEY_GOLD\020\001\022\016\n\nMONEY_COIN"
    "\020\002*8\n\tshootType\022\013\n\007PRIMARY\020\001\022\020\n\014INTERMED"
    "IATE\020\002\022\014\n\010ADVANCED\020\003*/\n\rshootFreeType\022\016\n"
    "\nSHOOT_FREE\020\001\022\016\n\nSHOOT_GOLD\020\002*,\n\020shootRe"
    "wardState\022\013\n\007SHOOT_A\020\001\022\013\n\007SHOOT_B\020\002*G\n\013e"
    "quipStatus\022\016\n\nEQUIP_FREE\020\000\022\023\n\017EQUIP_MAIN"
    "_ROLE\020\001\022\023\n\017EQUIP_MERCENARY\020\002*/\n\013monsterT"
    "ype\022\013\n\007DOGFACE\020\001\022\010\n\004BOSS\020\002\022\t\n\005ROBOT\020\003*J\n"
    "\nRoleStatus\022\016\n\nFIGHTING_1\020\001\022\016\n\nFIGHTING_"
    "2\020\002\022\014\n\010RESTTING\020\003\022\016\n\nEXPEDITION\020\004*\261\001\n\nNo"
    "ticeType\022\014\n\010NEW_MAIL\020\001\022\013\n\007NEW_MSG\020\002\022\020\n\014G"
    "IFT_NEW_MSG\020\003\022\026\n\022ALLIANCE_BOSS_OPEN\020\004\022\026\n"
    "\022TEAM_BATTLE_SIGNUP\020\005\022\024\n\020ARENA_ALL_SIGNU"
    "P\020\006\022\031\n\025MULTI_ELITE_AVALIABLE\020\007\022\025\n\021ACHIEV"
    "EMENT_POINT\020\010*(\n\rOpenLevelType\022\027\n\023ALLIAN"
    "CE_OPEN_LEVEL\020\014*n\n\nkickReason\022\023\n\017DUPLICA"
    "TE_LOGIN\020\001\022\023\n\017SERVER_SHUTDOWN\020\002\022\022\n\016LOGIN"
    "_FORBIDEN\020\003\022\016\n\nKICKED_OUT\020\004\022\022\n\016SERVER_RE"
    "START\020\005*\227\t\n\nActivityId\022\016\n\nMONTH_CARD\020S\022\031"
    "\n\025ACCUMULATIVE_RECHARGE\020\002\022\025\n\021CONTINUE_RE"
    "CHARGE\020\003\022\022\n\016RECHARGE_RATIO\020\004\022\n\n\006WECHAT\020\005"
    "\022\030\n\024ACCUMULATIVE_CONSUME\020\006\022\022\n\016WORDS_EXCH"
    "ANGE\020\007\022\023\n\017MAP_DROP_REWARD\020\010\022\023\n\017DOUBLE_RE"
    "CHARGE\020\t\022\024\n\020HOLIDAY_TREASURE\020\n\022\023\n\017BETA_T"
    "EST_WORDS\020\013\022\030\n\024COINS_MAP_DROP_RATIO\020\014\022\026\n"
    "\022EXP_MAP_DROP_RATIO\020\r\022\026\n\022ARENA_REWARD_RA"
    "TIO\020\016\022\030\n\024EQUIP_MAP_DROP_RATIO\020\017\022\026\n\022QUICK"
    "_REWARD_RATIO\020\020\022\025\n\021SMELT_VALUE_RATIO\020\021\022\024"
    "\n\020EQUIP_SELL_RATIO\020\022\022\024\n\020QUICK_COST_RATIO"
    "\020\023\022\022\n\016REGISTER_CYCLE\020\024\022\023\n\017SINGLE_RECHARG"
    "E\020\025\022\023\n\017RECHARGE_REBATE\020\026\022\017\n\013VIP_WELFARE\020"
    "\027\022\r\n\tWEEK_CARD\020\030\022\025\n\021EXPEDITION_ARMORY\020\031\022"
    "\027\n\023TIME_LIMIT_PURCHASE\020\032\022\026\n\022ACCUMULATIVE"
    "_LOGIN\020\033\022\024\n\020RECHARGE_REBATE2\020\034\022\020\n\014GEM_CO"
    "MPOUND\020\035\022\022\n\016CRAZY_ROULETTE\020\036\022\014\n\010LUCK_BOX"
    "\020\037\022\023\n\017STAR_EVALUATION\020 \022\021\n\rFRIEND_INVITE"
    "\020!\022\r\n\tTAXI_CODE\020\"\022\026\n\022SNOWFIELD_TREASURE\020"
    "#\022\023\n\017TREASURE_RAIDER\020$\022\026\n\022COMMENDATION_T"
    "RIBE\020%\022\013\n\007FORTUNE\020&\022\034\n\030SHOP_REFRESH_PRIC"
    "E_RATIO\020\'\022\021\n\rFIND_TREASURE\020(\022\r\n\tGOLD_CLU"
    "B\020)\022\025\n\021GRAB_RED_ENVELOPE\020*\022\r\n\tCHAT_LUCK\020"
    "+\022\r\n\tRANK_GIFT\020,\022\020\n\014FOREVER_CARD\020-\022\017\n\013SA"
    "LE_PACKET\020R\022\r\n\tHOUR_CARD\0203\022\022\n\016FIRST_GIFT"
    "PACK\020T\022\020\n\014MYSTERY_SHOP\020Q\022\023\n\017HERO_TOKEN_S"
    "HOP\020R\022\022\n\016LIMIT_RECHARGE\020U\022\031\n\025EXCHANGE_DO"
    "UBLE_SEVEN\020V\022\017\n\013DAILY_QUEST\020W\022\r\n\tGOLD_FI"
    "SH\020X\022\024\n\020GODEQUIP_FORGING\020Y\022\022\n\016SHOOT_ACTI"
    "VITY\020Z\022\021\n\rPRINCE_DEVILS\020[*B\n\021FriendChatM"
    "sgType\022\r\n\tLEAVE_MSG\020\000\022\016\n\nSYSTEM_MSG\020\002\022\016\n"
    "\nPLAYER_MSG\020\003*!\n\nnotifyType\022\023\n\017NOTIFY_RE"
    "CHARGE\020\001*\302\003\n\020dailyRefreshType\022\025\n\021SHOP_IT"
    "EM_REFRESH\020\001\022\021\n\rALLIANCE_SIGN\020\002\022\030\n\024EQUIP"
    "_CREATE_REFRESH\020\003\022\023\n\017ARENA_CHALLENGE\020\004\022\016"
    "\n\nFAST_FIGHT\020\005\022\016\n\nBOSS_FIGHT\020\006\022\r\n\tELITE_"
    "MAP\020\007\022\016\n\nSTAR_STONE\020\010\022\023\n\017ROLE_RING_LVLUP"
    "\020\t\022\025\n\021FB_FRIEND_ASKTICK\020\n\022\035\n\031MYSTERY_SHO"
    "P_ITEM_REFRESH\020\013\022\027\n\023SHOP_ITEM_REFRESH_2\020"
    "f\022\027\n\023SHOP_ITEM_REFRESH_3\020g\022\027\n\023SHOP_ITEM_"
    "REFRESH_4\020h\022\035\n\031CRYSTAL_SHOP_ITEM_REFRESH"
    "\020o\022\037\n\033CRYSTAL_SHOP_ITEM_REFRESH_2\020p\022\037\n\033C"
    "RYSTAL_SHOP_ITEM_REFRESH_3\020q\022\037\n\033CRYSTAL_"
    "SHOP_ITEM_REFRESH_4\020r*=\n\nQuestState\022\014\n\010U"
    "NACTIVE\020\000\022\007\n\003ING\020\001\022\014\n\010FINISHED\020\002\022\n\n\006REWA"
    "RD\020\003*\214\001\n\tQuestStep\022\t\n\005FIRST\020\001\022\n\n\006SECOND\020"
    "\002\022\t\n\005THIRD\020\003\022\n\n\006FOURTH\020\004\022\t\n\005FIFTH\020\005\022\t\n\005S"
    "IXTH\020\006\022\013\n\007SEVENTH\020\007\022\n\n\006EIGHTH\020\010\022\t\n\005NINTH"
    "\020\t\022\t\n\005TENTH\020\n\022\014\n\010ELEVENTH\020\013*\320\n\n\016QuestEve"
    "ntType\022\r\n\tKILL_BOSS\020\001\022\016\n\nADD_FRIEND\020\002\022\021\n"
    "\rJOIN_ALLIANCE\020\003\022\016\n\nMODIFY_SIN\020\004\022\016\n\nMAKE"
    "_EQUIP\020\005\022\020\n\014QUICK_BATTLE\020\006\022\017\n\013SMELT_EQUI"
    "P\020\007\022\017\n\013WORLD_SPEAK\020\010\022\020\n\014ARENA_BATTLE\020\t\022\017"
    "\n\013HERO_FOSTER\020\n\022\017\n\013ELITE_STATE\020\013\022\017\n\013GU_B"
    "AO_SHAN\020\014\022\r\n\tJI_LIU_GU\020\r\022\021\n\rMO_HUA_RU_QI"
    "N\020\016\022\022\n\016DUO_REN_FU_BEN\020\017\022\025\n\021GONG_HUI_ZHEN"
    "G_BA\020\020\022\021\n\rGONG_HUI_BOSS\020\021\022\016\n\nHERO_LEVEL\020"
    "\022\022\r\n\tGEM_LEVEL\020\023\022\027\n\023EQUIP_ENHANCE_LEVEL\020"
    "\024\022\032\n\026COMMON_GOD_EQUIP_LEVEL\020\025\022\032\n\026HOUNOR_"
    "GOD_EQUIP_LEVEL\020\026\022\027\n\023SKILL_ENHANCE_LEVEL"
    "\020\027\022\023\n\017MAIN_ROLE_LEVEL\020\030\022\025\n\021TOTAL_LOGIN_T"
    "IMES\020\031\022\027\n\023EQUIP_ENHANCE_TIMES\020\032\022\030\n\024CROSS"
    "_MISSION_NUMBER\020\033\022\022\n\016FIGHT_POINT_UP\020\034\022\033\n"
    "\027EQUIP_ENHANCE_ALL_LEVEL\020\035\022\025\n\021HERO_EXPEN"
    "D_TIMES\020\036\022\025\n\021HOUNOR_MAKE_TIMES\020\037\022\027\n\023BAPT"
    "IZE_EQUIP_TIMES\020 \022\025\n\021SMELT_EQUIP_COUNT\020!"
    "\022\"\n\036COMMON_GOD_EQUIP_SWALLOW_TIMES\020\"\022!\n\035"
    "HOUNOR_GOD_EQUIP_WALLOW_TIMES\020#\022\034\n\030GOD_E"
    "QUIP_COMPOUND_TIMES\020$\022\032\n\026GOD_EQUIP_EXTEN"
    "D_TIMES\020%\022\023\n\017GEM_DRESS_TIMES\020&\022\031\n\025COMMON"
    "_SHOP_BUY_TIMES\020\'\022\027\n\023SUIT_FRAGMENT_TIMES"
    "\020(\022\030\n\024SUIT_DECOMPOSE_TIMES\020)\022\032\n\026EXCHANGE"
    "_CRYSTAL_TIMES\020*\022\027\n\023JING_JI_CHANG_TIMES\020"
    "+\022\020\n\014VIP_LEVEL_UP\020,\022\026\n\022JING_JI_CHANG_RAN"
    "K\020-\022\024\n\020E_MO_RU_QIN_RANK\020.\022\027\n\023CROSS_MISSI"
    "ON_TIMES\020/\022\031\n\025TOTAL_GAIN_COIN_COUNT\0200\022\016\n"
    "\nHERO_COUNT\0201\022%\n!DRESS_COMMON_GOD_EQUIP_"
    "STAR_LEVEL\0202\022%\n!DRESS_HOUNOR_GOD_EQUIP_S"
    "TAR_LEVEL\0203\022\026\n\022DRESS_R_SUIT_COUNT\0204\022\027\n\023D"
    "RESS_SR_SUIT_COUNT\0205\022\030\n\024DRESS_SSR_SUIT_C"
    "OUNT\0206\022\027\n\023DRESS_UR_SUIT_COUNT\0207\022\025\n\021PURPL"
    "E_HERO_COUNT\0208\022\023\n\017GOLD_HERO_COUNT\0209\022!\n\035E"
    "_MO_RU_QIN_LAST_ATTACK_COUNT\020:*Q\n\tQuestT"
    "ype\022\t\n\005COUNT\020\001\022\014\n\010STATEFUL\020\002\022\023\n\017LESS_THA"
    "N_COUNT\020\003\022\026\n\022LESS_THAN_STATEFUL\020\004**\n\013YaY"
    "aMsgType\022\014\n\010GET_TYPE\020\001\022\r\n\tPUSH_TYPE\020\002*6\n"
    "\013ElementType\022\007\n\003ALL\020\001\022\007\n\003ICE\020\002\022\010\n\004FIRE\020\003"
    "\022\013\n\007THUNDER\020\004*2\n\020HeroTokenMsgType\022\020\n\014CON"
    "SUME_ITEM\020\001\022\014\n\010GET_TASK\020\002*\215\001\n\010RankType\022\030"
    "\n\024WING_WHITE_TIME_RANK\020\001\022\030\n\024WING_GREEN_T"
    "IME_RANK\020\002\022\027\n\023WING_BLUE_TIME_RANK\020\003\022\031\n\025W"
    "ING_PURPLE_TIME_RANK\020\004\022\031\n\025WING_ORANGE_TI"
    "ME_RANK\020\005*8\n\rWingsConstant\022\021\n\rMAX_LUCKY_"
    "NUM\020d\022\024\n\020WINGS_OPEN_LEVEL\020(*+\n\021BattleUse"
    "ItemType\022\010\n\004NONE\020\000\022\014\n\010USE_ITEM\020\001*+\n\nGemS"
    "hopBuy\022\013\n\007GOLDBUY\020\001\022\020\n\014GEMVOLUMEBUY\020\002*E\n"
    "\021AllianCheckButton\022\027\n\023CHECK_BUTTON_TYPE_"
    "1\020\000\022\027\n\023CHECK_BUTTON_TYPE_2\020\001*2\n\nApplySta"
    "te\022\021\n\rAPPLY_STATE_1\020\001\022\021\n\rAPPLY_STATE_2\020\002"
    "*:\n\017AllianOperState\022\022\n\016Refused_TYPE_2\020\000\022"
    "\023\n\017APPROVAL_TYPE_1\020\001*A\n\027ApplyAddAlliance"
    "UpEmail\022\022\n\016UPEMAIL_TYPE_1\020\001\022\022\n\016UPEMAIL_T"
    "YPE_2\020\002*D\n\020AddAllianceState\022\031\n\025INITIATIV"
    "E_ADD_TYPE_1\020\001\022\025\n\021MAIN_AGREE_TYPE_2\020\002*@\n"
    "\021ExitAllianceState\022\025\n\021INITIATIVE_TYPE_1\020"
    "\001\022\024\n\020MAIN_KICK_TYPE_2\020\002*F\n\021AddOrExitAlli"
    "ance\022\027\n\023ADD_ALLIANCE_TYPE_1\020\001\022\030\n\024EXIT_AL"
    "LIANCE_TYPE_2\020\002*(\n\013IosGitState\022\014\n\010HAVE_G"
    "ET\020\001\022\013\n\007NOT_GET\020\000*\323\001\n\010DataType\022\r\n\tCOIN_T"
    "YPE\020\001\022\r\n\tGOLD_TYPE\020\002\022\017\n\013VALOR_SCORE\020\003\022\021\n"
    "\rHISTORY_VALOR\020\004\022\t\n\005HONOR\020\005\022\016\n\nREPUTATIO"
    "N\020\006\022\026\n\022CONTRIBUTION_VALUE\020\007\022\r\n\tPEAK_COIN"
    "\020\010\022\016\n\nLUCK_SCORE\020\t\022\021\n\rCAN_BUY_TIMES\020\n\022\022\n"
    "\016CRYSTAL_CHANGE\020\013\022\014\n\010GEM_TYPE\020\014*\257\001\n\010Shop"
    "Type\022\021\n\rGOBLIN_MARKET\020\001\022\020\n\014COINS_MARKET\020"
    "\002\022\023\n\017ALLIANCE_MARKET\020\003\022\020\n\014ARENA_MARKET\020\004"
    "\022\020\n\014VALOR_MARKET\020\005\022\017\n\013PEAK_MARKET\020\006\022\020\n\014B"
    "LACK_MARKET\020\007\022\022\n\016CRYSTAL_MARKET\020\010\022\016\n\nGEM"
    "_MARKET\020\t*4\n\021ShopOperationType\022\r\n\tINIT_T"
    "YPE\020\001\022\020\n\014REFRESH_TYPE\020\002*H\n\021RoleActiviteS"
    "tate\022\017\n\013IS_ACTIVITE\020\001\022\020\n\014NOT_ACTIVITE\020\000\022"
    "\020\n\014CAN_ACTIVITE\020\002*W\n\rRoleTrainType\022\017\n\013CO"
    "MMON_TYPE\020\001\022\021\n\rADVANCED_TYPE\020\002\022\020\n\014PLATIN"
    "A_TYPE\020\003\022\020\n\014DIAMOND_TYPE\020\004B\030\n\026com.hawk.g"
    "ame.protocol", 9652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Const.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Const_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Const_2eproto {
  StaticDescriptorInitializer_Const_2eproto() {
    protobuf_AddDesc_Const_2eproto();
  }
} static_descriptor_initializer_Const_2eproto_;
const ::google::protobuf::EnumDescriptor* itemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemType_descriptor_;
}
bool itemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* playerAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerAttr_descriptor_;
}
bool playerAttr_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1020:
    case 1021:
    case 2001:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* roleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleType_descriptor_;
}
bool roleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* chatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatType_descriptor_;
}
bool chatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* toolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return toolType_descriptor_;
}
bool toolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 35:
    case 36:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipPart_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipPart_descriptor_;
}
bool equipPart_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipQuality_descriptor_;
}
bool equipQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipAutoSell_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipAutoSell_descriptor_;
}
bool equipAutoSell_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* elementQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementQuality_descriptor_;
}
bool elementQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* elementAutoSell_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementAutoSell_descriptor_;
}
bool elementAutoSell_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* prof_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return prof_descriptor_;
}
bool prof_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 1001:
    case 1002:
    case 1003:
    case 2001:
    case 2002:
    case 2003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* attrCond_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return attrCond_descriptor_;
}
bool attrCond_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipAttrGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipAttrGrade_descriptor_;
}
bool equipAttrGrade_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* attr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return attr_descriptor_;
}
bool attr_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 2001:
    case 2002:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2103:
    case 2104:
    case 3001:
    case 3002:
    case 3003:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Buff_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Buff_descriptor_;
}
bool Buff_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 100:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* changeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return changeType_descriptor_;
}
bool changeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* buyMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buyMoneyType_descriptor_;
}
bool buyMoneyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* shootType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shootType_descriptor_;
}
bool shootType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* shootFreeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shootFreeType_descriptor_;
}
bool shootFreeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* shootRewardState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shootRewardState_descriptor_;
}
bool shootRewardState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipStatus_descriptor_;
}
bool equipStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* monsterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterType_descriptor_;
}
bool monsterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleStatus_descriptor_;
}
bool RoleStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeType_descriptor_;
}
bool NoticeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenLevelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenLevelType_descriptor_;
}
bool OpenLevelType_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* kickReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kickReason_descriptor_;
}
bool kickReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActivityId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityId_descriptor_;
}
bool ActivityId_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 51:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendChatMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendChatMsgType_descriptor_;
}
bool FriendChatMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* notifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyType_descriptor_;
}
bool notifyType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* dailyRefreshType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailyRefreshType_descriptor_;
}
bool dailyRefreshType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 102:
    case 103:
    case 104:
    case 111:
    case 112:
    case 113:
    case 114:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestState_descriptor_;
}
bool QuestState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStep_descriptor_;
}
bool QuestStep_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestEventType_descriptor_;
}
bool QuestEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestType_descriptor_;
}
bool QuestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YaYaMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaYaMsgType_descriptor_;
}
bool YaYaMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ElementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementType_descriptor_;
}
bool ElementType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HeroTokenMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroTokenMsgType_descriptor_;
}
bool HeroTokenMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankType_descriptor_;
}
bool RankType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WingsConstant_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingsConstant_descriptor_;
}
bool WingsConstant_IsValid(int value) {
  switch(value) {
    case 40:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleUseItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleUseItemType_descriptor_;
}
bool BattleUseItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GemShopBuy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemShopBuy_descriptor_;
}
bool GemShopBuy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllianCheckButton_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianCheckButton_descriptor_;
}
bool AllianCheckButton_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyState_descriptor_;
}
bool ApplyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllianOperState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianOperState_descriptor_;
}
bool AllianOperState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyAddAllianceUpEmail_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyAddAllianceUpEmail_descriptor_;
}
bool ApplyAddAllianceUpEmail_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddAllianceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAllianceState_descriptor_;
}
bool AddAllianceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExitAllianceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitAllianceState_descriptor_;
}
bool ExitAllianceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddOrExitAlliance_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddOrExitAlliance_descriptor_;
}
bool AddOrExitAlliance_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IosGitState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IosGitState_descriptor_;
}
bool IosGitState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopType_descriptor_;
}
bool ShopType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShopOperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopOperationType_descriptor_;
}
bool ShopOperationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleActiviteState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleActiviteState_descriptor_;
}
bool RoleActiviteState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleTrainType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTrainType_descriptor_;
}
bool RoleTrainType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
