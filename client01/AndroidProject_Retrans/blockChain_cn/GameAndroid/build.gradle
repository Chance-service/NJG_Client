apply plugin: 'com.android.application'

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'androidx.core:core:1.5.0'
    implementation  project(':sdklibs:libcocos2dx')
    implementation  project(':sdklibs:GameLibBC')
    implementation 'androidx.multidex:multidex:2.0.1'
}

configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.6.0'
    }
//    resolutionStrategy.eachDependency{
//        DependencyResolveDetails detalis ->
//            def requested = detalis.requested
//            if (requested.group == "androidx.appcompat") {
//                if (requested.name == "appcompat"){
//                    details.useVersion "1.3.1"
//                }
//            }
//    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "28.0.3"

    defaultConfig{
        minSdkVersion 21
        ndk {
            abiFilters "arm64-v8a"
        }
        aaptOptions.cruncherEnabled = false //It will be removed in a future version of the gradle plugin.
        //aaptOptions.useNewCruncher = false //It will be removed in a future version of the gradle plugin.
        multiDexEnabled true
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        H365 {
            res.srcDirs = ['H365/res']
        }
        EROR18 {
            res.srcDirs = ['EROR18/res']
        }
        JSG {
            res.srcDirs = ['JSG/res']
        }
        //LSJ {
        //    res.srcDirs = ['H365/res']
        //}
        KUSO {
            res.srcDirs = ['KUSO/res']
        }
        EROLABS {
            res.srcDirs = ['EROLABS/res']
        }
        APLUS_CPS1 {
            res.srcDirs = ['APLUS/res']
        }
        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }



    flavorDimensions "app_type"
    productFlavors {
        H365 {
            applicationId = "chance.debug.ninja.girl.h365.cn"
            dimension "app_type"
        }
        EROR18 {
            applicationId = "chance.debug.ninja.girl.r18.cn"
            dimension "app_type"
        }
        JSG {
            applicationId = "chance.debug.ninja.girl.jsg.cn"
            dimension "app_type"
        }
//        LSJ {
//            dimension "app_type"
//        }
        KUSO {
            applicationId = "chance.debug.ninja.girl.kuso.cn"
            dimension "app_type"
            packagingOptions {
                exclude 'META-INF/kotlinx-serialization-json.kotlin_module'
                exclude 'META-INF/kotlinx-serialization-core.kotlin_module'
                exclude 'META-INF/atomicfu.kotlin_module'
                exclude 'META-INF/com.android.tools/proguard/coroutines.pro'
                exclude 'META-INF/kotlinx_coroutines_core.version'
            }
        }

        EROLABS {
            applicationId = "chance.debug.ninja.girl.erolabs.cn"
            dimension "app_type"
        }

        APLUS_CPS1 {
            applicationId = "chance.debug.ninja.girl.kuso.cn"
            dimension "app_type"
            packagingOptions {
                exclude 'META-INF/kotlinx-serialization-json.kotlin_module'
                exclude 'META-INF/kotlinx-serialization-core.kotlin_module'
                exclude 'META-INF/atomicfu.kotlin_module'
                exclude 'META-INF/com.android.tools/proguard/coroutines.pro'
                exclude 'META-INF/kotlinx_coroutines_core.version'
            }
        }
//        MURA {
//            dimension "app_type"
//        }
    }

    buildTypes {
        debug {
        }
        release {
        }
        qa {
            initWith release
            matchingFallbacks = ['release']
        }
    }

    afterEvaluate {
        android.applicationVariants.all { variant ->
            def flavor = variant.flavorName
            if (variant.flavorName.contains("APLUS")) {
                flavor = "APLUS"
            }
            def configName = "${variant.name}Implementation"
            def sdkDir = file("../../sdklibs/GameLibBC/platformlibs/${flavor}")
            def commonLibs = file("../../sdklibs/GameLibBC/libs")

            if (sdkDir.exists()) {
                dependencies.add(configName, fileTree(dir: sdkDir, include: ['*.aar', '*.jar']))
            }
            if (commonLibs.exists()) {
                dependencies.add(configName, fileTree(dir: commonLibs, include: ['*.aar']))
            }
        }
    }
}
