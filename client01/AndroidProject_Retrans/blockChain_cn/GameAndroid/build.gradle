import com.android.build.gradle.internal.api.BaseVariantOutputImpl

apply plugin: 'com.android.application'

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'androidx.core:core:1.13.1'
    implementation  project(':sdklibs:libcocos2dx')
    implementation  project(':sdklibs:GameLibBC')
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.media3:media3-exoplayer:1.3.1'
    implementation 'androidx.media3:media3-ui:1.3.1'
}

configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.6.0'
    }
//    resolutionStrategy.eachDependency{
//        DependencyResolveDetails detalis ->
//            def requested = detalis.requested
//            if (requested.group == "androidx.appcompat") {
//                if (requested.name == "appcompat"){
//                    details.useVersion "1.3.1"
//                }
//            }
//    }
}

def opCps = [
    "OP_CPS0", "OP_CPS9", "OP_CPS12", "OP_CPS13", "OP_CPS18", "OP_CPS19", "OP_CPS20",
    "OP_CPS25", "OP_CPS39", "OP_CPS42", "OP_CPS49", "OP_CPS61", "OP_CPS75", "OP_CPS76",
    "OP_CPS85", "OP_CPS89", "OP_CPS96", "OP_CPS98", "OP_CPS114", "OP_CPS115", "OP_CPS116",
    "OP_CPS117", "OP_CPS120", "OP_CPS126", "OP_CPS129", "OP_CPS130", "OP_CPS131", "OP_CPS132",
    "OP_CPS133", "OP_CPS134", "OP_CPS135", "OP_CPS136", "OP_CPS137", "OP_CPS138", "OP_CPS139",
    "OP_CPS140", "OP_CPS141", "OP_CPS142", "OP_CPS143", "OP_CPS147", "OP_CPS152",
    "OP_CPS155", "OP_CPS167", "OP_CPS168", "OP_CPS169", "OP_CPS170", "OP_CPS174",
    "OP_CPS175", "OP_CPS176", "OP_CPS184", "OP_CPS186", "OP_CPS195", "OP_CPS197",
    "OP_CPS199", "OP_CPS202", "OP_CPS203", "OP_CPS204",
    "OP_CPS207", "OP_CPS210",
    "OP_CPS218", "OP_CPS220", "OP_CPS226", "OP_CPS229",
    "OP_CPS230", "OP_CPS232", "OP_CPS234", "OP_CPS248", "OP_CPS249",
    "OP_CPS253",
    "OP_CPS268", "OP_CPS270",
    "OP_CPS271", "OP_CPS272", "OP_CPS274", "OP_CPS275", "OP_CPS276", "OP_CPS277", "OP_CPS278",
    "OP_CPS280", "OP_CPS281", "OP_CPS283",
    "OP_CPS290", "OP_CPS291",
    "OP_CPS298", "OP_CPS299"
]

android {
    namespace 'chance.ninja.girl'
    compileSdkVersion 34

    defaultConfig{
        minSdkVersion 21
        targetSdkVersion 33
        ndk {
            abiFilters "arm64-v8a"
        }
        aaptOptions.cruncherEnabled = false //It will be removed in a future version of the gradle plugin.
        //aaptOptions.useNewCruncher = false //It will be removed in a future version of the gradle plugin.
        multiDexEnabled true
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        H365 {
            res.srcDirs = ['H365/res']
        }
        EROR18 {
            res.srcDirs = ['EROR18/res']
        }
        JSG {
            res.srcDirs = ['JSG/res']
        }
        KUSO {
            res.srcDirs = ['KUSO/res']
        }
        EROLABS {
            res.srcDirs = ['EROLABS/res']
        }
        APLUS_CPS1 {
            res.srcDirs = ['APLUS/res']
        }
        for (cps in opCps) {
            "${cps}" {
                res.srcDirs = ['OP/res']
            }
        }
        GP {
            res.srcDirs = ['GP/res']
        }
        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }



    flavorDimensions "app_type"
    productFlavors {
        H365 {
            applicationId = "chance.debug.ninja.girl.h365.cn"
            dimension "app_type"
        }
        EROR18 {
            applicationId = "chance.debug.ninja.girl.r18.cn"
            dimension "app_type"
        }
        JSG {
            applicationId = "chance.debug.ninja.girl.jsg.cn"
            dimension "app_type"
        }
        KUSO {
            applicationId = "chance.debug.ninja.girl.kuso.cn"
            dimension "app_type"
            packagingOptions {
                exclude 'META-INF/kotlinx-serialization-json.kotlin_module'
                exclude 'META-INF/kotlinx-serialization-core.kotlin_module'
                exclude 'META-INF/atomicfu.kotlin_module'
                exclude 'META-INF/com.android.tools/proguard/coroutines.pro'
                exclude 'META-INF/kotlinx_coroutines_core.version'
            }
        }

        EROLABS {
            applicationId = "chance.debug.ninja.girl.erolabs.cn"
            dimension "app_type"
        }

        APLUS_CPS1 {
            applicationId = "chance.debug.ninja.girl.kuso.cn"
            dimension "app_type"
            packagingOptions {
                exclude 'META-INF/kotlinx-serialization-json.kotlin_module'
                exclude 'META-INF/kotlinx-serialization-core.kotlin_module'
                exclude 'META-INF/atomicfu.kotlin_module'
                exclude 'META-INF/com.android.tools/proguard/coroutines.pro'
                exclude 'META-INF/kotlinx_coroutines_core.version'
            }
        }

        for (cps in opCps) {
            "${cps}" {
                applicationId = "chance.debug.ninja.girl.op.cn"
                dimension "app_type"
            }
        }
        GP {
            applicationId = "chance.debug.ninja.girl.gp.cn"
            dimension "app_type"
        }
    }

    buildTypes {
        debug {
        }
        release {
        }
        qa {
            initWith release
            matchingFallbacks = ['release']
        }
    }

    afterEvaluate {
        android.applicationVariants.all { variant ->
            def flavor = variant.flavorName
            if (variant.flavorName.contains("APLUS")) {
                flavor = "APLUS"
            }
            if (variant.flavorName.contains("OP")) {
                flavor = "OP"
            }
            def configName = "${variant.name}Implementation"
            def sdkDir = file("../../sdklibs/GameLibBC/platformlibs/${flavor}")
            def commonLibs = file("../../sdklibs/GameLibBC/libs")

            if (sdkDir.exists()) {
                dependencies.add(configName, fileTree(dir: sdkDir, include: ['*.aar', '*.jar']))
            }
            if (commonLibs.exists()) {
                dependencies.add(configName, fileTree(dir: commonLibs, include: ['*.aar']))
            }
            if (variant.flavorName.contains("OP") && variant.buildType.name.contains("release")) {
                variant.outputs.all { output ->
                    def variantName = variant.name
                    def taskName = "copy${variant.flavorName}_${variant.buildType.name}Apk"
                    tasks.register(taskName, Copy) {
                        def str = output.outputFile.toString().split(variant.flavorName)
                        def path = str[0]
                        dependsOn variant.assembleProvider
                        from output.outputFile
                        into "$path/OP_ALLCPS/${variant.buildType.name}/${variant.getVersionCode()}"
                        println "Copying to: $path/OP_ALLCPS/${variant.buildType.name}/${variant.getVersionCode()}"
                    }

                    tasks.named("assemble${variantName.capitalize()}") {
                        finalizedBy tasks.named(taskName)
                    }
                }
            }
            else {
                variant.outputs.all { output ->
                    def variantName = variant.name
                    def taskName = "copy${variant.flavorName}_${variant.buildType.name}Apk"
                    tasks.register(taskName, Copy) {
                        def str = output.outputFile.toString().split(variant.flavorName)
                        def path = str[0]
                        dependsOn variant.assembleProvider
                        from output.outputFile
                        into "$path/${variant.buildType.name}${variant.getVersionCode()}"
                        println "Copying to: $path/${variant.buildType.name}${variant.getVersionCode()}"
                    }

                    tasks.named("assemble${variantName.capitalize()}") {
                        finalizedBy tasks.named(taskName)
                    }
                }
            }
        }
    }
    variantFilter { variant ->
        if (!variant.buildType.name.contains("debug")) {
            variant.ignore = true
        }
        def flavors = variant.flavors*.name
        if (flavors.contains("APLUS_CPS1") || flavors.contains("JSG")) {
            variant.ignore = true
        }
    }
    applicationVariants.all { variant ->
        def flavorName = variant.flavorName ?: ""
        def buildType = variant.buildType.name

        variant.outputs.all { output ->
            def vCode = variant.versionCode
            def vName = variant.versionName

            def outputApkName = flavorName.contains("OP_CPS")
                    ? "NG_${vCode}_${flavorName.split("CPS")[1]}.apk"
                    : "NG_${vName}_${buildType}_${flavorName}.apk"
	        output.outputFileName = outputApkName
        }
    }
}
