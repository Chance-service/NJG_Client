// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Const.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Const.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* itemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* playerAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* roleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* chatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* toolType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipPart_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipAutoSell_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* elementQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* elementAutoSell_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* prof_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* attrCond_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipAttrGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* attr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Buff_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* changeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* buyMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* shootType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* shootFreeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* shootRewardState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* equipStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* monsterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NoticeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpenLevelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* kickReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendChatMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* notifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* dailyRefreshType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestStep_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaYaMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ElementType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroTokenMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WingsConstant_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleUseItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GemShopBuy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AllianCheckButton_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AllianOperState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyAddAllianceUpEmail_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddAllianceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExitAllianceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddOrExitAlliance_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IosGitState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShopOperationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleActiviteState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleTrainType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MultiEliteState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddRoleAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldBossBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionRecordType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionModuleId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MutliNoticeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HaremType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BossAutoBattleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldBossRankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldBossFailingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldBossIsFree_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipEnhanceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SevenDayEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginSignAwdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EighteenPrincesLayerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EighteenPrincesMedicalKitTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BadgeAttrGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BadgeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BadgeQuality_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Const_2eproto() {
  protobuf_AddDesc_Const_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Const.proto");
  GOOGLE_CHECK(file != NULL);
  itemType_descriptor_ = file->enum_type(0);
  playerAttr_descriptor_ = file->enum_type(1);
  roleType_descriptor_ = file->enum_type(2);
  chatType_descriptor_ = file->enum_type(3);
  toolType_descriptor_ = file->enum_type(4);
  equipPart_descriptor_ = file->enum_type(5);
  equipQuality_descriptor_ = file->enum_type(6);
  equipAutoSell_descriptor_ = file->enum_type(7);
  elementQuality_descriptor_ = file->enum_type(8);
  elementAutoSell_descriptor_ = file->enum_type(9);
  prof_descriptor_ = file->enum_type(10);
  attrCond_descriptor_ = file->enum_type(11);
  equipAttrGrade_descriptor_ = file->enum_type(12);
  attr_descriptor_ = file->enum_type(13);
  Buff_descriptor_ = file->enum_type(14);
  changeType_descriptor_ = file->enum_type(15);
  buyMoneyType_descriptor_ = file->enum_type(16);
  shootType_descriptor_ = file->enum_type(17);
  shootFreeType_descriptor_ = file->enum_type(18);
  shootRewardState_descriptor_ = file->enum_type(19);
  equipStatus_descriptor_ = file->enum_type(20);
  monsterType_descriptor_ = file->enum_type(21);
  RoleStatus_descriptor_ = file->enum_type(22);
  NoticeType_descriptor_ = file->enum_type(23);
  OpenLevelType_descriptor_ = file->enum_type(24);
  kickReason_descriptor_ = file->enum_type(25);
  ActivityId_descriptor_ = file->enum_type(26);
  FriendChatMsgType_descriptor_ = file->enum_type(27);
  notifyType_descriptor_ = file->enum_type(28);
  dailyRefreshType_descriptor_ = file->enum_type(29);
  QuestState_descriptor_ = file->enum_type(30);
  QuestStep_descriptor_ = file->enum_type(31);
  QuestEventType_descriptor_ = file->enum_type(32);
  QuestType_descriptor_ = file->enum_type(33);
  YaYaMsgType_descriptor_ = file->enum_type(34);
  ElementType_descriptor_ = file->enum_type(35);
  HeroTokenMsgType_descriptor_ = file->enum_type(36);
  RankType_descriptor_ = file->enum_type(37);
  WingsConstant_descriptor_ = file->enum_type(38);
  BattleUseItemType_descriptor_ = file->enum_type(39);
  GemShopBuy_descriptor_ = file->enum_type(40);
  AllianCheckButton_descriptor_ = file->enum_type(41);
  ApplyState_descriptor_ = file->enum_type(42);
  AllianOperState_descriptor_ = file->enum_type(43);
  ApplyAddAllianceUpEmail_descriptor_ = file->enum_type(44);
  AddAllianceState_descriptor_ = file->enum_type(45);
  ExitAllianceState_descriptor_ = file->enum_type(46);
  AddOrExitAlliance_descriptor_ = file->enum_type(47);
  IosGitState_descriptor_ = file->enum_type(48);
  DataType_descriptor_ = file->enum_type(49);
  ShopType_descriptor_ = file->enum_type(50);
  ShopOperationType_descriptor_ = file->enum_type(51);
  RoleActiviteState_descriptor_ = file->enum_type(52);
  RoleTrainType_descriptor_ = file->enum_type(53);
  MultiEliteState_descriptor_ = file->enum_type(54);
  AddRoleAttrType_descriptor_ = file->enum_type(55);
  WorldBossBuffType_descriptor_ = file->enum_type(56);
  ActionRecordType_descriptor_ = file->enum_type(57);
  ActionModuleId_descriptor_ = file->enum_type(58);
  MutliNoticeType_descriptor_ = file->enum_type(59);
  HaremType_descriptor_ = file->enum_type(60);
  BossAutoBattleType_descriptor_ = file->enum_type(61);
  WorldBossRankType_descriptor_ = file->enum_type(62);
  WorldBossFailingType_descriptor_ = file->enum_type(63);
  WorldBossIsFree_descriptor_ = file->enum_type(64);
  EquipEnhanceType_descriptor_ = file->enum_type(65);
  SevenDayEventType_descriptor_ = file->enum_type(66);
  LoginSignAwdType_descriptor_ = file->enum_type(67);
  EighteenPrincesLayerStatus_descriptor_ = file->enum_type(68);
  EighteenPrincesMedicalKitTYPE_descriptor_ = file->enum_type(69);
  BadgeAttrGrade_descriptor_ = file->enum_type(70);
  BadgeType_descriptor_ = file->enum_type(71);
  BadgeQuality_descriptor_ = file->enum_type(72);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Const_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_Const_2eproto() {
}

void protobuf_AddDesc_Const_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Const.proto*s\n\010itemType\022\017\n\013PLAYER_ATTR"
    "\020\001\022\010\n\004ROLE\020\002\022\010\n\004TOOL\020\003\022\t\n\005EQUIP\020\004\022\t\n\005SKI"
    "LL\020\005\022\013\n\007ELEMENT\020\006\022\010\n\004SOUL\020\007\022\n\n\006AVATAR\020\010\022"
    "\t\n\005BADGE\020\t*\265\003\n\nplayerAttr\022\t\n\004GOLD\020\351\007\022\t\n\004"
    "COIN\020\352\007\022\n\n\005LEVEL\020\353\007\022\010\n\003EXP\020\354\007\022\r\n\010VIPLEVE"
    "L\020\355\007\022\020\n\013SMELT_VALUE\020\356\007\022\021\n\014CONTRIBUTION\020\357"
    "\007\022\021\n\014ALLIANCE_EXP\020\360\007\022\017\n\nBOSS_TIMES\020\361\007\022\020\n"
    "\013HONOR_VALUE\020\362\007\022\025\n\020REPUTATION_VALUE\020\363\007\022\024"
    "\n\017ELITE_MAP_TIMES\020\364\007\022\026\n\021MULTI_ELITE_SCOR"
    "E\020\365\007\022\016\n\tGOLD_BEAN\020\366\007\022\017\n\nCROSS_COIN\020\367\007\022\026\n"
    "\021MULTI_ELITE_TIMES\020\370\007\022\022\n\rCRYSTAL_VALUE\020\374"
    "\007\022\026\n\021ALLIANCE_VITALITY\020\321\017\022\024\n\017FASTFIGHT_T"
    "IMES\020\217N\022\016\n\tROLE_SOUL\020\375\007\022\023\n\016BIG_MEDICALKI"
    "T\020\376\007\022\025\n\020MIDLE_MEDICALKIT\020\377\007\022\025\n\020SMALL_MED"
    "ICALKIT\020\200\010*H\n\010roleType\022\r\n\tMAIN_ROLE\020\001\022\r\n"
    "\tMERCENARY\020\002\022\013\n\007MONSTER\020\003\022\021\n\rMULTI_MONST"
    "ER\020\004*\261\001\n\010chatType\022\016\n\nCHAT_WORLD\020\000\022\021\n\rCHA"
    "T_ALLIANCE\020\001\022\022\n\016CHAT_BROADCAST\020\002\022\023\n\017WORL"
    "D_BROADCAST\020\003\022\021\n\rCHAT_PERSONAL\020\004\022\030\n\024CHAT"
    "_ALLIANCE_SYSTEM\020\005\022\030\n\024CHAT_PERSONAL_SYST"
    "EM\020\006\022\022\n\016CHAT_CROSS_PVP\020\007*\254\005\n\010toolType\022\n\n"
    "\006NORMAL\020\000\022\014\n\010FRAGMENT\020\001\022\007\n\003GEM\020\002\022\n\n\006HAMM"
    "ER\020\003\022\014\n\010TREASURE\020\004\022\007\n\003KEY\020\005\022\t\n\005ELITE\020\006\022\010"
    "\n\004GIFT\020\007\022\017\n\013GEM_PACKAGE\020\010\022\031\n\025WORDS_EXCHA"
    "NGE_NORMAL\020\t\022\032\n\026WORDS_EXCHANGE_SPECIAL\020\n"
    "\022\030\n\024BOSS_CHALLENGE_TIMES\020\013\022\021\n\rLUCK_TREAS"
    "URE\020\014\022\016\n\nSOUL_STONE\020\r\022\022\n\016ELITE_MAP_BOOK\020"
    "\016\022\032\n\026ALLOANCE_VITALITY_PILL\020\017\022\022\n\016GOODS_C"
    "OMPOUND\020\020\022\024\n\020COMMON_GODLY_EXP\020\021\022\030\n\024REPUT"
    "ATION_GODLY_EXP\020\022\022\021\n\rSUIT_FRAGMENT\020\023\022\022\n\016"
    "EQUIP_EXCHANGE\020\024\022\024\n\020ELEMENT_EXCHANGE\020\025\022\016"
    "\n\nHERO_TOKEN\020\026\022\013\n\007FEATHER\020\027\022\024\n\020ELEMENT_F"
    "RAGMENT\020\030\022\032\n\026EXPEDITION_ARMORY_ITEM\020\031\022\027\n"
    "\023HOUR_PLACENENT_CARD\020\032\022\014\n\010EXP_REEL\020\033\022\024\n\020"
    "TREASURE_SELITEM\020\034\022\016\n\nGEM_VOLUME\020#\022\020\n\014SU"
    "IT_DRAWING\020$\022\017\n\013AVATAR_GIFT\020%\022\036\n\032MULTIEL"
    "ITE_CHALLENGE_TIMES\020&\022\026\n\022RECYCLE_SEVEN_I"
    "TEM\020d\022\030\n\024FASTFIGHT_TIMES_BOOK\020e*\204\001\n\tequi"
    "pPart\022\n\n\006HELMET\020\001\022\010\n\004RING\020\002\022\010\n\004BELT\020\003\022\013\n"
    "\007CUIRASS\020\004\022\013\n\007WEAPON1\020\005\022\013\n\007WEAPON2\020\006\022\014\n\010"
    "LEGGUARD\020\007\022\t\n\005SHOES\020\010\022\t\n\005GLOVE\020\t\022\014\n\010NECK"
    "LACE\020\n*F\n\014equipQuality\022\t\n\005WHITE\020\001\022\t\n\005GRE"
    "EN\020\002\022\010\n\004BLUE\020\003\022\n\n\006PURPLE\020\004\022\n\n\006ORANGE\020\005*|"
    "\n\requipAutoSell\022\023\n\017AUTO_SELL_WHITE\020\001\022\023\n\017"
    "AUTO_SELL_GREEN\020\002\022\022\n\016AUTO_SELL_BLUE\020\004\022\024\n"
    "\020AUTO_SELL_PURPLE\020\010\022\027\n\023AUTO_SELL_DIFF_PR"
    "OF\020\020*p\n\016elementQuality\022\021\n\rELEMENT_WHITE\020"
    "\001\022\021\n\rELEMENT_GREEN\020\002\022\020\n\014ELEMENT_BLUE\020\003\022\022"
    "\n\016ELEMENT_PURPLE\020\004\022\022\n\016ELEMENT_ORANGE\020\005*\246"
    "\001\n\017elementAutoSell\022\033\n\027AUTO_SELL_ELEMENT_"
    "WHITE\020\001\022\033\n\027AUTO_SELL_ELEMENT_GREEN\020\002\022\032\n\026"
    "AUTO_SELL_ELEMENT_BLUE\020\004\022\034\n\030AUTO_SELL_EL"
    "EMENT_PURPLE\020\010\022\037\n\033AUTO_SELL_ELEMENT_DIFF"
    "_PROF\020\020*\253\001\n\004prof\022\013\n\007WARRIOR\020\001\022\n\n\006HUNTER\020"
    "\002\022\t\n\005MAGIC\020\003\022\025\n\021MERCENARY_WARRIOR\020\001\022\024\n\020M"
    "ERCENARY_HUNTER\020\002\022\023\n\017MERCENARY_MAGIC\020\003\022\024"
    "\n\017MONSTER_WARRIOR\020\321\017\022\023\n\016MONSTER_HUNTER\020\322"
    "\017\022\022\n\rMONSTER_MAGIC\020\323\017*[\n\010attrCond\022\031\n\025ALL"
    "_EQUIP_INTENSIFY_1\020\001\022\031\n\025ALL_EQUIP_INTENS"
    "IFY_2\020\002\022\031\n\025ALL_EQUIP_INTENSIFY_3\020\003*F\n\016eq"
    "uipAttrGrade\022\020\n\014PRIMARY_ATTR\020\001\022\022\n\016SECOND"
    "ARY_ATTR\020\002\022\016\n\nGODLY_ATTR\020\003*\335\007\n\004attr\022\014\n\010S"
    "TRENGHT\020\001\022\013\n\007AGILITY\020\002\022\r\n\tINTELLECT\020\003\022\013\n"
    "\007STAMINA\020\004\022\006\n\002HP\020e\022\006\n\002MP\020f\022\n\n\006MINDMG\020g\022\n"
    "\n\006MAXDMG\020h\022\t\n\005ARMOR\020i\022\n\n\006PHYDEF\020j\022\n\n\006MAG"
    "DEF\020k\022\014\n\010CRITICAL\020l\022\007\n\003HIT\020m\022\t\n\005DODGE\020n\022"
    "\016\n\nRESILIENCE\020o\022\r\n\tRECOVERMP\020p\022\023\n\016BUFF_C"
    "OIN_DROP\020\351\007\022\022\n\rBUFF_EXP_DROP\020\352\007\022\024\n\017BUFF_"
    "EQUIP_DROP\020\353\007\022\020\n\013BUFF_MAX_HP\020\354\007\022\027\n\022BUFF_"
    "AVOID_CONTROL\020\355\007\022\030\n\023BUFF_REVERSE_DAMAGE\020"
    "\356\007\022\025\n\020BUFF_AVOID_ARMOR\020\357\007\022\024\n\017BUFF_SUCK_B"
    "LOOD\020\360\007\022\026\n\021BUFF_RETURN_BLOOD\020\361\007\022\031\n\024BUFF_"
    "CRITICAL_DAMAGE\020\362\007\022\024\n\017BUFF_PHYDEF_ADD\020\321\017"
    "\022\024\n\017BUFF_MAGDEF_ADD\020\322\017\022\032\n\025BUFF_PHYDEF_PE"
    "NETRATE\020\267\020\022\032\n\025BUFF_MAGDEF_PENETRATE\020\270\020\022\026"
    "\n\021BUFF_CRITICAL_ADD\020\325\017\022\030\n\023BUFF_RESILIENC"
    "E_ADD\020\326\017\022\023\n\016BUFF_DODGE_ADD\020\327\017\022\023\n\016BUFF_AR"
    "MOR_ADD\020\330\017\022\032\n\025BUFF_SKILL_DAMAGE_ADD\020\331\017\022\021"
    "\n\014BUFF_HIT_ADD\020\332\017\022\021\n\014BUFF_WARRIOR\020\271\027\022\020\n\013"
    "BUFF_HUNTER\020\272\027\022\016\n\tBUFF_MAGE\020\273\027\022\017\n\nICE_AT"
    "TACK\020\241\037\022\020\n\013ICE_DEFENCE\020\242\037\022\020\n\013FIRE_ATTACK"
    "\020\243\037\022\021\n\014FIRE_DEFENCE\020\244\037\022\023\n\016THUNDER_ATTACK"
    "\020\245\037\022\025\n\020THUNDER_DENFENCE\020\246\037\022\025\n\020ICE_ATTACK"
    "_RATIO\020\247\037\022\026\n\021ICE_DEFENCE_RATIO\020\250\037\022\026\n\021FIR"
    "E_ATTACK_RATIO\020\251\037\022\027\n\022FIRE_DEFENCE_RATIO\020"
    "\252\037\022\031\n\024THUNDER_ATTACK_RATIO\020\253\037\022\033\n\026THUNDER"
    "_DENFENCE_RATIO\020\254\037*\333\004\n\004Buff\022\r\n\tDIZZINESS"
    "\020\001\022\t\n\005FROST\020\002\022\013\n\007SILENCE\020\003\022\t\n\005BLIND\020\004\022\t\n"
    "\005GUARD\020\005\022\013\n\007INSPIRE\020\006\022\014\n\010WEAKNESS\020\007\022\010\n\004R"
    "AGE\020\010\022\n\n\006POISON\020\t\022\n\n\006ARMOUR\020\n\022\010\n\004BURN\020\013\022"
    "\017\n\013BEEN_FROZEN\020\014\022\t\n\005BLEED\020\r\022\020\n\014MAGIC_ATT"
    "ACK\020\016\022\020\n\014ADDITION_DMG\020\017\022\014\n\010CLOAKING\020\020\022\020\n"
    "\014MAGIC_SHIELD\020\021\022\021\n\rSUPPLY_ENERGY\020\022\022\t\n\005SN"
    "EER\020\023\022\014\n\010RECKLESS\020\024\022\010\n\004MARK\020\025\022\016\n\nSPELL_W"
    "ARD\020\026\022\013\n\007BARRIER\020\027\022\010\n\004MISS\020\030\022\016\n\nHEMORRHA"
    "GE\020\031\022\016\n\nDIS_ATTACK\020\032\022\017\n\013DIS_DEFENCE\020\033\022\017\n"
    "\013SUPER_ARMOR\020\034\022\017\n\013IRON_ARMOUR\020\035\022\n\n\006FRENZ"
    "Y\020\036\022\r\n\tWINDBREAK\020\037\022\017\n\013SHADOWARMOR\020 \022\r\n\tS"
    "HREDDING\020!\022\r\n\tINTERVENE\020\"\022\020\n\014SHADOWARMOR"
    "2\020#\022\021\n\rFREEFROMDEATH\020$\022\014\n\010POWERFUL\020&\022\017\n\013"
    "RAGE_DAMAGE\020d\022\020\n\014WARRIOR_BUFF\020e\022\017\n\013HUNTE"
    "R_BUFF\020f\022\016\n\nMAGIC_BUFF\020g*\324\002\n\nchangeType\022"
    "\017\n\013CHANGE_GOLD\020\001\022\017\n\013CHANGE_COIN\020\002\022\016\n\nCHA"
    "NGE_EXP\020\003\022\020\n\014CHANGE_LEVEL\020\004\022\023\n\017CHANGE_RE"
    "CHARGE\020\005\022\023\n\017CHANGE_VIPLEVEL\020\006\022\017\n\013CHANGE_"
    "ROLE\020\007\022\020\n\014CHANGE_TOOLS\020\010\022\020\n\014CHANGE_EQUIP"
    "\020\t\022\026\n\022CHANGE_SMELT_VALUE\020\n\022\027\n\023CHANGE_CON"
    "TRIBUTION\020\013\022\026\n\022CHANGE_HONOR_VALUE\020\014\022\033\n\027C"
    "HANGE_REPUTATION_VALUE\020\r\022\022\n\016CHANGE_ELEME"
    "NT\020\016\022\025\n\021CHANGE_CROSS_COIN\020\017\022\022\n\016CHANGE_CR"
    "YSTAL\020\024*.\n\014buyMoneyType\022\016\n\nMONEY_GOLD\020\001\022"
    "\016\n\nMONEY_COIN\020\002*8\n\tshootType\022\013\n\007PRIMARY\020"
    "\001\022\020\n\014INTERMEDIATE\020\002\022\014\n\010ADVANCED\020\003*/\n\rsho"
    "otFreeType\022\016\n\nSHOOT_FREE\020\001\022\016\n\nSHOOT_GOLD"
    "\020\002*,\n\020shootRewardState\022\013\n\007SHOOT_A\020\001\022\013\n\007S"
    "HOOT_B\020\002*G\n\013equipStatus\022\016\n\nEQUIP_FREE\020\000\022"
    "\023\n\017EQUIP_MAIN_ROLE\020\001\022\023\n\017EQUIP_MERCENARY\020"
    "\002*/\n\013monsterType\022\013\n\007DOGFACE\020\001\022\010\n\004BOSS\020\002\022"
    "\t\n\005ROBOT\020\003*X\n\nRoleStatus\022\016\n\nFIGHTING_1\020\001"
    "\022\016\n\nFIGHTING_2\020\002\022\014\n\010RESTTING\020\003\022\016\n\nEXPEDI"
    "TION\020\004\022\014\n\010FIGHTING\020\005*\261\001\n\nNoticeType\022\014\n\010N"
    "EW_MAIL\020\001\022\013\n\007NEW_MSG\020\002\022\020\n\014GIFT_NEW_MSG\020\003"
    "\022\026\n\022ALLIANCE_BOSS_OPEN\020\004\022\026\n\022TEAM_BATTLE_"
    "SIGNUP\020\005\022\024\n\020ARENA_ALL_SIGNUP\020\006\022\031\n\025MULTI_"
    "ELITE_AVALIABLE\020\007\022\025\n\021ACHIEVEMENT_POINT\020\010"
    "*(\n\rOpenLevelType\022\027\n\023ALLIANCE_OPEN_LEVEL"
    "\020\014*n\n\nkickReason\022\023\n\017DUPLICATE_LOGIN\020\001\022\023\n"
    "\017SERVER_SHUTDOWN\020\002\022\022\n\016LOGIN_FORBIDEN\020\003\022\016"
    "\n\nKICKED_OUT\020\004\022\022\n\016SERVER_RESTART\020\005*\317\021\n\nA"
    "ctivityId\022\016\n\nMONTH_CARD\020S\022\031\n\025ACCUMULATIV"
    "E_RECHARGE\020\002\022\025\n\021CONTINUE_RECHARGE\020\003\022\022\n\016R"
    "ECHARGE_RATIO\020\004\022\n\n\006WECHAT\020\005\022\030\n\024ACCUMULAT"
    "IVE_CONSUME\020\006\022\022\n\016WORDS_EXCHANGE\020\007\022\023\n\017MAP"
    "_DROP_REWARD\020\010\022\023\n\017DOUBLE_RECHARGE\020\t\022\024\n\020H"
    "OLIDAY_TREASURE\020\n\022\023\n\017BETA_TEST_WORDS\020\013\022\030"
    "\n\024COINS_MAP_DROP_RATIO\020\014\022\026\n\022EXP_MAP_DROP"
    "_RATIO\020\r\022\026\n\022ARENA_REWARD_RATIO\020\016\022\030\n\024EQUI"
    "P_MAP_DROP_RATIO\020\017\022\026\n\022QUICK_REWARD_RATIO"
    "\020\020\022\025\n\021SMELT_VALUE_RATIO\020\021\022\024\n\020EQUIP_SELL_"
    "RATIO\020\022\022\024\n\020QUICK_COST_RATIO\020\023\022\022\n\016REGISTE"
    "R_CYCLE\020\024\022\023\n\017SINGLE_RECHARGE\020\025\022\023\n\017RECHAR"
    "GE_REBATE\020\026\022\017\n\013VIP_WELFARE\020\027\022\r\n\tWEEK_CAR"
    "D\020\030\022\025\n\021EXPEDITION_ARMORY\020\031\022\027\n\023TIME_LIMIT"
    "_PURCHASE\020\032\022\026\n\022ACCUMULATIVE_LOGIN\020\033\022\024\n\020R"
    "ECHARGE_REBATE2\020\034\022\020\n\014GEM_COMPOUND\020\035\022\022\n\016C"
    "RAZY_ROULETTE\020\036\022\014\n\010LUCK_BOX\020\037\022\023\n\017STAR_EV"
    "ALUATION\020 \022\021\n\rFRIEND_INVITE\020!\022\r\n\tTAXI_CO"
    "DE\020\"\022\026\n\022SNOWFIELD_TREASURE\020#\022\023\n\017TREASURE"
    "_RAIDER\020$\022\026\n\022COMMENDATION_TRIBE\020%\022\013\n\007FOR"
    "TUNE\020&\022\034\n\030SHOP_REFRESH_PRICE_RATIO\020\'\022\021\n\r"
    "FIND_TREASURE\020(\022\r\n\tGOLD_CLUB\020)\022\025\n\021GRAB_R"
    "ED_ENVELOPE\020*\022\r\n\tCHAT_LUCK\020+\022\r\n\tRANK_GIF"
    "T\020,\022\020\n\014FOREVER_CARD\020-\022\017\n\013SALE_PACKET\020R\022\r"
    "\n\tHOUR_CARD\0203\022\022\n\016FIRST_GIFTPACK\020T\022\020\n\014MYS"
    "TERY_SHOP\020Q\022\023\n\017HERO_TOKEN_SHOP\020R\022\022\n\016LIMI"
    "T_RECHARGE\020U\022\031\n\025EXCHANGE_DOUBLE_SEVEN\020V\022"
    "\017\n\013DAILY_QUEST\020W\022\r\n\tGOLD_FISH\020X\022\024\n\020GODEQ"
    "UIP_FORGING\020Y\022\022\n\016SHOOT_ACTIVITY\020Z\022\021\n\rPRI"
    "NCE_DEVILS\020[\022\021\n\rDISCOUNT_GIFT\020^\022\017\n\013VIP_P"
    "ACKAGE\020_\022\021\n\rNEW_WEEK_CARD\020`\022\017\n\013GROWTH_FU"
    "ND\020a\022\023\n\017Lucky_MERCENARY\020b\022\027\n\023NEW_TREASUR"
    "E_RAIDER\020c\022\r\n\tCHAT_SKIN\020d\022\t\n\005HAREM\020e\022\025\n\021"
    "FRAGMENT_EXCHANGE\020f\022\017\n\013FAIRY_BLESS\020g\022\024\n\020"
    "MAIDEN_ENCOUNTER\020h\022\010\n\004OBON\020i\022\022\n\016WELFARE_"
    "REWARD\020j\022\n\n\006NEW_UR\020k\022\r\n\tTURNTABLE\020l\022\r\n\tH"
    "ALLOWEEN\020m\022\027\n\023QUICK_BATTLE_DOUBLE\020n\022\016\n\nR"
    "ELEASE_UR\020o\022\020\n\014FUN_ACTIVITY\020p\022\035\n\031ACCUMUL"
    "ATIVE_LOGIN_SIGNED\020q\022\034\n\030ACCUMULATIVE_LOG"
    "IN_SEVEN\020r\022\n\n\006NEW_ND\020s\022\017\n\013RELEASE_UR2\020t\022"
    "\030\n\024NEW_TREASURE_RAIDER2\020u\022\033\n\027CONTINUE_RE"
    "CHARGE_MONEY\020v\022\034\n\030ACCUMULATIVE_CONSUMEIT"
    "EM\020w\022\030\n\024NEW_TREASURE_RAIDER3\020x\022\017\n\013RELEAS"
    "E_UR3\020y\022\024\n\020ACTIVECOMPLIANCE\020z\022\022\n\016ACTIVIT"
    "Y123_UR\020{\022\037\n\033ACTIVITY124_RECHARGE_RETURN"
    "\020|\022\026\n\022ACTIVITY125_WEAPON\020}\022\033\n\027WELFAREBYR"
    "EGDATE_REWARD\020~\022\022\n\016ACTIVITY127_UR\020\177\022\023\n\016A"
    "CTIVITY128_UR\020\200\001\022\026\n\021CONSUME_WEEK_CARD\020\201\001"
    "\022\027\n\022CONSUME_MONTH_CARD\020\202\001\022\031\n\024CONTINUE_RE"
    "CHARGE131\020\203\001\022\033\n\026ACTIVITY132_LEVEL_GIFT\020\204"
    "\001\022\034\n\027ACTIVITY133_ONLINE_GIFT\020\205\001\022\035\n\030ACTIV"
    "ITY134_WEEKEND_GIFT\020\206\001\022\031\n\024NEW_TREASURE_R"
    "AIDER4\020\207\001\022\022\n\rEXCHANGE_SHOP\020\210\001\022 \n\033ACTIVIT"
    "Y137_RECHARGE_RETURN\020\211\001\022\033\n\026NEW_TREASURE_"
    "RAIDER139\020\213\001\022\024\n\017RUSSIADISHWHEEL\020\214\001\022\030\n\023AC"
    "TIVITY141_RICHMAN\020\215\001\022\036\n\031ACTIVITY142_EXCH"
    "ANGE_SHOP\020\216\001*B\n\021FriendChatMsgType\022\r\n\tLEA"
    "VE_MSG\020\000\022\016\n\nSYSTEM_MSG\020\002\022\016\n\nPLAYER_MSG\020\003"
    "*!\n\nnotifyType\022\023\n\017NOTIFY_RECHARGE\020\001*\314\010\n\020"
    "dailyRefreshType\022\025\n\021SHOP_ITEM_REFRESH\020\001\022"
    "\021\n\rALLIANCE_SIGN\020\002\022\030\n\024EQUIP_CREATE_REFRE"
    "SH\020\003\022\023\n\017ARENA_CHALLENGE\020\004\022\016\n\nFAST_FIGHT\020"
    "\005\022\016\n\nBOSS_FIGHT\020\006\022\r\n\tELITE_MAP\020\007\022\016\n\nSTAR"
    "_STONE\020\010\022\023\n\017ROLE_RING_LVLUP\020\t\022\025\n\021FB_FRIE"
    "ND_ASKTICK\020\n\022\035\n\031MYSTERY_SHOP_ITEM_REFRES"
    "H\020\013\022\025\n\021VIP_WELFARE_AWARD\020\014\022\027\n\023SHOP_ITEM_"
    "REFRESH_2\020f\022\027\n\023SHOP_ITEM_REFRESH_3\020g\022\027\n\023"
    "SHOP_ITEM_REFRESH_4\020h\022\035\n\031CRYSTAL_SHOP_IT"
    "EM_REFRESH\020o\022\037\n\033CRYSTAL_SHOP_ITEM_REFRES"
    "H_2\020p\022\037\n\033CRYSTAL_SHOP_ITEM_REFRESH_3\020q\022\037"
    "\n\033CRYSTAL_SHOP_ITEM_REFRESH_4\020r\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_1\020s\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_2\020t\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_3\020u\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_4\020v\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_5\020w\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_6\020x\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_7\020y\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_8\020z\022&\n\"MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_9\020{\022\'\n#MERCE"
    "NARY_EXPEDTION_ITEM_REFRESH_10\020|\022\'\n#MERC"
    "ENARY_EXPEDTION_ITEM_REFRESH_11\020}\022\'\n#MER"
    "CENARY_EXPEDTION_ITEM_REFRESH_12\020~\022#\n\036MU"
    "LTIELITE_INIT_BATTLE_COUNT_1\020\202\001\022#\n\036MULTI"
    "ELITE_INIT_BATTLE_COUNT_2\020\203\001\022!\n\034WORLD_BO"
    "SS_BUFF_FREE_TIMES_1\020\214\001\022!\n\034WORLD_BOSS_BU"
    "FF_FREE_TIMES_2\020\215\001*=\n\nQuestState\022\014\n\010UNAC"
    "TIVE\020\000\022\007\n\003ING\020\001\022\014\n\010FINISHED\020\002\022\n\n\006REWARD\020"
    "\003*\214\001\n\tQuestStep\022\t\n\005FIRST\020\001\022\n\n\006SECOND\020\002\022\t"
    "\n\005THIRD\020\003\022\n\n\006FOURTH\020\004\022\t\n\005FIFTH\020\005\022\t\n\005SIXT"
    "H\020\006\022\013\n\007SEVENTH\020\007\022\n\n\006EIGHTH\020\010\022\t\n\005NINTH\020\t\022"
    "\t\n\005TENTH\020\n\022\014\n\010ELEVENTH\020\013*\235\013\n\016QuestEventT"
    "ype\022\r\n\tKILL_BOSS\020\001\022\016\n\nADD_FRIEND\020\002\022\021\n\rJO"
    "IN_ALLIANCE\020\003\022\016\n\nMODIFY_SIN\020\004\022\016\n\nMAKE_EQ"
    "UIP\020\005\022\020\n\014QUICK_BATTLE\020\006\022\017\n\013SMELT_EQUIP\020\007"
    "\022\017\n\013WORLD_SPEAK\020\010\022\020\n\014ARENA_BATTLE\020\t\022\017\n\013H"
    "ERO_FOSTER\020\n\022\017\n\013ELITE_STATE\020\013\022\017\n\013GU_BAO_"
    "SHAN\020\014\022\r\n\tJI_LIU_GU\020\r\022\021\n\rMO_HUA_RU_QIN\020\016"
    "\022\022\n\016DUO_REN_FU_BEN\020\017\022\025\n\021GONG_HUI_ZHENG_B"
    "A\020\020\022\021\n\rGONG_HUI_BOSS\020\021\022\016\n\nHERO_LEVEL\020\022\022\r"
    "\n\tGEM_LEVEL\020\023\022\027\n\023EQUIP_ENHANCE_LEVEL\020\024\022\032"
    "\n\026COMMON_GOD_EQUIP_LEVEL\020\025\022\032\n\026HOUNOR_GOD"
    "_EQUIP_LEVEL\020\026\022\027\n\023SKILL_ENHANCE_LEVEL\020\027\022"
    "\023\n\017MAIN_ROLE_LEVEL\020\030\022\025\n\021TOTAL_LOGIN_TIME"
    "S\020\031\022\027\n\023EQUIP_ENHANCE_TIMES\020\032\022\030\n\024CROSS_MI"
    "SSION_NUMBER\020\033\022\022\n\016FIGHT_POINT_UP\020\034\022\033\n\027EQ"
    "UIP_ENHANCE_ALL_LEVEL\020\035\022\025\n\021HERO_EXPEND_T"
    "IMES\020\036\022\025\n\021HOUNOR_MAKE_TIMES\020\037\022\027\n\023BAPTIZE"
    "_EQUIP_TIMES\020 \022\025\n\021SMELT_EQUIP_COUNT\020!\022\"\n"
    "\036COMMON_GOD_EQUIP_SWALLOW_TIMES\020\"\022!\n\035HOU"
    "NOR_GOD_EQUIP_WALLOW_TIMES\020#\022\034\n\030GOD_EQUI"
    "P_COMPOUND_TIMES\020$\022\032\n\026GOD_EQUIP_EXTEND_T"
    "IMES\020%\022\023\n\017GEM_DRESS_TIMES\020&\022\031\n\025COMMON_SH"
    "OP_BUY_TIMES\020\'\022\027\n\023SUIT_FRAGMENT_TIMES\020(\022"
    "\030\n\024SUIT_DECOMPOSE_TIMES\020)\022\032\n\026EXCHANGE_CR"
    "YSTAL_TIMES\020*\022\027\n\023JING_JI_CHANG_TIMES\020+\022\020"
    "\n\014VIP_LEVEL_UP\020,\022\026\n\022JING_JI_CHANG_RANK\020-"
    "\022\024\n\020E_MO_RU_QIN_RANK\020.\022\027\n\023CROSS_MISSION_"
    "TIMES\020/\022\031\n\025TOTAL_GAIN_COIN_COUNT\0200\022\016\n\nHE"
    "RO_COUNT\0201\022%\n!DRESS_COMMON_GOD_EQUIP_STA"
    "R_LEVEL\0202\022%\n!DRESS_HOUNOR_GOD_EQUIP_STAR"
    "_LEVEL\0203\022\026\n\022DRESS_R_SUIT_COUNT\0204\022\027\n\023DRES"
    "S_SR_SUIT_COUNT\0205\022\030\n\024DRESS_SSR_SUIT_COUN"
    "T\0206\022\027\n\023DRESS_UR_SUIT_COUNT\0207\022\025\n\021PURPLE_H"
    "ERO_COUNT\0208\022\023\n\017GOLD_HERO_COUNT\0209\022!\n\035E_MO"
    "_RU_QIN_LAST_ATTACK_COUNT\020:\022\026\n\022ROLE_UPGR"
    "ADE_QUEST\020;\022\031\n\025EIGHTEENPRINCES_FIRST\020<\022\030"
    "\n\024EIGHTEENPRINCES_PASS\020=*Q\n\tQuestType\022\t\n"
    "\005COUNT\020\001\022\014\n\010STATEFUL\020\002\022\023\n\017LESS_THAN_COUN"
    "T\020\003\022\026\n\022LESS_THAN_STATEFUL\020\004**\n\013YaYaMsgTy"
    "pe\022\014\n\010GET_TYPE\020\001\022\r\n\tPUSH_TYPE\020\002*6\n\013Eleme"
    "ntType\022\007\n\003ALL\020\001\022\007\n\003ICE\020\002\022\010\n\004FIRE\020\003\022\013\n\007TH"
    "UNDER\020\004*I\n\020HeroTokenMsgType\022\020\n\014CONSUME_I"
    "TEM\020\001\022\014\n\010GET_TASK\020\002\022\025\n\021GEM_COMPOUND_ONCE"
    "\020\003*\310\003\n\010RankType\022\030\n\024WING_WHITE_TIME_RANK\020"
    "\001\022\030\n\024WING_GREEN_TIME_RANK\020\002\022\027\n\023WING_BLUE"
    "_TIME_RANK\020\003\022\031\n\025WING_PURPLE_TIME_RANK\020\004\022"
    "\031\n\025WING_ORANGE_TIME_RANK\020\005\022\022\n\016LEVEL_ALL_"
    "RANK\020\025\022\025\n\021LEVEL_PROFJS_RANK\020\026\022\025\n\021LEVEL_P"
    "ROFGS_RANK\020\027\022\025\n\021LEVEL_PROFCS_RANK\020\030\022\030\n\024C"
    "USTOMPASS_BOSS_RANK\020\037\022\034\n\030CUSTOMPASS_TRAI"
    "NING_RANK\020 \022\027\n\023ALLIANCE_LEVEL_RANK\020)\022\032\n\026"
    "ALLIANCE_VITALITY_RANK\020*\022\032\n\026ALLIANCE_BOS"
    "SHARM_RANK\020+\022\022\n\016SCORE_ALL_RANK\0203\022\025\n\021SCOR"
    "E_PROFJS_RANK\0204\022\025\n\021SCORE_PROFGS_RANK\0205\022\025"
    "\n\021SCORE_PROFCS_RANK\0206*8\n\rWingsConstant\022\021"
    "\n\rMAX_LUCKY_NUM\020d\022\024\n\020WINGS_OPEN_LEVEL\020(*"
    "+\n\021BattleUseItemType\022\010\n\004NONE\020\000\022\014\n\010USE_IT"
    "EM\020\001*+\n\nGemShopBuy\022\013\n\007GOLDBUY\020\001\022\020\n\014GEMVO"
    "LUMEBUY\020\002*E\n\021AllianCheckButton\022\027\n\023CHECK_"
    "BUTTON_TYPE_1\020\000\022\027\n\023CHECK_BUTTON_TYPE_2\020\001"
    "*2\n\nApplyState\022\021\n\rAPPLY_STATE_1\020\001\022\021\n\rAPP"
    "LY_STATE_2\020\002*:\n\017AllianOperState\022\022\n\016Refus"
    "ed_TYPE_2\020\000\022\023\n\017APPROVAL_TYPE_1\020\001*A\n\027Appl"
    "yAddAllianceUpEmail\022\022\n\016UPEMAIL_TYPE_1\020\001\022"
    "\022\n\016UPEMAIL_TYPE_2\020\002*D\n\020AddAllianceState\022"
    "\031\n\025INITIATIVE_ADD_TYPE_1\020\001\022\025\n\021MAIN_AGREE"
    "_TYPE_2\020\002*@\n\021ExitAllianceState\022\025\n\021INITIA"
    "TIVE_TYPE_1\020\001\022\024\n\020MAIN_KICK_TYPE_2\020\002*F\n\021A"
    "ddOrExitAlliance\022\027\n\023ADD_ALLIANCE_TYPE_1\020"
    "\001\022\030\n\024EXIT_ALLIANCE_TYPE_2\020\002*(\n\013IosGitSta"
    "te\022\014\n\010HAVE_GET\020\001\022\013\n\007NOT_GET\020\000*\331\001\n\010DataTy"
    "pe\022\r\n\tCOIN_TYPE\020\001\022\r\n\tGOLD_TYPE\020\002\022\017\n\013VALO"
    "R_SCORE\020\003\022\021\n\rHISTORY_VALOR\020\004\022\t\n\005HONOR\020\005\022"
    "\016\n\nREPUTATION\020\006\022\026\n\022CONTRIBUTION_VALUE\020\007\022"
    "\023\n\017CROSS_COIN_TYPE\020\010\022\016\n\nLUCK_SCORE\020\t\022\021\n\r"
    "CAN_BUY_TIMES\020\n\022\022\n\016CRYSTAL_CHANGE\020\013\022\014\n\010G"
    "EM_TYPE\020\014*\260\001\n\010ShopType\022\021\n\rGOBLIN_MARKET\020"
    "\001\022\020\n\014COINS_MARKET\020\002\022\023\n\017ALLIANCE_MARKET\020\003"
    "\022\020\n\014ARENA_MARKET\020\004\022\020\n\014VALOR_MARKET\020\005\022\020\n\014"
    "CROSS_MARKET\020\006\022\020\n\014BLACK_MARKET\020\007\022\022\n\016CRYS"
    "TAL_MARKET\020\010\022\016\n\nGEM_MARKET\020\t*4\n\021ShopOper"
    "ationType\022\r\n\tINIT_TYPE\020\001\022\020\n\014REFRESH_TYPE"
    "\020\002*H\n\021RoleActiviteState\022\017\n\013IS_ACTIVITE\020\001"
    "\022\020\n\014NOT_ACTIVITE\020\000\022\020\n\014CAN_ACTIVITE\020\002*W\n\r"
    "RoleTrainType\022\017\n\013COMMON_TYPE\020\001\022\021\n\rADVANC"
    "ED_TYPE\020\002\022\020\n\014PLATINA_TYPE\020\003\022\020\n\014DIAMOND_T"
    "YPE\020\004*B\n\017MultiEliteState\022\014\n\010IS_AWAIT\020\001\022\r"
    "\n\tIS_SETOUT\020\002\022\022\n\016IS_HOUSE_OWNER\020\003*G\n\017Add"
    "RoleAttrType\022\013\n\007ONESELF\020\000\022\031\n\025MAIN_ROLE_A"
    "ND_ONESELF\020\001\022\014\n\010ALL_ROLE\020\002*G\n\021WorldBossB"
    "uffType\022\020\n\014ONESELF_TYPE\020\001\022\022\n\016MERCENARY_T"
    "YPE\020\002\022\014\n\010ALL_TYPE\020\003*\256\001\n\020ActionRecordType"
    "\022\022\n\016RED_POINT_INTO\020\001\022\024\n\020MAIN_BANNER_INTO"
    "\020\002\022\027\n\023SEL_PAGINATION_INTO\020\003\022\035\n\031SEL_LIMIT"
    "_PAGINATION_INTO\020\004\022\023\n\017MULTIELITE_INTO\020\005\022"
    "\024\n\020MULTIELITE_START\020\006\022\r\n\tGVG_ENTER\020\007*9\n\016"
    "ActionModuleId\022\026\n\021MODULE_MULTIELITE\020\220N\022\017"
    "\n\nMODULE_GVG\020\221N*C\n\017MutliNoticeType\022\016\n\nST"
    "ART_TYPE\020\001\022\017\n\013SETOUT_TYPE\020\002\022\017\n\013INVITE_TY"
    "PE\020\003*\232\001\n\tHaremType\022\025\n\021HAREM_TYPE_COMMON\020"
    "\001\022\025\n\021HAREM_TYPE_MIDDLE\020\002\022\027\n\023HAREM_TYPE_A"
    "DVANCED\020\003\022\025\n\021HAREM_TYPE_STRICT\020\004\022\031\n\025HARE"
    "M_TYPE_NEW_STRICT\020\005\022\024\n\020HAREM_TYPE_LIMIT\020"
    "\006*Y\n\022BossAutoBattleType\022\025\n\021BOSS_NO_AUTO_"
    "TYPE\020\000\022\024\n\020BOSS_COMMON_TYPE\020\001\022\026\n\022BOSS_ADV"
    "ANCED_TYPE\020\002*i\n\021WorldBossRankType\022\031\n\025BOS"
    "S_PERSON_RANK_TYPE\020\001\022\034\n\030BOSS_LAST_KILL_R"
    "ANT_TYPE\020\002\022\033\n\027BOSS_ALLIANCE_RANK_TYPE\020\003*"
    "T\n\024WorldBossFailingType\022\014\n\010NOT_PART\020\000\022\r\n"
    "\tHEAD_TYPE\020\001\022\016\n\nCHEST_TYPE\020\002\022\017\n\013HAUNCH_T"
    "YPE\020\003*;\n\017WorldBossIsFree\022\023\n\017WORLD_BOSS_F"
    "REE\020\001\022\023\n\017WORLD_BOSS_GOLD\020\002*7\n\020EquipEnhan"
    "ceType\022\016\n\nEQUIP_ONCE\020\001\022\023\n\017EQUIP_TEN_TIME"
    "S\020\002*\275\002\n\021SevenDayEventType\022\t\n\005LOGIN\020\001\022\014\n\010"
    "RECHARGE\020\002\022\013\n\007LEVELUP\020\003\022\r\n\tCHALLENGE\020\004\022\017"
    "\n\013BUYDISCOUNT\020\005\022\016\n\nFASTBATTLE\020\006\022\r\n\tATHLE"
    "TICS\020\007\022\r\n\tEQUIPMENT\020\010\022\021\n\rEQUIPSUCCINCT\020\t"
    "\022\016\n\nEQUIPSTRAN\020\n\022\013\n\007AUTOPVE\020\013\022\014\n\010TRAININ"
    "G\020\014\022\017\n\013DEPUTYTRAIN\020\r\022\020\n\014DEPUTYTRAVEL\020\016\022\021"
    "\n\rDEPUTYDEVELOP\020\017\022\r\n\tDEPUTYNUM\020\021\022\017\n\013MAID"
    "ENTRAIN\020\022\022\014\n\010PVPARENA\020\023\022\022\n\016MAINROLE_SCOR"
    "E\020\024*4\n\020LoginSignAwdType\022\r\n\tSIGNAWARD\020\001\022\021"
    "\n\rSIGNOPENCHEST\020\002*L\n\032EighteenPrincesLaye"
    "rStatus\022\014\n\010NOT_OPEN\020\000\022\022\n\016CAN_CHANLLENGE\020"
    "\001\022\014\n\010ALL_PASS\020\002*\\\n\035EighteenPrincesMedica"
    "lKitTYPE\022\021\n\rBIGMEDICALKIT\020\001\022\023\n\017MIDLEMEDI"
    "CALKIT\020\002\022\023\n\017SMALLMEDICALKIT\020\003*>\n\016BadgeAt"
    "trGrade\022\026\n\022BADGE_PRIMARY_ATTR\020\001\022\024\n\020BADGE"
    "_EXTRA_ATTR\020\002*z\n\tBadgeType\022\022\n\016POWERFUL_B"
    "ADGE\020\001\022\021\n\rCOURAGE_BADGE\020\002\022\023\n\017PRECISION_B"
    "ADGE\020\003\022\020\n\014STRONG_BADGE\020\004\022\016\n\nSOFT_BADGE\020\005"
    "\022\017\n\013QUICK_BADGE\020\006*b\n\014BadgeQuality\022\017\n\013GRE"
    "EN_BADGE\020\002\022\016\n\nBLUE_BADGE\020\003\022\020\n\014PURPLE_BAD"
    "GE\020\004\022\020\n\014ORANGE_BADGE\020\005\022\r\n\tRED_BADGE\020\006B\031\n"
    "\027com.guaji.game.protocol", 14184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Const.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Const_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Const_2eproto {
  StaticDescriptorInitializer_Const_2eproto() {
    protobuf_AddDesc_Const_2eproto();
  }
} static_descriptor_initializer_Const_2eproto_;
const ::google::protobuf::EnumDescriptor* itemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemType_descriptor_;
}
bool itemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* playerAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerAttr_descriptor_;
}
bool playerAttr_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 2001:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* roleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleType_descriptor_;
}
bool roleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* chatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatType_descriptor_;
}
bool chatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* toolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return toolType_descriptor_;
}
bool toolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 35:
    case 36:
    case 37:
    case 38:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipPart_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipPart_descriptor_;
}
bool equipPart_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipQuality_descriptor_;
}
bool equipQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipAutoSell_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipAutoSell_descriptor_;
}
bool equipAutoSell_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* elementQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementQuality_descriptor_;
}
bool elementQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* elementAutoSell_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return elementAutoSell_descriptor_;
}
bool elementAutoSell_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* prof_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return prof_descriptor_;
}
bool prof_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 2001:
    case 2002:
    case 2003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* attrCond_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return attrCond_descriptor_;
}
bool attrCond_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipAttrGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipAttrGrade_descriptor_;
}
bool equipAttrGrade_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* attr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return attr_descriptor_;
}
bool attr_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 2001:
    case 2002:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2103:
    case 2104:
    case 3001:
    case 3002:
    case 3003:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Buff_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Buff_descriptor_;
}
bool Buff_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 38:
    case 100:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* changeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return changeType_descriptor_;
}
bool changeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* buyMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buyMoneyType_descriptor_;
}
bool buyMoneyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* shootType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shootType_descriptor_;
}
bool shootType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* shootFreeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shootFreeType_descriptor_;
}
bool shootFreeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* shootRewardState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shootRewardState_descriptor_;
}
bool shootRewardState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* equipStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipStatus_descriptor_;
}
bool equipStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* monsterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterType_descriptor_;
}
bool monsterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleStatus_descriptor_;
}
bool RoleStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeType_descriptor_;
}
bool NoticeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenLevelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenLevelType_descriptor_;
}
bool OpenLevelType_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* kickReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kickReason_descriptor_;
}
bool kickReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActivityId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityId_descriptor_;
}
bool ActivityId_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 51:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 139:
    case 140:
    case 141:
    case 142:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendChatMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendChatMsgType_descriptor_;
}
bool FriendChatMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* notifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyType_descriptor_;
}
bool notifyType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* dailyRefreshType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailyRefreshType_descriptor_;
}
bool dailyRefreshType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 102:
    case 103:
    case 104:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 130:
    case 131:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestState_descriptor_;
}
bool QuestState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStep_descriptor_;
}
bool QuestStep_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestEventType_descriptor_;
}
bool QuestEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestType_descriptor_;
}
bool QuestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YaYaMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaYaMsgType_descriptor_;
}
bool YaYaMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ElementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementType_descriptor_;
}
bool ElementType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HeroTokenMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroTokenMsgType_descriptor_;
}
bool HeroTokenMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankType_descriptor_;
}
bool RankType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 21:
    case 22:
    case 23:
    case 24:
    case 31:
    case 32:
    case 41:
    case 42:
    case 43:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WingsConstant_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingsConstant_descriptor_;
}
bool WingsConstant_IsValid(int value) {
  switch(value) {
    case 40:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleUseItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleUseItemType_descriptor_;
}
bool BattleUseItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GemShopBuy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemShopBuy_descriptor_;
}
bool GemShopBuy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllianCheckButton_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianCheckButton_descriptor_;
}
bool AllianCheckButton_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyState_descriptor_;
}
bool ApplyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllianOperState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianOperState_descriptor_;
}
bool AllianOperState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyAddAllianceUpEmail_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyAddAllianceUpEmail_descriptor_;
}
bool ApplyAddAllianceUpEmail_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddAllianceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAllianceState_descriptor_;
}
bool AddAllianceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExitAllianceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitAllianceState_descriptor_;
}
bool ExitAllianceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddOrExitAlliance_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddOrExitAlliance_descriptor_;
}
bool AddOrExitAlliance_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IosGitState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IosGitState_descriptor_;
}
bool IosGitState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopType_descriptor_;
}
bool ShopType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShopOperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopOperationType_descriptor_;
}
bool ShopOperationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleActiviteState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleActiviteState_descriptor_;
}
bool RoleActiviteState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleTrainType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTrainType_descriptor_;
}
bool RoleTrainType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MultiEliteState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiEliteState_descriptor_;
}
bool MultiEliteState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddRoleAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRoleAttrType_descriptor_;
}
bool AddRoleAttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldBossBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossBuffType_descriptor_;
}
bool WorldBossBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionRecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRecordType_descriptor_;
}
bool ActionRecordType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionModuleId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionModuleId_descriptor_;
}
bool ActionModuleId_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MutliNoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutliNoticeType_descriptor_;
}
bool MutliNoticeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HaremType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaremType_descriptor_;
}
bool HaremType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BossAutoBattleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossAutoBattleType_descriptor_;
}
bool BossAutoBattleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldBossRankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRankType_descriptor_;
}
bool WorldBossRankType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldBossFailingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossFailingType_descriptor_;
}
bool WorldBossFailingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorldBossIsFree_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossIsFree_descriptor_;
}
bool WorldBossIsFree_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipEnhanceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipEnhanceType_descriptor_;
}
bool EquipEnhanceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SevenDayEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayEventType_descriptor_;
}
bool SevenDayEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginSignAwdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSignAwdType_descriptor_;
}
bool LoginSignAwdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EighteenPrincesLayerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EighteenPrincesLayerStatus_descriptor_;
}
bool EighteenPrincesLayerStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EighteenPrincesMedicalKitTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EighteenPrincesMedicalKitTYPE_descriptor_;
}
bool EighteenPrincesMedicalKitTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BadgeAttrGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BadgeAttrGrade_descriptor_;
}
bool BadgeAttrGrade_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BadgeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BadgeType_descriptor_;
}
bool BadgeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BadgeQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BadgeQuality_descriptor_;
}
bool BadgeQuality_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
